{
  "dashboards": [
    {
      "key": "38604dd6-e34a-4088-a49a-69ca30880c19",
      "createdAt": [
        783136096,
        1596
      ],
      "createdBy": "tplugor",
      "metaData": {
        "schemaVersion": "3",
        "legacyKey": "",
        "legacyVersion": "",
        "fromPackage": ""
      },
      "name": "Circuit Details",
      "description": "#device",
      "widgets": [
        {
          "id": "f03187a0-2673-48a8-bfe7-0bfa9c5e5315",
          "name": "Circuit Details for all devices in the fabric",
          "position": {
            "x": 0,
            "y": 0
          },
          "dimensions": {
            "width": 19,
            "height": 30
          },
          "type": "aql-query-widget",
          "inputs": {
            "expression": "let connStatus = `*:/Sysdb/pseudowire/agent/pseudowireAttributeStatusColl/connectorStatus`\nlet patchConfig = `*:/Sysdb/pseudowire/config/patch/*/connector`\nlet patchInfo = `*:/Sysdb/pseudowire/agent/pseudowirePatchInfoColl/patchInfo/*`\nlet localCon = `*:/Sysdb/pseudowire/agent/localConnectorStatusColl/connectorEncapStatus/*`\nlet localConStatus = `*:/Sysdb/pseudowire/agent/localConnectorStatusColl/connectorStatus`\nlet patchLocalConStatus = `*:/Sysdb/pseudowire/agent/patch/localConnStatus/*`\nlet state_dict = newDict() | setFields(\"unknown\", \"Unknown\", \"adminDown\", \"Admin down\",\"cliConflict\", \"CLI conflict\",\"intfMode\", \"Interface mode\",\"cliIncomplete\", \"CLI incomplete\",\"waitingForVlanId\", \"Awaiting internal VLAN\",\"cannotAllocateVlanId\", \"No internal VLAN\",\"hasTaggedIntf\", \"Conflicting tagged interface\",\"noLocalMapping\", \"No label\",\"noLocalEnd\", \"Interface unavailable\",\"noRemoteEnd\", \"No remote\",\"noPeerLabel\", \"No peer label\",\"pwTypeMismatch\", \"Type mismatch\",\"controlWordMismatch\", \"Control word mismatch\",\"mtuMismatch\", \"MTU mismatch\",\"pwNotForwardingRemote\", \"Remote fail\",\"noTunnel\", \"No tunnel\",\"noTunnelRib\", \"No tunnel RIB\",\"noAdPerESRoute\", \"No AD per ES route\",\"neighborEvpn\", \"Down, neighbor EVPN\",\"unsupportedTunnelMode\", \"Unsupported tunnel mode\",\"down\", \"Down\",\"encapConnInfoMissing\", \"Invalid local connector encapsulation info\",\"encapInvalidConnConfig\", \"Invalid local connector encapsulation info\",\"encapHwFecUnprogrammed\", \"Unprogrammed Hardware FEC\",\"encapHwProgrammingFailed\", \"Encapsulation programming failed\",\"connectorUnprogrammed\", \"Unprogrammed local connector\",\"decapConnInfoMissing\", \"Invalid local connector decapsulation info\",\"decapInvalidConnConfig\", \"Invalid local connector decapsulation info\",\"decapHwProgrammingFailed\", \"Decapsulation programming failed\",\"unprogrammed\", \"Unprogrammed\",\"up\", \"Up\",\"partiallyUp\", \"Partially up\",\"standby\", \"Standby\",\"disabledByPw\", \"Disabled by PW\")\nlet result = newDict()\nlet circuit_state = newDict() | setFields(\"patchUp\", \"up\", \"patchDown\", \"down\")\nlet id = 1\nfor devKey, devValue in connStatus{\n\n    for cKey, cVal in merge(devValue){\n        result[id] = newDict()\n        result[id][\"Circuit\"] = cKey[\"content\"][\"name\"] # patch Name\n        result[id][\"Remote Connector Status\"] = state_dict[cVal[\"status\"][\"Name\"]]\n        result[id][\"Hostname\"] = devKey\n        let patch_state_name = merge(patchInfo[devKey][result[id][\"Circuit\"]])[\"patchState\"][\"Name\"]\n        if dictHasKey(circuit_state, patch_state_name){\n            result[id][\"Circuit State\"] = circuit_state[patch_state_name]\n        } else {\n            result[id][\"Circuit State\"] = patch_state_name\n        }\n        for k,v in patchLocalConStatus[devKey]{\n            result[id][\"Interface\"] = merge(v)[\"connectorKey\"][\"name\"]\n            if merge(v)[\"patchName\"] == result[id][\"Circuit\"]{\n                let conn_status_temp = merge(localCon[devKey][k])[\"status\"][\"Name\"]\n                \n                if conn_status_temp == \"connectorUnprogrammed\"{\n                    result[id][\"Local Connector Status\"] = state_dict[merge(localConStatus[devKey])[k][\"status\"][\"Name\"]]\n                } else {\n                    result[id][\"Local Connector Status\"] = state_dict[conn_status_temp]\n                }\n\n            }\n            let temp = v[0]\n            result[id][\"Last Change\"] = _bracketTime\n        }\n        let patchConfigStateRemote = merge(patchConfig[devKey][cKey[\"content\"][\"name\"]])[\"1\"]\n        let patchConfigStateLocal = merge(patchConfig[devKey][cKey[\"content\"][\"name\"]])[\"0\"]\n        if patchConfigStateLocal[\"noErrDisable\"] == true{\n            result[id][\"Remote Failure Detection\"] = \"Off\" #\"None (suppressed by no-errdisable)\"\n        } else{\n            if patchConfigStateRemote[\"connectorKey\"][\"connectorType\"][\"Name\"] == \"ldp\" {\n                result[id][\"Remote Failure Detection\"] = \"remote not forwarding\"\n            }\n            if patchConfigStateRemote[\"connectorKey\"][\"connectorType\"][\"Name\"] == \"bgp\" && patchConfigStateRemote[\"noErrDisable\"] == false{\n                result[id][\"Remote Failure Detection\"] = \"On\" #\"Remote Failure\"\n            } else {\n                result[id][\"Remote Failure Detection\"] = \"None\"\n            }\n        }\n        let id = id +1\n    }\n    \n    \n}\nresult\n",
            "graphConfig": {
              "defaultSort": {
                "key": "Circuit"
              },
              "columnOrders": {
                "key": 1,
                "Hostname": 2,
                "Interface": 3,
                "Circuit": 4,
                "Circuit State": 5,
                "Last Change": 6,
                "Local Connector Status": 7,
                "Remote Connector Status": 8,
                "Remote Failure Detection": 9
              },
              "columns": {
                "Remote Connector Status": {
                  "showDotIndicator": false
                },
                "Remote Failure Detection": {
                  "showDotIndicator": true,
                  "colorMappings": [
                    {
                      "type": "value",
                      "options": {
                        "On": {
                          "color": "green",
                          "index": 0
                        },
                        "Off": {
                          "color": "red",
                          "index": 1
                        }
                      }
                    }
                  ]
                },
                "Circuit State": {
                  "showDotIndicator": true,
                  "colorMappings": [
                    {
                      "type": "value",
                      "options": {
                        "up": {
                          "color": "green",
                          "index": 0
                        },
                        "down": {
                          "color": "red",
                          "index": 1
                        }
                      }
                    }
                  ]
                },
                "key": {
                  "hide": true
                }
              }
            },
            "visualization": "table"
          },
          "location": "main",
          "styles": {
            "hideTitle": false,
            "backgroundColor": "",
            "hideHorizontalBar": false,
            "titleSize": 20
          },
          "parent": ""
        },
        {
          "id": "c0a89be9-7315-4bd5-90bc-0073bb859875",
          "name": "BGP EVPN instance VPWS",
          "position": {
            "x": 0,
            "y": 30
          },
          "dimensions": {
            "width": 19,
            "height": 33
          },
          "type": "aql-query-widget",
          "inputs": {
            "expression": "let macVrfConfig = `*:/Sysdb/routing/bgp/macvrf/config/*`\nlet pseudowireConfig = `*:/Sysdb/routing/bgp/macvrf/config/*/pseudowireConfig`\nlet id = 0\nlet result = newDict()\nfor devKey,vpwsVal in macVrfConfig{\n    \n    for vpK, vpV in vpwsVal{\n        result[id] = newDict()\n        result[id][\"Hostname\"] = devKey\n        let vpws_id = merge(vpV)[\"name\"]\n        let vpws_name = strSplit(vpws_id,\".\")[1]\n        #let vpws_name = strCut(vpws_id,5,length(vpws_id))\n        result[id][\"EVPN Instance\"] = vpws_name\n        result[id][\"Local VPWS ID\"] = merge(pseudowireConfig[devKey][vpws_id])[vpws_name][\"vpwsIdLocal\"][\"value\"]\n\n        result[id][\"Remote VPWS ID\"] = merge(pseudowireConfig[devKey][vpws_id])[vpws_name][\"vpwsIdRemote\"][\"value\"]\n        result[id][\"Route distinguisher\"] = \"TODO\"\n        result[id][\"RT Import\"] = \"TODO\"\n        result[id][\"RT Export\"] = \"TODO\"\n        let id = id + 1\n    }\n\n    # result[id][\"Route distinguisher\"] =\n    # result[id][\"RT Import\"] =\n    # result[id][\"RT Export\"] = \n\n\n}\n\nresult\n",
            "graphConfig": {
              "columns": {
                "Hostname": {
                  "mapToHostname": true
                },
                "key": {
                  "hide": true
                }
              },
              "columnOrders": {
                "key": 1,
                "Hostname": 2,
                "EVPN Instance": 3,
                "Local VPWS ID": 4,
                "Remote VPWS ID": 5
              }
            },
            "visualization": "table"
          },
          "location": "main",
          "parent": ""
        },
        {
          "id": "c4d467c2-9900-4e8f-a0f3-548959039c7e",
          "name": "Circuit Status",
          "position": {
            "x": 19,
            "y": 0
          },
          "dimensions": {
            "width": 5,
            "height": 9
          },
          "type": "aql-query-widget",
          "inputs": {
            "expression": "let connStatus = `*:/Sysdb/pseudowire/agent/pseudowireAttributeStatusColl/connectorStatus`\nlet patchInfo = `*:/Sysdb/pseudowire/agent/pseudowirePatchInfoColl/patchInfo/*`\nlet localCon = `*:/Sysdb/pseudowire/agent/localConnectorStatusColl/connectorEncapStatus/*`\nlet patchLocalConStatus = `*:/Sysdb/pseudowire/agent/patch/localConnStatus/*`\nlet result = newDict()\nlet circuit_state = newDict() | setFields(\"patchUp\", \"up\", \"patchDown\", \"down\")\nlet id = 1\nfor devKey, devValue in connStatus{\n    #result[id] = newDict()\n    #result[id][devKey] = newDict()\n    for cKey, cVal in merge(devValue){\n        result[id] = newDict()\n        result[id] = cVal[\"status\"][\"Name\"]\n        # for k,v in patchLocalConStatus[devKey]{\n        #     if merge(v)[\"patchName\"] == cKey[\"content\"][\"name\"]{\n        #          result[id][\"Local Connector Status\"] = merge(localCon[devKey][k])[\"status\"][\"Name\"]\n\n        #     }\n        # }\n        let id = id +1\n    }\n    \n    \n}\nlet countUp = 0\nlet countNoRemoteEnd = 0\nlet countDown = 0\nfor k,v in result {\n    if v == \"up\" {\n        let countUp = countUp + 1\n    }\n    if v == \"noRemoteEnd\"{\n        let countNoRemoteEnd = countNoRemoteEnd +1\n    }\n    if v == \"down\" {\n        let countDown = countDown + 1\n    }\n\n}\nnewDict() | setFields(\"Up\", countUp, \"Down\", countDown, \"No Remote End\", countNoRemoteEnd)",
            "graphConfig": {
              "itemOrders": {},
              "colorOverrides": {
                "Up": "green",
                "No Remote End": "red",
                "Down": "orange"
              }
            },
            "visualization": "donutGraph"
          },
          "location": "main",
          "parent": ""
        }
      ],
      "lastUpdated": 1715898563339,
      "lastUpdatedBy": "bhayes"
    }
  ]
}