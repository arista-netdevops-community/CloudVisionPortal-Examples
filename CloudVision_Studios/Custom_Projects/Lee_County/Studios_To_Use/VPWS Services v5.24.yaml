- service: arista.studio.v1.StudioConfigService
  method: Set
  body:
    value:
      key:
        studio_id: 8186a530-1f1a-4650-ace2-048b1422e113
        workspace_id: ac73eec4-d290-4239-8589-3d40cf5a7beb
      display_name: VPWS Services v5.24
      description: Deploy and manage EVPN VPWS Services
      template:
        type: TEMPLATE_TYPE_MAKO
        body: |
          <%
          import sys, os, json, ipaddress, re
          from collections import OrderedDict
          import re
          from arista.tag.v2.tag_pb2 import TagKey, TagAssignmentKey
          from arista.tag.v2.services import TagConfigServiceStub, TagAssignmentConfigServiceStub
          from arista.tag.v2.services import TagConfigSetRequest, TagAssignmentConfigSetRequest
          import tagsearch_python.tagsearch_pb2_grpc as tsgr
          import tagsearch_python.tagsearch_pb2 as tspb
          from arista.tag.v2.tag_pb2 import Tag, TagKey, TagAssignment, TagAssignmentKey, TagAssignmentConfig
          from cloudvision.cvlib.tags import Tag

          workspace_id = ctx.studio.workspaceId
          my_device = ctx.getDevice()
          my_device_id = my_device.id
          serviceIDs = {}
          @ctx.benchmark
          def set_Device_Cust_Name_tags(CustName):
            my_device._assignTag(ctx, Tag('Customer_Name',CustName), replaceValue=False)

          @ctx.benchmark
          def set_Device_Cust_ID_tags(CustID):
            my_device._assignTag(ctx, Tag('Customer_ID',CustID), replaceValue=False)

          @ctx.benchmark
          def set_Device_Circ_ID_tags(CircID):
            my_device._assignTag(ctx, Tag('Circuit_ID', CircID), replaceValue=False)

          @ctx.benchmark
          def set_Device_Circ_Name_tags(CircName):
            my_device._assignTag(ctx, Tag('Circuit_Name', CircName), replaceValue=False)

          @ctx.benchmark
          def unset_Device_Cust_Name_tags():
            my_device._unassignTag(ctx, Tag('Customer_Name', None))

          @ctx.benchmark
          def unset_Device_Cust_ID_tags():
            my_device._unassignTag(ctx, Tag('Customer_ID', None))

          @ctx.benchmark
          def unset_Device_Circ_ID_tags():
            my_device._unassignTag(ctx, Tag('Circuit_ID', None))

          @ctx.benchmark
          def unset_Device_Circ_Name_tags():
            my_device._unassignTag(ctx, Tag('Circuit_Name', None))

          def get_tag_values_applied_to_device(tag_assignment_key):
            label = tag_assignment_key.label.value
            device_id = tag_assignment_key.device_id.value
            workspace_id = tag_assignment_key.workspace_id.value
            # Create tagstub
            tsclient = ctx.getApiClient(tsgr.TagSearchStub)
            matching_tags = []
            # Create TagValueSearchRequest
            tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
            for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
              query = '{}:\"{}\" AND device:{}'.format(tag.label, tag.value, device_id)
              tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
              tagmresp =  tsclient.GetTagMatchesV2(tagmr)
              for match in tagmresp.matches:
                if match.device.device_id == device_id:
                  matching_tags.append(tag)
            return matching_tags

          def resolveWithContext(self, device=None):
              '''This function is same as resolve(), but in addition, returns a context object as the
                  second return value, from which additional information can be obtained.
              '''
              if device is None:
                  device = self.device
              for i, inp in enumerate(self.inputs):
                  devs = inp.get("devices")
                  query_str = inp.get("tags", {"query": ""}).get("query", "")
                  if devs is None:
                      continue
                  if device in devs:
                      return inp.get("inputs"), i
              return None, None

          def convert(text):
              return int(text) if text.isdigit() else text.lower()

          def alphanum_key(key):
              return [convert(c) for c in re.split('([0-9]+)', str(key))]

          def natural_sort(iterable):
              if iterable is None:
                  return list()
              return sorted(iterable, key=alphanum_key)

          def string_to_list(string_to_convert):
              numbers = []
              segments = [ segment.strip() for segment in string_to_convert.split(",") ]
              for segment in segments:
                  if "-" in segment:
                      for i in range(int(segment.split("-")[0]), int(segment.split("-")[1]) + 1):
                          numbers.append(i)
                  else:
                      numbers.append(int(segment))
              return numbers

          from itertools import count, groupby
          def list_compress(list_to_compress):
              if not isinstance(list_to_compress, list):
                  raise TypeError('value must be of type list, got %s' % type(list_to_compress))
              G = (list(x) for y, x in groupby(sorted(list_to_compress), lambda x, c=count(): next(c) - x))
              return (",".join("-".join(map(str, (g[0], g[-1])[:len(g)])) for g in G))

          def get_tag_values_applied_to_device(tag_assignment_key):
              label = tag_assignment_key.label.value
              value = tag_assignment_key.value.value
              device_id = tag_assignment_key.device_id.value
              workspace_id = tag_assignment_key.workspace_id.value
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              matching_tags = []
              tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
              for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                  if not tag.value:
                      continue
                  query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                  tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                  tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                  for match in tagmresp.matches:
                      if match.device.device_id == device_id:
                          matching_tags.append(tag)

              return matching_tags

          def get_tag_values_applied_to_interface(tag_assignment_key):
              label = tag_assignment_key.label.value
              value = tag_assignment_key.value.value
              device_id = tag_assignment_key.device_id.value
              workspace_id = tag_assignment_key.workspace_id.value
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              matching_tags = []
              tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
              for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                  if not tag.value:
                      continue
                  query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                  tagmr = tspb.TagMatchRequestV2(query=query, type="Interface", workspace_id=workspace_id, topology_studio_request=True)
                  tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                  for match in tagmresp.matches:
                      if match.device.device_id == device_id:
                          matching_tags.append(tag)
              return matching_tags

          def get_node_segment_index(device):
              tag_assignment_key = TagAssignmentKey()
              tag_assignment_key.workspace_id.value = workspace_id
              tag_assignment_key.element_type = 1
              tag_assignment_key.label.value = "Node-Segment-Index"
              tag_assignment_key.device_id.value = device
              tags = get_tag_values_applied_to_device(tag_assignment_key)
              for tag in tags:
                  return tag.value

          class SwitchDetails:
              def __init__(self):
                  self.id = None
                  self.model = None #Model tag
                  self.eos_version = None #Eos version tag
                  self.hostname = None #hostname tag
                  self.config = {
                      "vlans": {},
                      "vrfs": {},
                      "patch_panels": {},
                      "vlan_interfaces": {},
                      "router_bgp":{
                          "as": None,
                          "router_id": None,
                          "vrfs": {},
                          "vlans": {}
                      },
                  }

              def set_config_params_via_tags(self):
                  self.config["router_bgp"]["as"] = self.get_bgp_asn()
                  self.config["router_bgp"]["router_id"] = self.get_bgp_router_id()


              def check_config_parameters(self):
                  assert self.config["router_bgp"]["as"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP ASN", "router_bgp.as", self.hostname
                      )
                  assert self.config["router_bgp"]["router_id"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP Router ID", "router_bgp.router_id", self.hostname
                      )

              def get_bgp_asn(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.as"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP ASN Tag", tag_assignment_key.label.value, self.hostname
                  )

              def get_bgp_router_id(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.router_id"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP Router ID Tag", tag_assignment_key.label.value, self.hostname
                  )

              def configure_vpwsvrfs(self, vrfs):
                  vpws_admin_field_key_words = {
                      "Right-Side-4Byte-ASN": "self.config['router_bgp']['as'].split('.',1)[1]",
                      "Left-Side-4Byte-ASN": "self.config['router_bgp']['as'].split('.',1)[0]",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']",
                      "Lo0-IPs": "vrf_details['lo0_ips']",
                      "Cust-ID": "vrf_details['customer_id']",
                      "Circ-ID": "vrf",
                  }
                  for vrf, vrf_details in vrfs.items():
                      self.config["vrfs"][vrf] = {
                          "description": None,
                          "ip_routing": False
                      }
                      switch_rd = []
                      for rd_segment in vrf_details["route_distinguisher"].split(":"):
                          if vpws_admin_field_key_words.get(rd_segment):
                              if rd_segment == "Circ-ID":
                                  rd_segment = str(eval(vpws_admin_field_key_words[rd_segment]))
                                  switch_rd.append(rd_segment)
                              else:
                                  rd_segment = str(eval(vpws_admin_field_key_words[rd_segment]))
                                  switch_rd.append(rd_segment)
                          else:
                              switch_rd.append(rd_segment)
                      switch_rd = ":".join(switch_rd)
                      switch_rt = []
                      for rt_segment in vrf_details["route_target"].split(":"):
                          if vpws_admin_field_key_words.get(rt_segment):
                              if rt_segment == "Circ-ID":
                                  rt_segment = str(eval(vpws_admin_field_key_words[rt_segment]))
                                  switch_rt.append(re.sub('\D', '', rt_segment) )
                              else:
                                  rt_segment = str(eval(vpws_admin_field_key_words[rt_segment]))
                                  switch_rt.append(rt_segment)
                          else:
                              switch_rt.append(rt_segment)
                      right_side_of_rt = switch_rt[1]
                      switch_rt = ":".join(switch_rt)
                      self.config["router_bgp"]["vrfs"][vrf] = {
                          "rd": switch_rd,
                          "vpws_id": right_side_of_rt,
                          "route_targets": {
                              "import": {
                                  "evpn": [switch_rt]
                              },
                              "export": {
                                  "evpn": [switch_rt]
                              }
                          },
                          "router_id": self.config["router_bgp"]["router_id"]
                      }

              def configure_vpwspp(self, pps):
                  for pp, pp_details in pps.items():
                      self.config["patch_panels"][pp] = {}
                      self.config["patch_panels"][pp] = pp_details

          def get_switch_details(device_id):
              labels_to_fields = {
                  "hostname": "hostname",
                  "model": "model",
                  "DC": "dc",
                  "Network": "dc_pod",
                  "PE-Number": "leaf_number",
                  "PE-Domain": "leaf_domain",
              }
              switch = None
              found_switch = False
              switch = SwitchDetails()
              switch.id = device_id
              return switch

          def getEndpoints(endpointResolver):
              end_points_details = endpointResolver.resolveAllWithContext(strict=True)
              first_device_id = None
              second_device_id = None
              both_lo0_addresses = []
              for end_points_dev, end_points_detail, end_points_context in end_points_details:
                  if first_device_id == None:
                      first_device_id = end_points_dev
                      ldev = ctx.topology.getDevices(deviceIds=[first_device_id])[0]
                      if llo0_tag := ldev.getSingleTag(ctx, 'router_bgp.router_id', required=False):
                          both_lo0_addresses.append(llo0_tag.value)
                  else:
                      second_device_id = end_points_dev
                      rdev = ctx.topology.getDevices(deviceIds=[second_device_id])[0]
                      if rlo0_tag := rdev.getSingleTag(ctx, 'router_bgp.router_id', required=False):
                          both_lo0_addresses.append(rlo0_tag.value)
              return both_lo0_addresses

          def getPorts(endpointResolver):
              end_points_details = endpointResolver.resolveAllWithContext(strict=True)
              first_device_id = None
              second_device_id = None
              both_ports = []
              for end_points_dev, end_points_detail, end_points_context in end_points_details:
                  if first_device_id == None:
                      first_device_id = 1
                      if end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          interfaces = end_points_detail["switch"]["interfaces"].resolveAllWithContext(strict=True)
                          for interfaces_dev, interfaces_detail, interfaces_context in interfaces:
                              port = interfaces_dev.strip("Ethernet")
                              both_ports.append(port)
                      if not end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          port_channel = str(end_points_detail["switch"]["portChannel"]["portChannelId"])
                          if end_points_detail["switch"]["portChannel"]["subInterfaceNumber"]:
                              port_channel = port_channel + str(end_points_detail["switch"]["portChannel"]["subInterfaceNumber"])
                          both_ports.append(port_channel)
                  else:
                      second_device_id = end_points_dev
                      if end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          interfaces = end_points_detail["switch"]["interfaces"].resolveAllWithContext(strict=True)
                          for interfaces_dev, interfaces_detail, interfaces_context in interfaces:
                              port = interfaces_dev.strip("Ethernet")
                              both_ports.append(port)
                      if not end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          port_channel = str(end_points_detail["switch"]["portChannel"]["portChannelId"])
                          if end_points_detail["switch"]["portChannel"]["subInterfaceNumber"]:
                              port_channel = port_channel + str(end_points_detail["switch"]["portChannel"]["subInterfaceNumber"])
                          both_ports.append(port_channel)
              return both_ports

          def clean_up_interface_tags():
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              intfTagList = ['Circuit_ID:*', 'Customer_Name:*', 'Customer_ID:*', 'Circuit_Name:*', 'Service_Type:*', 'Speed:*', 'Link-Type: Customer']
              for intfTag in intfTagList:
                  tagmr = tspb.TagMatchRequestV2(query=intfTag, type="Interface", workspace_id=workspace_id, topology_studio_request=False)
                  tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                  unintTagList = []
                  intfTag = intfTag.replace(':*', '')
                  intfTag = intfTag.replace(': Customer', '')    
                  for match in tagmresp.matches:
                      intfName = match.interface.interface_name
                      if intfName == "Link-Type":
                          unIntTag = (match.interface.device_id, intfName, intfTag, "Customer")
                      else:
                          unIntTag = (match.interface.device_id, intfName, intfTag, None)
                      unintTagList.append(unIntTag)
                  ctx.tags._unassignInterfaceTags(unintTagList)

          switch = get_switch_details(my_device_id)
          vrfs = {}
          vlans = {}
          vpwsvrfs = {}
          vpwspp = {}
          # clean up tags
          unset_Device_Cust_Name_tags()
          unset_Device_Cust_ID_tags()
          unset_Device_Circ_ID_tags()
          unset_Device_Circ_Name_tags()
          clean_up_interface_tags()
          if not customers:
              return
          for customer in customers:
              for vpws in customer["vpws"]:
                  svc_id = vpws["circuitId"]
                  if svc_id in serviceIDs.keys():
                      assert False, f"Duplicate Circuit ID detected. Customer {customer['customerName']} ({vpws['circuitId']}) overlaps with {serviceIDs[svc_id]}."
                  serviceIDs[svc_id] = f"{customer['customerName']}, ({vpws['circuitId']})"
          # read in inputs
          for customer in customers:
              for vrf in customer["vpws"]:
                  custID = customer["customerId"]
                  if  vrf["switches"].resolve()["switch"]:
                      serviceType = vrf["serviceType"]
                      both_lo0_addresses = getEndpoints(vrf["switches"])
                      vpwsvrfs[vrf["circuitId"]] = {
                          "route_distinguisher": globalSettings["vrfRouteDistinguisherFormat"],
                          "route_target": globalSettings["vrfRouteTargetFormat"],
                          "customer_id": customer["customerId"],
                          "local_port_number": local_port_number,
                          "color": color
                      }
                      rate = ""
                      burst = ""
                      speed = "1G"
                      for policer in policers:
                          if policer["policerName"] == vrf["speed"]:
                              rate = policer["rate"]
                              burst = policer["burstSize"]
                              speed = vrf["speed"]
                              break
                          else:
                              speed = "1G"
                      vpwspp[vrf["circuitId"]] = {
                          "customer_name": customer["customerName"],
                          "vrf": vrf["circuitId"],
                          "circuit_name": vrf["circuitName"],
                          "customer_id": customer["customerId"],
                          "speed": speed,
                          "rate": rate,
                          "burst": burst,
                          "service_type": vrf["serviceType"],
                          "interfaces": vrf["switches"].resolve()["switch"]["interfaces"],
                          "portChannel": vrf["switches"].resolve()["switch"]["portChannel"],
                          "member_switches": vrf["switches"]
                          }

          switch_vpwsvrfs = {}
          switch_vpwspp = {}
          for pp, pp_details in vpwspp.items():
              if pp_details["member_switches"].resolve(my_device_id)["switch"]["settings"]["circuit"] == "Enabled" or pp_details["member_switches"].resolve(my_device_id)["switch"]["settings"]["circuit"] == "Shutdown":
                  switch_vpwspp[pp] = pp_details
                  if pp_details.get("vrf") is not None and pp_details["vrf"].strip() not in ["", "None"]:
                      switch_vpwsvrfs[ pp_details["vrf"] ] = vpwsvrfs[ pp_details["vrf"] ]

          if len(switch_vpwspp) > 0:
              switch.set_config_params_via_tags()
              switch.configure_vpwsvrfs(switch_vpwsvrfs)
              switch.configure_vpwspp(switch_vpwspp)
              config = switch.config
          else:
              config = {}
          myintftypelist=[]
          #create interface tags
          for customer in customers:
              custID = customer['customerId']
              custName = customer['customerName']
              for vrf in customer["vpws"]:
                  if  vrf["switches"].resolve()["switch"]:
                      circId =vrf['circuitId']
                      circName =vrf['circuitName']
                  for circuits in config.get('patch_panels',[]):
                      if circuits == vrf['circuitId']:
                          myswitch=config['patch_panels'][circuits]["member_switches"].resolve(my_device_id)['switch']
                          set_Device_Cust_Name_tags(custName)
                          set_Device_Cust_ID_tags(custID)
                          set_Device_Circ_ID_tags(circId)
                          set_Device_Circ_Name_tags(circName)
                          intTagList = []
                          if vrf['serviceType'] == "Ethernet Port-Based" or vrf['serviceType'] == "Ethernet Vlan-Based":
                              for intf in my_device.getInterfaces():
                                  intfName = intf.name
                                  intfVal = myswitch["interfaces"].resolve(intfName, strict=True)
                                  if intfVal is not None:
                                      break
                              if vrf['serviceType'] == "Ethernet Port-Based":
                                  customerNameIntTag = (my_device_id, intfName, 'Customer_Name', custName, False )
                                  circIdIntTag = (my_device_id, intfName, 'Circuit_ID', circId, False )
                                  circNameIntTag = (my_device_id, intfName, 'Circuit_Name', circName, False )
                                  custIDIntTag = (my_device_id, intfName, 'Customer_ID', custID, False )
                                  linkTypeTag = (my_device_id, intfName, 'Link-Type', 'Customer', False )
                                  if vrf["speed"]:
                                      speedIntTag = (my_device_id, intfName, 'Speed', vrf["speed"], False )
                                  if vrf["serviceType"]:
                                      serviceTypeTag = (my_device_id, intfName, 'Service_Type', vrf["serviceType"], False )
                              elif vrf['serviceType'] == "Ethernet Vlan-Based":
                                  intfName = str(intfName)+'.'+str(intfVal['interfaceGroup']['subInterfaceNumber'])
                                  customerNameIntTag = (my_device_id, intfName, 'Customer_Name', custName, False )
                                  circIdIntTag = (my_device_id, intfName, 'Circuit_ID', circId, False )
                                  circNameIntTag = (my_device_id, intfName, 'Circuit_Name', circName, False )
                                  custIDIntTag = (my_device_id, intfName, 'Customer_ID', custID, False )
                                  linkTypeTag = (my_device_id, intfName, 'Link-Type', 'Customer', False )
                                  if vrf["speed"]:
                                      speedIntTag = (my_device_id, intfName, 'Speed', vrf["speed"], False )
                                  if vrf["serviceType"]:
                                      serviceTypeTag = (my_device_id, intfName, 'Service_Type', vrf["serviceType"], False )
                          elif vrf['serviceType'] == "Port Channel Port-Based" or vrf['serviceType'] == "Port Channel Vlan-Based":
                              if vrf['serviceType'] == "Port Channel Port-Based":
                                  intfVal = 'Port-Channel'+str(myswitch["portChannel"]["portChannelId"])
                                  customerNameIntTag = (my_device_id, intfVal, 'Customer_Name', custName, False )
                                  circIdIntTag = (my_device_id, intfVal, 'Circuit_ID', circId, False )
                                  circNameIntTag = (my_device_id, intfVal, 'Circuit_Name', circName, False )
                                  custIDIntTag = (my_device_id, intfVal, 'Customer_ID', custID, False )
                                  linkTypeTag = (my_device_id, intfVal, 'Link-Type', 'Customer', False )
                                  if vrf["speed"]:
                                      speedIntTag = (my_device_id, intfVal, 'Speed', vrf["speed"], False )
                                  if vrf["serviceType"]:
                                      serviceTypeTag = (my_device_id, intfVal, 'Service_Type', vrf["serviceType"], False )
                              elif vrf['serviceType'] == "Port Channel Vlan-Based":
                                  intfVal = 'Port-Channel'+str(myswitch["portChannel"]["portChannelId"])+'.'+str(myswitch["portChannel"]["subInterfaceNumber"])
                                  customerNameIntTag = (my_device_id, intfVal, 'Customer_Name', custName, False )
                                  circIdIntTag = (my_device_id, intfVal, 'Circuit_ID', circId, False )
                                  circNameIntTag = (my_device_id, intfVal, 'Circuit_Name', circName, False )
                                  custIDIntTag = (my_device_id, intfVal, 'Customer_ID', custID, False )
                                  linkTypeTag = (my_device_id, intfVal, 'Link-Type', 'Customer', False )
                                  if vrf["speed"]:
                                      speedIntTag = (my_device_id, intfVal, 'Speed', vrf["speed"], False )
                                  if vrf["serviceType"]:
                                      serviceTypeTag = (my_device_id, intfVal, 'Service_Type', vrf["serviceType"], False )
                              if myswitch['settings']['createPortChannel']:
                                  for intf in my_device.getInterfaces():
                                      intfName = intf.name
                                      intfVal = myswitch["interfaces"].resolve(intfName, strict=True)
                                      if intfVal is not None:
                                          break
                          intTagList.append(customerNameIntTag)
                          intTagList.append(circIdIntTag)
                          intTagList.append(circNameIntTag)
                          intTagList.append(custIDIntTag)
                          intTagList.append(linkTypeTag)
                          if vrf["speed"]:
                              intTagList.append(speedIntTag)
                          if vrf["serviceType"]:
                              intTagList.append(serviceTypeTag)
                          ctx.tags._assignInterfaceTags(intTagList)
          %>
          ## ---- GEN CONFIG -----##
          % if config:
          %   if config.get("patch_panels") is not None:
          %     for vrf in config.get("patch_panels"):
          <%thisSwitch = config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]
          isPortChannel = None
          if  config["patch_panels"][vrf]["service_type"] == "Port Channel Port-Based" or config["patch_panels"][vrf]["service_type"] == "Port Channel Vlan-Based":
              isPortChannel = portChannelDetails = thisSwitch["portChannel"]
          %>
          %       for intf in my_device.getInterfaces():
          <%
           intfName = intf.name
           intfVal = thisSwitch["interfaces"].resolve(intfName, strict=True)
           if not intfVal:
              continue
          ms = config["patch_panels"][vrf]["member_switches"]
          deviceIndex = resolveWithContext(ms, device=my_device_id)[1]
          %>
          %         if config["patch_panels"][vrf]["speed"] != "1G":
          policing
              profile ${config["patch_panels"][vrf]["speed"]} rate ${config["patch_panels"][vrf]["rate"]} mbps burst-size ${config["patch_panels"][vrf]["burst"]} kbytes
              exit
          !
          %         endif
          patch panel

          %         if globalSettings["remoteFailureErrdisable"] == "Enabled":
              connector interface patch bgp vpws remote-failure errdisable
          %         endif

          %         if thisSwitch["vlanTagSettings"]["vlanTagNormalization"] == "None":
              patch ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
          %           if thisSwitch["settings"]["circuit"] == "Shutdown":
                  shutdown
          %           endif
          ## Port Channel
          %           if config["patch_panels"][vrf]["service_type"] == "Port Channel Port-Based" or config["patch_panels"][vrf]["service_type"] == "Port Channel Vlan-Based":
          %             if config["patch_panels"][vrf]["service_type"] == "Port Channel Vlan-Based":
          %               if thisSwitch["settings"]["removeRemoteFailureDetection"]: ## not supported in vlan based service
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetection"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          %               endif
          %             else:
          %               if thisSwitch["settings"]["removeRemoteFailureDetection"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]} no-errdisable
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetection"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}
          %               endif
          %             endif
          %           else:
          ## Ethernet
          %             if config["patch_panels"][vrf]["service_type"] == "Ethernet Vlan-Based":
          %               if thisSwitch["settings"]["removeRemoteFailureDetection"]: ## not supported in vlan based service
                  connector 1 interface ${intfName}.${intfVal['interfaceGroup']['subInterfaceNumber']}
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetection"]:
                  connector 1 interface ${intfName}.${intfVal['interfaceGroup']['subInterfaceNumber']}
          %               endif
          %             else:
          %               if thisSwitch["settings"]["removeRemoteFailureDetection"]:
                  connector 1 interface ${intfName}  no-errdisable
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetection"]:
                  connector 1 interface ${intfName}
          %               endif
          %             endif
          %           endif
                  connector 2 pseudowire bgp vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                  exit
              exit
          !
          ## PATCH PANEL FLEX CROSS CONNECT
          %         else:
              flexible-cross-connect ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
          %           if thisSwitch["settings"]["circuit"] == "Shutdown":
                  shutdown
          %           endif
          %           if thisSwitch["vlanTagSettings"]["vlanTagNormalization"] == "Single-Tag-Normalization":
                  vlan tag normalization single
          %           elif thisSwitch["vlanTagSettings"]["vlanTagNormalization"] == "Double-Tag-Normalization":
                  vlan tag normalization double
          %           endif
          %           if vrf['serviceType'] == ("Port Channel Port-Based" or "Port Channel Vlan-Based"):
          %             if vrf['serviceType'] == "Port Channel Vlan-Based":
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          %             else:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}
          %             endif
          %           else:
          %             if config["patch_panels"][vrf]["service_type"] == "Ethernet Vlan-Based":
                  connector 1 interface ${intfName}.${intfVal['interfaceGroup']["subInterfaceNumber"]}
          %             else:
                  connector 1 interface ${intfName}
          %             endif
          %           endif
                  connector 2 pseudowire bgp vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                  exit
              exit
          !
          !
          %         endif
              ## CONFIG PORT CHANNEL
          %         if config["patch_panels"][vrf]["service_type"] == "Port Channel Port-Based" or config["patch_panels"][vrf]["service_type"] == "Port Channel Vlan-Based":
          ## IF PORT CHANNEL IS SUBINTERFACE
          %           if config["patch_panels"][vrf]["service_type"] == "Port Channel Vlan-Based":
          interface port-channel ${portChannelDetails["portChannelId"]}
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
              no switchport
          interface  port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
                  description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
          %             if config["patch_panels"][vrf]["speed"] != "1G":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
          %             endif
          ${flexible_encap(vrf)}
          ## IF PORT CHANNEL IS WHOLE PORT
          %           else:
          interface port-channel ${portChannelDetails["portChannelId"]}
              no switchport
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
          %             if config["patch_panels"][vrf]["speed"] != "1G":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
          %             endif
          %             if thisSwitch["settings"]['multiHoming']:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${thisSwitch["settings"]['esi']}
                  route-target import ${thisSwitch["settings"]['esiRt']}
                  exit
              lacp system-id ${thisSwitch["settings"]['lacpSysId']}
              exit
          !
          %             endif
          %           endif
          ## CREATE PORT CHANNEL
          %           if thisSwitch["settings"]["createPortChannel"] and config["patch_panels"][vrf]["service_type"] == "Port Channel Port-Based" or config["patch_panels"][vrf]["service_type"] == "Port Channel Vlan-Based":
          !
          interface ${intfName}
              no switchport
          %             if thisSwitch["settings"]["lldp"] == "Disabled":
              no lldp transmit
              no lldp receive
          %             endif
          %             if globalSettings["globalMtu"]:
              mtu ${globalSettings["globalMtu"]}
          %             endif
              channel-group ${portChannelDetails["portChannelId"]} mode active
          %           endif
          ## CONFIG ETHERNET PORT
          %         elif config["patch_panels"][vrf]["service_type"] == "Ethernet Port-Based" or config["patch_panels"][vrf]["service_type"] == "Ethernet Vlan-Based":
          ## ETHERNET SUBINTERFACE
          %           if config["patch_panels"][vrf]["service_type"] == "Ethernet Vlan-Based":
          %             if thisSwitch["settings"]['multiHoming']:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${thisSwitch["settings"]['esi']}
                  route-target import ${thisSwitch["settings"]['esiRt']}
                  exit
          !
          %             endif
          interface  ${intfName}
              no switchport
          %             if thisSwitch["settings"]["lldp"] == "Disabled":
              no lldp transmit
              no lldp receive
          %             endif
          %             if globalSettings["globalMtu"]:
              mtu ${globalSettings["globalMtu"]}
          %             endif
          interface  ${intfName}.${intfVal['interfaceGroup']['subInterfaceNumber']}
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
           %             if config["patch_panels"][vrf]["speed"]  != "1G":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
           %             endif
          ${flexible_encap(vrf)}
          %           else:
          ## ETHERNET WHOLE PORT
          interface ${intfName}
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
              no switchport
          %             if thisSwitch["settings"]["lldp"] == "Disabled":
              no lldp transmit
              no lldp receive
          %             endif
          %             if globalSettings["globalMtu"]:
              mtu ${globalSettings["globalMtu"]}
          %             endif
          %             if config["patch_panels"][vrf]["speed"] != "1G":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
          %             endif
          %             if thisSwitch["settings"]['multiHoming']:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${thisSwitch["settings"]['esi']}
                  route-target import ${thisSwitch["settings"]['esiRt']}
                  exit
          %             endif
              exit
          %           endif
          %         endif
          !
          ## ---- ROUTER BGP --------##
          %         if config["router_bgp"].get("as") is not None:
          router bgp ${ config["router_bgp"]["as"] }

          %           if config["router_bgp"].get("router_id") is not None:
          %           endif
          %           if config["router_bgp"].get("bgp_defaults") is not None:
          %             for bgp_default in config["router_bgp"]["bgp_defaults"]:
          ${ bgp_default }
          %             endfor
          %           endif

          ## ----- VPWS ------##
          %              if config["router_bgp"].get("vrfs") is not None:

              vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf }
          %               if config["router_bgp"]["vrfs"][vrf].get("rd") is not None:
                  rd ${config["router_bgp"]["vrfs"][vrf].get("rd")}
          %               endif
          %               if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("import") is not None:
          %                 for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          %                   for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"][address_family]:
                  route-target import ${ address_family } ${ route_target }
          %                   endfor
          %                 endfor
          %               endif
          %               if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("export") is not None:
          %                 for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"].keys():
          %                   for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
                  route-target export ${ address_family } ${ route_target }
          %                   endfor
          %                 endfor
          %               endif
                  mpls control-word
                  !
          %               if config.get("patch_panels") is not None:
          %                     if deviceIndex == 0:
          <%index =  0 %>
                  pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                      evpn vpws id local ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")} remote ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")}
                      exit
          <%index = index + 1 %>
          %                     elif deviceIndex == 1:
          <%index =  0 %>
                  pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                      evpn vpws id local ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")} remote ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")}
                      exit
          <%index = index + 1 %>
          %                     endif
                  exit
              exit
          !
          %             endif
          %           endif
          %         endif
          <%       if isPortChannel:
                      break
          %>
          %       endfor
          %     endfor
          %   endif
          % endif
          ## FLEXIBLE ENCAP
          <%def name="flexible_encap(vrf)">
          %               if thisSwitch["vlanTagSettings"]["encap"] == "match-1-and-pop":
              encapsulation vlan
                  client dot1q ${thisSwitch["vlanTagSettings"]["vlanTag"]}
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-1-and-preserve":
              encapsulation vlan
                  client dot1q ${thisSwitch["vlanTagSettings"]["vlanTag"]} network client
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "unmatched":
              encapsulation vlan
                  client unmatched
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-2-and-preserve":
              encapsulation vlan
                  client dot1q outer ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]} network client
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-2-and-pop-both":
              encapsulation vlan
                  client dot1q outer ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]}
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "untagged-subinterface":
              encapsulation vlan
                  client untagged network untagged
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "untagged-and-push":
              vlan id ${thisSwitch["vlanTagSettings"]["vlanTag"]}
              encapsulation vlan
                  client untagged
                  exit
          %               else:
          %                 if thisSwitch["vlanTagSettings"]["innerVlanTag"]:
              encapsulation dot1q vlan ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]}
          %                 else:
              encapsulation dot1q vlan ${thisSwitch["vlanTagSettings"]["vlanTag"]}
          %                 endif
          %               endif
              exit
          </%def>
          ## TE POLICY
          <%def name="tepolicy(vrf, lsp, endpoint)">
          router traffic-engineering
          <% color = ""%>
          <%path = thisSwitch["settings"]["pathselected"]%>
          %if thisSwitch["settings"]["autoPath"]:
              <%color = re.sub('\D', '', vrf)%>
          %else:
          %    for item in lsp:
          %        if item["lspName"] == thisSwitch["settings"]["pathselected"]:
          <%    color = item['color']%>
          %        endif
          %    endfor
          %endif
              segment-routing
                  policy endpoint ${endpoint} color ${color}
                      binding-sid 10${color}
                      name ${thisSwitch["settings"]["pathselected"]}
                      description TE-${color}
                      sbfd remote-discriminator ${endpoint}
                      !
                      path-group preference 1
          %for item in lsp:
          %  if item["lspName"] == thisSwitch["settings"]["pathselected"]:
          <% lspn = item["lspName"]%>
          <% devices = item["devices"].resolveAllWithContext(strict=True)%>
          <%segment_list = []%>
          %    for end_points_dev, end_points_detail, end_points_context in devices:
          %        if not get_node_segment_index(end_points_dev):
                      <%raise Exception("Device [%s] does not have a Node Segment Index tag" %end_points_dev)%>
          %        endif
          <%node_segment_index = int(get_node_segment_index(end_points_dev))%>
          <%node_segment_index = node_segment_index  + 900000%>
          <%segment_list.append(str(node_segment_index))%>
          %    endfor
          <%joined_segment_list = " ".join(segment_list)%>
                          segment-list label-stack ${joined_segment_list}
          %  endif
          %endfor
          !
          </%def>
      input_schema:
        fields:
          values:
            customerName:
              id: customerName
              name: customerName
              label: Customer Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsName:
              id: vpwsName
              name: circuitId
              label: Circuit ID
              description: Integer - max value 65535.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            endPointsInterfaceSubInterfaceNumber:
              id: endPointsInterfaceSubInterfaceNumber
              name: subInterfaceNumber
              label: Sub Interface Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            endPointsInterfacesDescription:
              id: endPointsInterfacesDescription
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            endPointsInterfacesGroup:
              id: endPointsInterfacesGroup
              name: interfaceGroup
              label: Interface Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - endPointsInterfaceSubInterfaceNumber
                    - endPointsInterfacesDescription
            endPointsInterfaces:
              id: endPointsInterfaces
              name: interfaces
              label: Ethernet
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: endPointsInterfacesGroup
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG
                input_tag_label: null
                tag_filter_query: NOT Link-Type:*
            endPointsPCportChannelId:
              id: endPointsPCportChannelId
              name: portChannelId
              label: EndPoint Port Channel Id
              description: Required for Port Channel
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            endPointsPCSubInterfaceNumber:
              id: endPointsPCSubInterfaceNumber
              name: subInterfaceNumber
              label: EndPoint Sub Interface Number
              description: 1-999
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            endPointsPCDescription:
              id: endPointsPCDescription
              name: descripion
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            endPointsPortChannelGroup:
              id: endPointsPortChannelGroup
              name: portChannel
              label: Port Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - endPointsPCportChannelId
                    - endPointsPCSubInterfaceNumber
                    - endPointsPCDescription
            vlanInnerVlanTag:
              id: vlanInnerVlanTag
              name: innerVlanTag
              label: Inner VLAN Tag
              description: Optionally enter inner vlan tag
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            vlanVlanTagHanding:
              id: vlanVlanTagHanding
              name: encap
              label: VLAN Tag Handling
              description: Applies to sub-interface configurations only
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options:
                  values:
                    - match-1-and-pop
                    - match-1-and-preserve
                    - unmatched
                    - match-2-and-pop-both
                    - match-2-and-preserve
                    - untagged-subinterface
                    - untagged-and-push
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vlanVlanTagNormalization:
              id: vlanVlanTagNormalization
              name: vlanTagNormalization
              label: Flexible Cross Connect Service
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: None
                is_secret: false
                static_options:
                  values:
                    - Double-Tag-Normalization
                    - Single-Tag-Normalization
                    - None
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vlanVlanTag:
              id: vlanVlanTag
              name: vlanTag
              label: VLAN Tag
              description: Required if using Vlan based service
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            settingsVlanTagSettingsGroup:
              id: settingsVlanTagSettingsGroup
              name: vlanTagSettings
              label: VLAN Tag Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vlanInnerVlanTag
                    - vlanVlanTagHanding
                    - vlanVlanTagNormalization
                    - vlanVlanTag
            settingsCircuitState:
              id: settingsCircuitState
              name: circuit
              label: Circuit State
              description: Enabled = Circuit is provisioned and active, Shutdown = Circuit is provision and Admin down, Unprovisioned = Circuit is not configured
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Enabled
                is_secret: false
                static_options:
                  values:
                    - Enabled
                    - Shutdown
                    - Unprovisioned
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            settingsCircuitName:
              id: settingsCircuitName
              name: description
              label: Circuit Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"vpwsCircuitName"}'
                extra_values_allowed: false
            vpwsmultihominglacpSysId:
              id: vpwsmultihominglacpSysId
              name: lacpSysId
              label: LACP Sys ID
              description: Format 1234.5678.0123
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: 1234.5678.0123
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            settingsPathselected:
              id: settingsPathselected
              name: pathselected
              label: Path Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: BEST-EFFORT
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            settingsAutoPath:
              id: settingsAutoPath
              name: autoPath
              label: Auto Color
              description: Numeric value in Circuit ID must match an LSP color.
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            settingsTrafficEngineering:
              id: settingsTrafficEngineering
              name: trafficEngineering
              label: Traffic Engineering
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            settingsCreatePortChannel:
              id: settingsCreatePortChannel
              name: createPortChannel
              label: Create Port Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            settingsRemoveRemoteFailureDetection:
              id: settingsRemoveRemoteFailureDetection
              name: removeRemoteFailureDetection
              label: Disable Remote Failure Detection
              description: Selectively Remove Remote Failure Detection
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            settingsMultiHoming:
              id: settingsMultiHoming
              name: multiHoming
              label: Multi Homing
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            mhEsi:
              id: mhEsi
              name: esi
              label: Ethernet Segment ID
              description: format 0033:3333:3333:3333:3333 or short form 0102:0000:0028
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            mhEsiRt7:
              id: mhEsiRt7
              name: esiRt
              label: ESI RT
              description: format 00:03:00:03:00:03
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            settingsLldp:
              id: settingsLldp
              name: lldp
              label: LLDP
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Disabled
                is_secret: false
                static_options:
                  values:
                    - Disabled
                    - Enabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            settingsGroup:
              id: settingsGroup
              name: settings
              label: Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - settingsCircuitState
                    - settingsCircuitName
                    - vpwsmultihominglacpSysId
                    - settingsPathselected
                    - settingsAutoPath
                    - settingsTrafficEngineering
                    - settingsCreatePortChannel
                    - settingsRemoveRemoteFailureDetection
                    - settingsMultiHoming
                    - mhEsi
                    - mhEsiRt7
                    - settingsLldp
            endPointsComments:
              id: endPointsComments
              name: comments
              label: Comments
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsdeviceGroup:
              id: vpwsdeviceGroup
              name: switch
              label: Device Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - endPointsInterfaces
                    - endPointsPortChannelGroup
                    - settingsVlanTagSettingsGroup
                    - settingsGroup
                    - endPointsComments
            vpwsswitches:
              id: vpwsswitches
              name: switches
              label: Endpoints
              description: Enter 1 Device per row. Device A on row 1 and Device Z on row 2.
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: vpwsdeviceGroup
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG
                input_tag_label: device
                tag_filter_query: Role:Edge-Router
            vpwsServiceType:
              id: vpwsServiceType
              name: serviceType
              label: Service Type
              description: Ethernet Port Based (default), Port Channel, and Vlan Tagging Options.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Ethernet Port-Based
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"serviceTypeName"}'
                extra_values_allowed: false
            vpwdEnni:
              id: vpwdEnni
              name: enni
              label: ENNI
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: 'No'
                is_secret: false
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsCircuitName:
              id: vpwsCircuitName
              name: circuitName
              label: Circuit Name
              description: Alpha Numeric descriptive name.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsSpeed:
              id: vpwsSpeed
              name: speed
              label: Speed
              description: Sets the Ingress Policing Rate. Leave blank no policing.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Port Speed
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"policerName"}'
                extra_values_allowed: false
            vpwsCircuitInfo:
              id: vpwsCircuitInfo
              name: circuitInfo
              label: Circuit Info
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsNotesGroup:
              id: vpwsNotesGroup
              name: notesGroup
              label: Circuit Notes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsCircuitInfo
            vpwsDefinition:
              id: vpwsDefinition
              name: vpwsDefinition
              label: VPWS Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsName
                    - vpwsswitches
                    - vpwsServiceType
                    - vpwdEnni
                    - vpwsCircuitName
                    - vpwsSpeed
                    - vpwsNotesGroup
            vpws:
              id: vpws
              name: vpws
              label: Circuits
              description: Enter a Circuit ID and Circuit Name. Click View Endpoints to configure Devices.
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vpwsDefinition
                key: vpwsName
            customerId:
              id: customerId
              name: customerId
              label: Customer ID
              description: Integer - max value 65535.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            tenantDefinition:
              id: tenantDefinition
              name: tenantDefinition
              label: Customer Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customerName
                    - vpws
                    - customerId
            customers:
              id: customers
              name: customers
              label: Customers
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: tenantDefinition
                key: customerName
            vpwsvrfRouteTargetFormat:
              id: vpwsvrfRouteTargetFormat
              name: vrfRouteTargetFormat
              label: VRF Route Target Format
              description: 'Auto-format RT values.  Max value 65535 : 65535'
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Cust-ID:Circ-ID
                is_secret: false
                static_options:
                  values:
                    - ASN:Circ-ID
                    - Left-Side-4Byte-ASN:Circ-ID
                    - Right-Side-4Byte-ASN:Circ-ID
                    - Cust-ID:Circ-ID
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsvrfRouteDistinguisherFormat:
              id: vpwsvrfRouteDistinguisherFormat
              name: vrfRouteDistinguisherFormat
              label: VRF Route Distinguisher Format
              description: 'Auto-format RD values. Router ID local loopback 0 address : Local-Port-Num = local port + subinterface. Max value 65535'
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:Circ-ID
                is_secret: false
                static_options:
                  values:
                    - Router-ID:Circ-ID
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            globalRemoteFailureErrdisable:
              id: globalRemoteFailureErrdisable
              name: remoteFailureErrdisable
              label: Remote Failure Detection
              description: 'This is a Global setting and can be selectively disabled per circuit per End Point. This feature will disable the local interface when the remote interface is down. '
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Enabled
                is_secret: false
                static_options:
                  values:
                    - Enabled
                    - Disabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            globalMtu:
              id: globalMtu
              name: globalMtu
              label: MTU
              description: Circuit Interface MTU
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: '1500'
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsVrfAttributeFormats:
              id: vpwsVrfAttributeFormats
              name: globalSettings
              label: Global Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsvrfRouteTargetFormat
                    - vpwsvrfRouteDistinguisherFormat
                    - globalRemoteFailureErrdisable
                    - globalMtu
            serviceTypeName:
              id: serviceTypeName
              name: serviceTypeName
              label: Service Type Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            serviceTypeGroup:
              id: serviceTypeGroup
              name: serviceTypeGroup
              label: Service Type Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - serviceTypeName
            serviceTypeServiceType:
              id: serviceTypeServiceType
              name: serviceType
              label: Service Type
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: serviceTypeGroup
                key: ''
            rate:
              id: rate
              name: rate
              label: Speed
              description: mbps
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            speedBurstSize:
              id: speedBurstSize
              name: burstSize
              label: Burst-Size
              description: kbps
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            policerName:
              id: policerName
              name: policerName
              label: Policer Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            speedGroup:
              id: speedGroup
              name: speedGroup
              label: Speed Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - rate
                    - speedBurstSize
                    - policerName
            speedPolicers:
              id: speedPolicers
              name: policers
              label: Speed
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: speedGroup
                key: policerName
            hideShowSpeed:
              id: hideShowSpeed
              name: speed
              label: '-Speed'
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Hide
                is_secret: false
                static_options:
                  values:
                    - Hide
                    - Show
                    - Hide Input Panel Only
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            hideShowServiceType:
              id: hideShowServiceType
              name: serviceType
              label: '-Service Type'
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Hide
                is_secret: false
                static_options:
                  values:
                    - Hide
                    - Show
                    - Hide Input Panel Only
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            hideShowGlobalSettings:
              id: hideShowGlobalSettings
              name: globalSettings
              label: '- Global Settings'
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Hide
                is_secret: false
                static_options:
                  values:
                    - Hide
                    - Show
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            hideShowOptionsGroupGroup:
              id: hideShowOptionsGroupGroup
              name: hideShowOptionsGroup
              label: Show Advanced Options
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - hideShowSpeed
                    - hideShowServiceType
                    - hideShowGlobalSettings
            hideAndShowOptionsGroup:
              id: hideAndShowOptionsGroup
              name: hideAndShowOptions
              label: Show Advanced Options
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - hideShowOptionsGroupGroup
            root:
              id: root
              name: ''
              label: ''
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customers
                    - vpwsVrfAttributeFormats
                    - serviceTypeServiceType
                    - speedPolicers
                    - hideAndShowOptionsGroup
        layout:
          value: '{"vpwdEnni":{"key":"vpwdEnni","type":"INPUT","dependency":{"vpwsvrfRouteDistinguisherFormat":{"value":["__ANY__"],"mode":"HIDE"}}},"vpwsServiceType":{"key":"vpwsServiceType","dependency":{"hideShowServiceType":{"value":["Show","Hide Input Panel Only"],"mode":"SHOW"}},"type":"INPUT"},"vpwsdeviceGroup":{"key":"vpwsdeviceGroup","type":"INPUT","order":["settingsGroup","endPointsPortChannelGroup","endPointsInterfaces","settingsVlanTagSettingsGroup","endPointsComments"]},"vlanInnerVlanTag":{"key":"vlanInnerVlanTag","dependency":{},"type":"INPUT"},"vlanVlanTag":{"key":"vlanVlanTag","dependency":{},"type":"INPUT"},"vlanVlanTagHanding":{"key":"vlanVlanTagHanding","dependency":{},"type":"INPUT"},"vlanVlanTagNormalization":{"key":"vlanVlanTagNormalization","dependency":{},"type":"INPUT"},"425fa256-92e0-4484-afb7-a601ea270aff":{"key":"425fa256-92e0-4484-afb7-a601ea270aff","valueToLabelMap":{"True":"Port","False":"VLAN"},"dependency":{"425fa256-92e0-4484-afb7-a601ea270aff":{"value":["__ANY__"],"mode":"HIDE"}},"type":"INPUT"},"settingsAutoPath":{"key":"settingsAutoPath","dependency":{"settingsTrafficEngineering":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"settingsPathselected":{"key":"settingsPathselected","type":"INPUT","dependency":{"settingsTrafficEngineering":{"value":[true],"mode":"SHOW"}}},"vpwsmultihominglacpSysId":{"key":"vpwsmultihominglacpSysId","dependency":{"settingsMultiHoming":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"endPointsPCportChannelId":{"key":"endPointsPCportChannelId","dependency":{"vpwsServiceType":{"value":["Port Channel Port-Based","Port Channel Vlan-Based"],"mode":"SHOW"}},"dependencyType":"AND","type":"INPUT"},"endPointsPCSubInterfaceNumber":{"key":"endPointsPCSubInterfaceNumber","dependency":{"vpwsServiceType":{"value":["Port Channel Vlan-Based"],"mode":"SHOW"}},"dependencyType":"AND","type":"INPUT"},"b93b51e2-b6d4-4394-b2d4-db89b28a0763":{"key":"b93b51e2-b6d4-4394-b2d4-db89b28a0763","type":"INPUT","dependency":{"customerName":{"value":["__ANY__"],"mode":"HIDE"}}},"117d0fde-a9ab-4551-8980-1abd041c3e8b":{"key":"117d0fde-a9ab-4551-8980-1abd041c3e8b","type":"INPUT","dependency":{"customerName":{"value":["__ANY__"],"mode":"HIDE"}}},"a6f637d7-09b3-4498-8207-169a167e4c87":{"key":"a6f637d7-09b3-4498-8207-169a167e4c87","type":"INPUT","dependency":{"customerName":{"value":["__ANY__"],"mode":"HIDE"}}},"serviceTypeName":{"key":"serviceTypeName","dependency":{"hideShowServiceType":{"value":["Hide"],"mode":"HIDE"}},"type":"INPUT"},"endPointsInterfaceSubInterfaceNumber":{"key":"endPointsInterfaceSubInterfaceNumber","dependency":{"vpwsServiceType":{"value":["Ethernet Vlan-Based"],"mode":"SHOW"}},"dependencyType":"AND","type":"INPUT"},"settingsCircuitName":{"key":"settingsCircuitName","isMultiLine":false,"type":"INPUT"},"endPointsComments":{"key":"endPointsComments","isMultiLine":true,"type":"INPUT","syntax":"text","dependency":{"endPointsComments":{"value":["__ANY__"],"mode":"HIDE"}}},"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"key":"425fe1ab-e65c-43c4-8c12-7a698503a5b8","valueToLabelMap":{"True":"Ethernet","False":"Port Channel"},"dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":["__ANY__"],"mode":"HIDE"}},"type":"INPUT"},"endPointsPCDescription":{"key":"endPointsPCDescription","dependency":{"vpwsServiceType":{"value":["Port Channel Port-Based","Port Channel Vlan-Based"],"mode":"SHOW"}},"type":"INPUT"},"endPointsInterfacesDescription":{"key":"endPointsInterfacesDescription","dependency":{"vpwsServiceType":{"value":["Ethernet Port-Based","Ethernet Vlan-Based"],"mode":"SHOW"},"settingsCreatePortChannel":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"settingsTrafficEngineering":{"key":"settingsTrafficEngineering","dependency":{"settingsTrafficEngineering":{"value":["__ANY__"],"mode":"HIDE"}},"type":"INPUT"},"settingsCreatePortChannel":{"key":"settingsCreatePortChannel","dependency":{"vpwsServiceType":{"value":["Port Channel Port-Based","Port Channel Vlan-Based"],"mode":"SHOW"}},"type":"INPUT"},"endPointsInterfaces":{"key":"endPointsInterfaces","type":"INPUT","showDefaultRow":false},"vpwsswitches":{"key":"vpwsswitches","type":"INPUT","showDefaultRow":false},"vpwsDefinition":{"key":"vpwsDefinition","type":"INPUT","order":["vpwsCircuitName","vpwsName","vpwsswitches","vpwsServiceType","vpwdEnni","vpwsSpeed","vpwsNotesGroup"]},"settingsRemoveRemoteFailureDetection":{"key":"settingsRemoveRemoteFailureDetection","dependency":{"globalRemoteFailureErrdisable":{"value":["Enabled"],"mode":"SHOW"},"vpwsServiceType":{"value":["Ethernet Vlan-Based","Port Channel Vlan-Based"],"mode":"HIDE"}},"dependencyType":"AND","type":"INPUT"},"settingsVlanTagSettingsGroup":{"key":"settingsVlanTagSettingsGroup","order":["vlanVlanTag","vlanInnerVlanTag","vlanVlanTagHanding","vlanVlanTagNormalization"],"dependency":{"vpwsServiceType":{"value":["Ethernet Vlan-Based","Port Channel Vlan-Based"],"mode":"SHOW"}},"type":"INPUT"},"settingsGroup":{"key":"settingsGroup","type":"INPUT","order":["settingsCircuitState","settingsCircuitName","settingsPathselected","settingsAutoPath","settingsTrafficEngineering","settingsCreatePortChannel","settingsRemoveRemoteFailureDetection","settingsMultiHoming","vpwsmultihominglacpSysId","mhEsi","mhEsiRt7","settingsLldp"]},"mhEsi":{"key":"mhEsi","type":"INPUT","dependency":{"settingsMultiHoming":{"value":[true],"mode":"SHOW"}}},"mhEsiRt7":{"key":"mhEsiRt7","type":"INPUT","dependency":{"settingsMultiHoming":{"value":[true],"mode":"SHOW"}}},"settingsMultiHoming":{"key":"settingsMultiHoming","dependency":{"vpwsServiceType":{"value":["Port Channel Port-Based","Port Channel Vlan-Based"],"mode":"SHOW"}},"type":"INPUT"},"serviceTypeServiceType":{"key":"serviceTypeServiceType","isPageLayout":false,"dependency":{},"type":"INPUT"},"speedPolicers":{"key":"speedPolicers","isPageLayout":false,"type":"INPUT"},"speedGroup":{"key":"speedGroup","order":["policerName","rate","speedBurstSize"],"dependency":{"hideShowSpeed":{"value":["Hide","Hide Input Panel Only"],"mode":"HIDE"}},"type":"INPUT"},"serviceTypeGroup":{"key":"serviceTypeGroup","dependency":{"hideShowServiceType":{"value":["Hide","Hide Input Panel Only"],"mode":"HIDE"}},"type":"INPUT"},"vpwsSpeed":{"key":"vpwsSpeed","dependency":{"hideShowSpeed":{"value":["Show","Hide Input Panel Only"],"mode":"SHOW"}},"type":"INPUT"},"tenantDefinition":{"key":"tenantDefinition","type":"INPUT","order":["customerName","customerId","vpws"]},"vpwsvrfRouteTargetFormat":{"key":"vpwsvrfRouteTargetFormat","type":"INPUT","dependency":{"hideShowGlobalSettings":{"value":["Hide"],"mode":"HIDE"}}},"vpwsvrfRouteDistinguisherFormat":{"key":"vpwsvrfRouteDistinguisherFormat","type":"INPUT","dependency":{"hideShowGlobalSettings":{"value":["Hide"],"mode":"HIDE"}}},"globalRemoteFailureErrdisable":{"key":"globalRemoteFailureErrdisable","dependency":{"hideShowGlobalSettings":{"value":["Hide"],"mode":"HIDE"}},"type":"INPUT"},"vpwsCircuitInfo":{"key":"vpwsCircuitInfo","type":"INPUT","isMultiLine":true,"syntax":"text"},"vpwsVrfAttributeFormats":{"key":"vpwsVrfAttributeFormats","type":"INPUT","dependency":{}},"globalMtu":{"key":"globalMtu","type":"INPUT","dependency":{"hideShowGlobalSettings":{"value":["Hide"],"mode":"HIDE"}}}}'
