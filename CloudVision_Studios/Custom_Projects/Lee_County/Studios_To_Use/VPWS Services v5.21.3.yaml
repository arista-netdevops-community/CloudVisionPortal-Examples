- service: arista.studio.v1.StudioConfigService
  method: Set
  body:
    value:
      key:
        studio_id: d0b61ef6-1568-45cb-b1e2-4307c25562a5
        workspace_id: ''
      display_name: VPWS Services v5.21.3
      description: Define and configure EVPN VPWS network services.
      template:
        type: TEMPLATE_TYPE_MAKO
        body: |+
          <%
          import sys, os, json, ipaddress, re
          from collections import OrderedDict
          import re
          from arista.tag.v2.tag_pb2 import TagKey, TagAssignmentKey
          from arista.tag.v2.services import TagConfigServiceStub, TagAssignmentConfigServiceStub
          from arista.tag.v2.services import TagConfigSetRequest, TagAssignmentConfigSetRequest
          import tagsearch_python.tagsearch_pb2_grpc as tsgr
          import tagsearch_python.tagsearch_pb2 as tspb
          from arista.tag.v2.tag_pb2 import Tag, TagKey, TagAssignment, TagAssignmentKey, TagAssignmentConfig
          from cloudvision.cvlib.tags import Tag

          workspace_id = ctx.studio.workspaceId
          my_device = ctx.getDevice()
          my_device_id = my_device.id
          ##tsclient = ctx.getApiClient(tsgr.TagSearchStub)

          serviceIDs = {}


          @ctx.benchmark
          def set_Device_Cust_Name_tags(CustName):
            my_device._assignTag(ctx, Tag('pe_customer_name',CustName), replaceValue=False)

          @ctx.benchmark
          def set_Device_Cust_ID_tags(CustID):
            my_device._assignTag(ctx, Tag('pe_customer_id',CustID), replaceValue=False)

          @ctx.benchmark
          def set_Device_Circ_ID_tags(CircID):
            my_device._assignTag(ctx, Tag('pe_circuit_id', CircID), replaceValue=False)

          @ctx.benchmark
          def set_Device_Circ_Name_tags(CircName):
            my_device._assignTag(ctx, Tag('pe_circuit_name', CircName), replaceValue=False)

          @ctx.benchmark
          def unset_Device_Cust_Name_tags():
            my_device._unassignTag(ctx, Tag('pe_customer_name', None))

          @ctx.benchmark
          def unset_Device_Cust_ID_tags():
            my_device._unassignTag(ctx, Tag('pe_customer_id', None))

          @ctx.benchmark
          def unset_Device_Circ_ID_tags():
            my_device._unassignTag(ctx, Tag('pe_circuit_id', None))

          @ctx.benchmark
          def unset_Device_Circ_Name_tags():
            my_device._unassignTag(ctx, Tag('pe_circuit_name', None))

          def get_tag_values_applied_to_device(tag_assignment_key):
            label = tag_assignment_key.label.value
            device_id = tag_assignment_key.device_id.value
            workspace_id = tag_assignment_key.workspace_id.value
            # Create tagstub
            tsclient = ctx.getApiClient(tsgr.TagSearchStub)
            matching_tags = []
            # Create TagValueSearchRequest
            tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
            for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
              query = '{}:\"{}\" AND device:{}'.format(tag.label, tag.value, device_id)
              tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
              tagmresp =  tsclient.GetTagMatchesV2(tagmr)
              for match in tagmresp.matches:
                if match.device.device_id == device_id:
                  matching_tags.append(tag)
            return matching_tags

          def resolveWithContext(self, device=None):
              '''This function is same as resolve(), but in addition, returns a context object as the
                  second return value, from which additional information can be obtained.
              '''
              if device is None:
                  device = self.device
              for i, inp in enumerate(self.inputs):
                  devs = inp.get("devices")
                  query_str = inp.get("tags", {"query": ""}).get("query", "")
                  if devs is None:
                      continue
                  if device in devs:
                      return inp.get("inputs"), i
              return None, None

          def convert(text):
              return int(text) if text.isdigit() else text.lower()

          def alphanum_key(key):
              return [convert(c) for c in re.split('([0-9]+)', str(key))]

          def natural_sort(iterable):
              if iterable is None:
                  return list()
              return sorted(iterable, key=alphanum_key)

          def string_to_list(string_to_convert):
              numbers = []
              segments = [ segment.strip() for segment in string_to_convert.split(",") ]
              for segment in segments:
                  if "-" in segment:
                      for i in range(int(segment.split("-")[0]), int(segment.split("-")[1]) + 1):
                          numbers.append(i)
                  else:
                      numbers.append(int(segment))
              return numbers

          from itertools import count, groupby
          def list_compress(list_to_compress):
              if not isinstance(list_to_compress, list):
                  raise TypeError('value must be of type list, got %s' % type(list_to_compress))
              G = (list(x) for y, x in groupby(sorted(list_to_compress), lambda x, c=count(): next(c) - x))
              return (",".join("-".join(map(str, (g[0], g[-1])[:len(g)])) for g in G))

          def get_tag_values_applied_to_device(tag_assignment_key):
              label = tag_assignment_key.label.value
              value = tag_assignment_key.value.value
              device_id = tag_assignment_key.device_id.value
              workspace_id = tag_assignment_key.workspace_id.value
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)

              matching_tags = []

              tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
              for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                  if not tag.value:
                      continue
                  query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                  tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                  tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                  for match in tagmresp.matches:
                      if match.device.device_id == device_id:
                          matching_tags.append(tag)

              return matching_tags

          def get_node_segment_index(device):
              tag_assignment_key = TagAssignmentKey()
              tag_assignment_key.workspace_id.value = workspace_id
              tag_assignment_key.element_type = 1
              tag_assignment_key.label.value = "Node-Segment-Index"
              tag_assignment_key.device_id.value = device
              tags = get_tag_values_applied_to_device(tag_assignment_key)
              for tag in tags:
                  return tag.value
           #   assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
           #       "Node Segment Index Tag", tag_assignment_key.label.value
           #   )

          class SwitchDetails:
              def __init__(self):
                  self.id = None
                  self.model = None #Model tag
                  self.eos_version = None #Eos version tag
                  self.hostname = None #hostname tag
                  self.config = {
                      "vlans": {},
                      "vrfs": {},
                      "patch_panels": {},
                      "vlan_interfaces": {},
                      "router_bgp":{
                          "as": None,
                          "router_id": None,
                          "vrfs": {},
                          "vlans": {}
                      },
                  }

              def set_config_params_via_tags(self):
                  self.config["router_bgp"]["as"] = self.get_bgp_asn()
                  self.config["router_bgp"]["router_id"] = self.get_bgp_router_id()


              def check_config_parameters(self):
                  assert self.config["router_bgp"]["as"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP ASN", "router_bgp.as", self.hostname
                      )
                  assert self.config["router_bgp"]["router_id"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP Router ID", "router_bgp.router_id", self.hostname
                      )

              def get_bgp_asn(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.as"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP ASN Tag", tag_assignment_key.label.value, self.hostname
                  )

              def get_bgp_router_id(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.router_id"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP Router ID Tag", tag_assignment_key.label.value, self.hostname
                  )



              def configure_vpwsvrfs(self, vrfs):
                  vpws_admin_field_key_words = {
                      "Right-Side-4Byte-ASN": "self.config['router_bgp']['as'].split('.',1)[1]",
                      "Left-Side-4Byte-ASN": "self.config['router_bgp']['as'].split('.',1)[0]",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']",
                      "Local-Port-Num": "vrf_details['local_port_number']",
                      "Lo0-IPs": "vrf_details['lo0_ips']",
                      "Cust-ID": "vrf_details['customer_id']",
                      "Circ-ID": "vrf",
                  }
                  for vrf, vrf_details in vrfs.items():
                      self.config["vrfs"][vrf] = {
                          "description": None,
                          "ip_routing": False
                      }
                      switch_rd = []
                      for rd_segment in vrf_details["route_distinguisher"].split(":"):
                          if vpws_admin_field_key_words.get(rd_segment):
                              if rd_segment == "Circ-ID":
                                  rd_segment = str(eval(vpws_admin_field_key_words[rd_segment]))
                                  switch_rd.append(rd_segment)
                              else:
                                  rd_segment = str(eval(vpws_admin_field_key_words[rd_segment]))
                                  switch_rd.append(rd_segment)
                          else:
                              switch_rd.append(rd_segment)
                      switch_rd = ":".join(switch_rd)
                      both_port_nums = vrf_details["both_port_numbers"]
           #           endpoint = vrf_details["end_point"]
                      switch_rt = []
                      for rt_segment in vrf_details["route_target"].split(":"):
                          if vpws_admin_field_key_words.get(rt_segment):
                              if rt_segment == "Circ-ID":
                                  rt_segment = str(eval(vpws_admin_field_key_words[rt_segment]))
                                  switch_rt.append(re.sub('\D', '', rt_segment) )
                              else:
                                  rt_segment = str(eval(vpws_admin_field_key_words[rt_segment]))
                                  switch_rt.append(rt_segment)
                          else:
                              switch_rt.append(rt_segment)
                      right_side_of_rt = switch_rt[1]
                      switch_rt = ":".join(switch_rt)
                      self.config["router_bgp"]["vrfs"][vrf] = {
                          "rd": switch_rd,
                          "vpws_id": right_side_of_rt,
          #               "endpoint": endpoint,
                          "route_targets": {
                              "import": {
                                  "evpn": [switch_rt]
                              },
                              "export": {
                                  "evpn": [switch_rt]
                              }
                          },
                          "router_id": self.config["router_bgp"]["router_id"]
                      }

              def configure_vpwspp(self, pps):
                  for pp, pp_details in pps.items():
                      self.config["patch_panels"][pp] = {}
                      self.config["patch_panels"][pp] = pp_details

          class LeafDetails(SwitchDetails):
              def __init__(self):
                  super().__init__()
                  self.leaf_number = None
                  self.leaf_domain = None


          def get_switch_details(device_id):
              labels_to_fields = {
                  "hostname": "hostname",
                  "model": "model",
                  "DC": "dc",
                  "Network": "dc_pod",
                  "PE-Number": "leaf_number",
                  "PE-Domain": "leaf_domain",
              }
              switch = None
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              found_switch = False

              query= "{}:\"{}\" AND device:{}".format("Role", "Leaf", device_id)
              tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
              tagmresp =  tsclient.GetTagMatchesV2(tagmr)
              for match in tagmresp.matches:
                  if match.device.device_id == device_id:
                      switch = LeafDetails()
                      found_switch = True
                      break

              if found_switch == False:
                  switch = SwitchDetails()

              for label in labels_to_fields.keys():
                  if label == "hostname":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.hostName:
                              setattr(switch, labels_to_fields[ label ], dev.hostName)
                      continue
                  if label == "model":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.modelName:
                              setattr(switch, labels_to_fields[ label ], dev.modelName)
                      continue
                  tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
                  for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                      try:
                          query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                          tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                          tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                      except:
                          continue
                      else:
                          for match in tagmresp.matches:
                              if match.device.device_id == device_id:
                                  setattr(switch, labels_to_fields[ tag.label ], tag.value)
                                  break

              switch.id = device_id
              return switch

          def getEndpoints(endpointResolver):
              end_points_details = endpointResolver.resolveAllWithContext(strict=True)
              first_device_id = None
              second_device_id = None
              both_lo0_addresses = []
              for end_points_dev, end_points_detail, end_points_context in end_points_details:
                  if first_device_id == None:
                      first_device_id = end_points_dev
                      ldev = ctx.topology.getDevices(deviceIds=[first_device_id])[0]
                      if llo0_tag := ldev.getSingleTag(ctx, 'router_bgp.router_id', required=False):
                          both_lo0_addresses.append(llo0_tag.value)
                  else:
                      second_device_id = end_points_dev
                      rdev = ctx.topology.getDevices(deviceIds=[second_device_id])[0]
                      if rlo0_tag := rdev.getSingleTag(ctx, 'router_bgp.router_id', required=False):
                          both_lo0_addresses.append(rlo0_tag.value)
              return both_lo0_addresses

          def getPorts(endpointResolver):
              end_points_details = endpointResolver.resolveAllWithContext(strict=True)
              first_device_id = None
              second_device_id = None
              both_ports = []
              for end_points_dev, end_points_detail, end_points_context in end_points_details:
                  if first_device_id == None:
                      first_device_id = 1
                      if end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          interfaces = end_points_detail["switch"]["interfaces"].resolveAllWithContext(strict=True)
                          for interfaces_dev, interfaces_detail, interfaces_context in interfaces:
                              port = interfaces_dev.strip("Ethernet")
                              both_ports.append(port)
                      if not end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          port_channel = str(end_points_detail["switch"]["portChannel"]["portChannelId"])
                          if end_points_detail["switch"]["portChannel"]["subInterfaceNumber"]:
                              port_channel = port_channel + str(end_points_detail["switch"]["portChannel"]["subInterfaceNumber"])
                          both_ports.append(port_channel)
                  else:
                      second_device_id = end_points_dev
                      if end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          interfaces = end_points_detail["switch"]["interfaces"].resolveAllWithContext(strict=True)
                          for interfaces_dev, interfaces_detail, interfaces_context in interfaces:
                              port = interfaces_dev.strip("Ethernet")
                              both_ports.append(port)
                      if not end_points_detail["switch"]["settings"]["ethernetOrPortChannel"]:
                          port_channel = str(end_points_detail["switch"]["portChannel"]["portChannelId"])
                          if end_points_detail["switch"]["portChannel"]["subInterfaceNumber"]:
                              port_channel = port_channel + str(end_points_detail["switch"]["portChannel"]["subInterfaceNumber"])
                          both_ports.append(port_channel)
              return both_ports

          switch = get_switch_details(my_device_id)
          vpws_attribute_formats = vpwsVrfAttributeFormats
          vrfs = {}
          vlans = {}
          vpwsvrfs = {}
          vpwspp = {}
          # clean up device tags
          unset_Device_Cust_Name_tags()
          unset_Device_Cust_ID_tags()
          unset_Device_Circ_ID_tags()
          unset_Device_Circ_Name_tags()

          unintTagList = []
          # clean up interface tags
          for intf in my_device.getInterfaces():
              intfName = intf.name
              uncustomerNameIntTag = (my_device_id, intfName, 'int_customer_name', None)
              uncustomerIdIntTag = (my_device_id, intfName, 'int_customer_id', None)
              uncircNameIntTag = (my_device_id, intfName, 'int_circuit_name', None)
              uncircIDIntTag = (my_device_id, intfName, 'int_circuit_id', None)
              unlinkTypeTag = (my_device_id, intfName, 'Link-Type', 'Customer')
              unserviceTypeTag = (my_device_id, intfName, 'int_service_type', None)
              unspeedIntTag = (my_device_id, intfName, 'int_speed', None)
              unintTagList.append(uncustomerNameIntTag)
              unintTagList.append(uncustomerIdIntTag)
              unintTagList.append(uncircNameIntTag)
              unintTagList.append(uncircIDIntTag)
              unintTagList.append(unlinkTypeTag)
              unintTagList.append(unserviceTypeTag )
              unintTagList.append(unspeedIntTag)
          ctx.tags._unassignInterfaceTags(unintTagList)
          if not customers:
              return
          for customer in customers:
              for vpws in customer["vpws"]:
                  svc_id = vpws["vpwsName"]
                  if svc_id in serviceIDs.keys():
                      assert False, f"Duplicate Circuit ID detected. Customer {customer['name']} ({vpws['vpwsName']}) overlaps with {serviceIDs[svc_id]}."
                  serviceIDs[svc_id] = f"{customer['name']}, ({vpws['vpwsName']})"
          # read in inputs
          for customer in customers:
              for vrf in customer["vpws"]:
                  custID = customer["customerId"]
                  if  vrf["switches"].resolve()["switch"]:
                      serviceType = vrf["serviceType"]
                      both_lo0_addresses = getEndpoints(vrf["switches"])
                      bpn = getPorts(vrf["switches"])
                      if bpn:
                          local_port_number = bpn[0]
                      both_port_numbers = "".join(bpn)

                      split_rt = vpws_attribute_formats["vrfRouteTargetFormat"].split(':')
                      vpwsvrfs[vrf["vpwsName"]] = {
                          "route_distinguisher": vpws_attribute_formats["vrfRouteDistinguisherFormat"],
                          "route_target": vpws_attribute_formats["vrfRouteTargetFormat"],
                          "customer_id": customer["customerId"],
          #                "end_point": both_lo0_addresses[1],
                          "local_port_number": local_port_number,
                          "both_port_numbers": both_port_numbers,
                          "color": color
                      }
           #           if vrf["overrideVariables"]["routeDistinguisher"] is not None and vrf["overrideVariables"]["routeDistinguisher"].strip() != "":
           #               vpwsvrfs[vrf["vpwsName"]]["route_distinguisher"] = vrf["overrideVariables"]["routeDistinguisher"]
           #           if vrf["overrideVariables"]["routeTarget"] is not None and vrf["overrideVariables"]["routeTarget"].strip() != "":
           #               vpwsvrfs[vrf["vpwsName"]]["route_target"] = vrf["overrideVariables"]["routeTarget"]
                      rate = ""
                      burst = ""
                      speed = "1G"
                      for policer in policers:
                          if policer["policerName"] == vrf["speed"]:
                              rate = policer["rate"]
                              burst = policer["burstSize"]
                              speed = vrf["speed"]
                              break
                          else:
                              speed = "1G"
                      vpwspp[vrf["vpwsName"]] = {
                          "customer_name": customer["name"],
                          "vrf": vrf["vpwsName"],
                          "circuit_name": vrf["description"],
                          "customer_id": customer["customerId"],
                          "speed": speed,
                          "rate": rate,
                          "burst": burst,
                          "service_type": vrf["serviceType"],
                          "interfaces": vrf["switches"].resolve()["switch"]["interfaces"],
                          "portChannel": vrf["switches"].resolve()["switch"]["portChannel"],
                          "member_switches": vrf["switches"]
                          }

          switch_vpwsvrfs = {}
          switch_vpwspp = {}
          for pp, pp_details in vpwspp.items():
              if pp_details["member_switches"].resolve(my_device_id)["switch"]["settings"]["circuit"] == "Enabled" or pp_details["member_switches"].resolve(my_device_id)["switch"]["settings"]["circuit"] == "Shutdown":
                  switch_vpwspp[pp] = pp_details
                  if pp_details.get("vrf") is not None and pp_details["vrf"].strip() not in ["", "None"]:
                      switch_vpwsvrfs[ pp_details["vrf"] ] = vpwsvrfs[ pp_details["vrf"] ]

          if len(switch_vpwspp) > 0:
              switch.set_config_params_via_tags()
              switch.configure_vpwsvrfs(switch_vpwsvrfs)
              switch.configure_vpwspp(switch_vpwspp)
              config = switch.config
          else:
              config = {}
          myintftypelist=[]
          #create interface tags
          for customer in customers:
              custID = customer['customerId']
              custName = customer['name']
              for vrf in customer["vpws"]:
                  if  vrf["switches"].resolve()["switch"]:
                      circId =vrf['vpwsName']
                      circName =vrf['description']
                  for circuits in config.get('patch_panels',[]):
                      if circuits == vrf['vpwsName']:
                          myswitch=config['patch_panels'][circuits]["member_switches"].resolve(my_device_id)['switch']
                          set_Device_Cust_Name_tags(custName)
                          set_Device_Cust_ID_tags(custID)
                          set_Device_Circ_ID_tags(circId)
                          set_Device_Circ_Name_tags(circName)
                          intTagList = []
                          if myswitch['settings']['ethernetOrPortChannel']:
                              for intf in my_device.getInterfaces():
                                  intfName = intf.name
                                  intfVal = myswitch["interfaces"].resolve(intfName, strict=True)
                                  if intfVal is not None:
                                      break
                              if myswitch['settings']['portBasedOrVlanBased']:
                                  customerNameIntTag = (my_device_id, intfName, 'int_customer_name', custName, False )
                                  circIdIntTag = (my_device_id, intfName, 'int_circuit_id', circId, False )
                                  circNameIntTag = (my_device_id, intfName, 'int_circuit_name', circName, False )
                                  custIDIntTag = (my_device_id, intfName, 'int_customer_id', custID, False )
                                  linkTypeTag = (my_device_id, intfName, 'Link-Type', 'Customer', False )
                                  if vrf["speed"]:
                                      speedIntTag = (my_device_id, intfName, 'int_speed', vrf["speed"], False )
                                  if vrf["serviceType"]:
                                      serviceTypeTag = (my_device_id, intfName, 'int_service_type', vrf["serviceType"], False )
                              elif not myswitch['settings']['portBasedOrVlanBased']:
                                  dummy=str(intfName)+'.'+str(intfVal['interfaceGroup']['subInterfaceNumber'])
                          elif not myswitch['settings']['ethernetOrPortChannel']:
                              if myswitch['settings']['portBasedOrVlanBased']:
                                  intfVal = 'Port-Channel'+str(myswitch["portChannel"]["portChannelId"])
                                  customerNameIntTag = (my_device_id, intfVal, 'int_customer_name', custName, False )
                                  circIdIntTag = (my_device_id, intfVal, 'int_circuit_id', circId, False )
                                  circNameIntTag = (my_device_id, intfVal, 'int_circuit_name', circName, False )
                                  custIDIntTag = (my_device_id, intfVal, 'int_customer_id', custID, False )
                                  linkTypeTag = (my_device_id, intfVal, 'Link-Type', 'Customer', False )                      
                              elif not myswitch['settings']['portBasedOrVlanBased']:
                                   intfVal = 'Port-Channel'+str(myswitch["portChannel"]["portChannelId"])+'.'+str(myswitch["portChannel"]["subInterfaceNumber"])
                              if myswitch['settings']['createPortChannel']:
                                  for intf in my_device.getInterfaces():
                                      intfName = intf.name
                                      intfVal = myswitch["interfaces"].resolve(intfName, strict=True)
                                      if intfVal is not None:
                                          break
                          intTagList.append(customerNameIntTag)
                          intTagList.append(circIdIntTag)
                          intTagList.append(circNameIntTag)
                          intTagList.append(custIDIntTag)
                          intTagList.append(linkTypeTag)
                          if vrf["speed"]:
                              intTagList.append(speedIntTag)
                          if vrf["serviceType"]:
                              intTagList.append(serviceTypeTag)
                          ctx.info(f"List: {intTagList}")
                          ctx.tags._assignInterfaceTags(intTagList)


          %>

          ## ---- GEN CONFIG -----##
          % if config:
          %   if config.get("patch_panels") is not None:
          <%    sequenceNum = 10 %>
          %     for vrf in config.get("patch_panels"):
          <%thisSwitch = config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]%>

          %       for intf in my_device.getInterfaces():
          <%
                      isPortChannel = None
                      if  not thisSwitch["settings"]["ethernetOrPortChannel"]:
                          isPortChannel = portChannelDetails = thisSwitch["portChannel"]
                      else:
                          intfName = intf.name
                          intfVal = thisSwitch["interfaces"].resolve(intfName, strict=True)
                          if not intfVal:
                              continue
                      ms = config["patch_panels"][vrf]["member_switches"]
                      deviceIndex = resolveWithContext(ms, device=my_device_id)[1]
          %>

          ## ROUTE MAP
          ##%for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          ##%    for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
          ##ip extcommunity-list ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } permit rt ${ route_target }
          ##%   endfor
          ##%endfor
          %if thisSwitch["settings"]["autoPath"]:
          %  for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          %    for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
          ip extcommunity-list ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } permit rt ${ route_target }
          %    endfor
          !
          %  endfor
          route-map set-vpws-color permit ${sequenceNum}
              match extcommunity ${config["patch_panels"][vrf]["customer_name"]}-${ vrf }
              % for items in lsp:
                  % if items["lspName"] == thisSwitch["settings"]["pathselected"]:
                      match extcommunity ${config["patch_panels"][vrf]["customer_name"]}-${ vrf }
                      set extcommunity color ${items['color']} additive
              %     endif
              % endfor
              exit
          !
          route-map set-vpws-color permit 16000000
          !
          ${tepolicy(vrf,lsp, config["router_bgp"]["vrfs"][vrf]["endpoint"])}
          %elif thisSwitch["settings"]["pathselected"] != "BEST-EFFORT":
          %  for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          %    for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
          ip extcommunity-list ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } permit rt ${ route_target }
          %    endfor
          !
          %endfor
          route-map set-vpws-color permit ${sequenceNum}
              match extcommunity ${config["patch_panels"][vrf]["customer_name"]}-${ vrf }
              % for items in lsp:
                  % if items["lspName"] == thisSwitch["settings"]["pathselected"]:
                      match extcommunity ${config["patch_panels"][vrf]["customer_name"]}-${ vrf }
                      set extcommunity color ${items['color']} additive
              %     endif
              % endfor
              exit
          !
          route-map set-vpws-color permit 16000000
          !
          ${tepolicy(vrf,lsp, config["router_bgp"]["vrfs"][vrf]["endpoint"])}
          %endif
          <% sequenceNum = sequenceNum + 10 %>

          %if config["patch_panels"][vrf]["speed"] != "1G":
          policing
              profile ${config["patch_panels"][vrf]["speed"]} rate ${config["patch_panels"][vrf]["rate"]} mbps burst-size ${config["patch_panels"][vrf]["burst"]} kbytes
              exit
          !
          %endif
          patch panel

          %         if vpwsVrfAttributeFormats["remoteFailureErrdisable"] == "Enabled":
              connector interface patch bgp vpws remote-failure errdisable
          %         endif

          %         if thisSwitch["vlanTagSettings"]["vlanTagNormalization"] == "None":
              patch ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
          %           if thisSwitch["settings"]["circuit"] == "Shutdown":
                  shutdown
          %           endif
          ## Port Channel
          %           if not thisSwitch["settings"]["ethernetOrPortChannel"]:
          %             if not thisSwitch["settings"]["portBasedOrVlanBased"]:
          %               if thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]} no-errdisable
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          %               endif
          %             else:
          %               if thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]} no-errdisable
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}
          %               endif
          %             endif
          %           else:
          ## Ethernet
          %             if not thisSwitch["settings"]['portBasedOrVlanBased']:
          %               if thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface ${intfName}.${intfVal['interfaceGroup']['subInterfaceNumber']}  no-errdisable
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface ${intfName}.${intfVal['interfaceGroup']['subInterfaceNumber']}
          %               endif
          %             else:
          %               if thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface ${intfName}  no-errdisable
          %               elif not thisSwitch["settings"]["removeRemoteFailureDetectionForThisEndPoint"]:
                  connector 1 interface ${intfName}
          %               endif
          %             endif
          %           endif
                  connector 2 pseudowire bgp vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                  exit
              exit
          !
          ## PATCH PANEL FLEX CROSS CONNECT
          %         else:
              flexible-cross-connect ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
          %           if thisSwitch["settings"]["circuit"] == "Shutdown":
                  shutdown
          %           endif
          %           if thisSwitch["vlanTagSettings"]["vlanTagNormalization"] == "Single-Tag-Normalization":
                  vlan tag normalization single
          %           elif thisSwitch["vlanTagSettings"]["vlanTagNormalization"] == "Double-Tag-Normalization":
                  vlan tag normalization double
          %           endif
          %           if not thisSwitch["settings"]["ethernetOrPortChannel"]:
          %             if not thisSwitch["settings"]['portBasedOrVlanBased']:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          %             else:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}
          %             endif
          %           else:
          %             if not thisSwitch["settings"]['portBasedOrVlanBased']:
                  connector 1 interface ${intfName}.${intfVal['interfaceGroup']["subInterfaceNumber"]}
          %             else:
                  connector 1 interface ${intfName}
          %             endif
          %           endif
                  connector 2 pseudowire bgp vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                  exit
              exit
          !
          !
          %         endif

              ## CONFIG PORT CHANNEL
          %         if not thisSwitch["settings"]["ethernetOrPortChannel"]:
          ## IF PORT CHANNEL IS SUBINTERFACE
          %           if not thisSwitch["settings"]['portBasedOrVlanBased']:
          interface port-channel ${portChannelDetails["portChannelId"]}
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
              no switchport
          interface  port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
                  description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
          %             if config["patch_panels"][vrf]["speed"] != "1G":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
          %             endif
          ${flexible_encap(vrf)}
          ## IF PORT CHANNEL IS WHOLE PORT
          %           else:
          interface port-channel ${portChannelDetails["portChannelId"]}
              no switchport
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
          %             if config["patch_panels"][vrf]["speed"] != "1G":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
          %             endif
          %             if thisSwitch["settings"]['multiHoming']:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${thisSwitch["settings"]['esi']}
                  route-target import ${thisSwitch["settings"]['esiRt']}
                  exit
              lacp system-id ${thisSwitch["settings"]['lacpSysId']}
              exit
          !
          %             endif
          %           endif
          ## CREATE PORT CHANNEL
          %           if thisSwitch["settings"]["createPortChannel"] and not thisSwitch["settings"]["ethernetOrPortChannel"]:
          !
          interface ${intfName}
              no switchport
              channel-group ${portChannelDetails["portChannelId"]} mode active
          %           endif
          ## ETHERNET PORT
          %         elif thisSwitch["settings"]["ethernetOrPortChannel"]:
          ## ETHERNET SUBINTERFACE
          %           if not thisSwitch["settings"]['portBasedOrVlanBased']:
          %             if thisSwitch["settings"]['multiHoming']:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${thisSwitch["settings"]['esi']}
                  route-target import ${thisSwitch["settings"]['esiRt']}
                  exit
          !
          %             endif
          interface  ${intfName}
              no switchport
          interface  ${intfName}.${intfVal['interfaceGroup']['subInterfaceNumber']}
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
          %             if config["patch_panels"][vrf]["speed"] != "Port Speed":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
          %             endif
          ${flexible_encap(vrf)}
          %           else:
          ## ETHERNET WHOLE PORT
          interface ${intfName}
              description ${config["patch_panels"][vrf]["customer_name"]} circuit-id ${vrf} ${config["patch_panels"][vrf]["circuit_name"]} ${config["patch_panels"][vrf]["speed"]}
              no switchport
              no lldp transmit
              no lldp receive
          %             if config["patch_panels"][vrf]["speed"] != "1G":
              policer profile ${config["patch_panels"][vrf]["speed"]} input
          %             endif
          %             if thisSwitch["settings"]['multiHoming']:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${thisSwitch["settings"]['esi']}
                  route-target import ${thisSwitch["settings"]['esiRt']}
                  exit
          %             endif
              exit
          %           endif
          %         endif
          !


          ## ---- ROUTER BGP --------##
          %         if config["router_bgp"].get("as") is not None:
          router bgp ${ config["router_bgp"]["as"] }

          %           if config["router_bgp"].get("router_id") is not None:
          %           endif
          %           if config["router_bgp"].get("bgp_defaults") is not None:
          %             for bgp_default in config["router_bgp"]["bgp_defaults"]:
          ${ bgp_default }
          %             endfor
          %           endif

          ## ----- VPWS ------##
          %              if config["router_bgp"].get("vrfs") is not None:

              vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf }
          %               if config["router_bgp"]["vrfs"][vrf].get("rd") is not None:
                  rd ${config["router_bgp"]["vrfs"][vrf].get("rd")}
          %               endif
          %               if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("import") is not None:
          %                 for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          %                   for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"][address_family]:
                  route-target import ${ address_family } ${ route_target }
          %                   endfor
          %                 endfor
          %               endif
          %               if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("export") is not None:
          %                 for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"].keys():
          %                   for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
                  route-target export ${ address_family } ${ route_target }
          %                   endfor
          %                 endfor
          %               endif
                  mpls control-word
                  !
          %               if config.get("patch_panels") is not None:
          %                     if deviceIndex == 0:
          <%index =  0 %>
                  pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                      evpn vpws id local ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")} remote ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")}
                      exit
          <%index = index + 1 %>
          %                     elif deviceIndex == 1:
          <%index =  0 %>
                  pseudowire ${config["patch_panels"][vrf]["customer_name"]}-${vrf}
                      evpn vpws id local ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")} remote ${config["router_bgp"]["vrfs"][vrf].get("vpws_id")}
                      exit
          <%index = index + 1 %>
          %                     endif
                  exit
              exit
          !
          %             endif
          %           endif
          %         endif
          <%       if isPortChannel:
                      break
          %>
          %       endfor
          %     endfor
          %   endif
          % endif
          ## FLEXIBLE ENCAP
          <%def name="flexible_encap(vrf)">
          %               if thisSwitch["vlanTagSettings"]["encap"] == "match-1-and-pop":
              encapsulation vlan
                  client dot1q ${thisSwitch["vlanTagSettings"]["vlanTag"]}
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-1-and-preserve":
              encapsulation vlan
                  client dot1q ${thisSwitch["vlanTagSettings"]["vlanTag"]} network client
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "unmatched":
              encapsulation vlan
                  client unmatched
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-2-and-preserve":
              encapsulation vlan
                  client dot1q outer ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]} network client
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-2-and-pop-both":
              encapsulation vlan
                  client dot1q outer ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]}
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "untagged-subinterface":
              encapsulation vlan
                  client untagged network untagged
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "untagged-and-push":
              vlan id ${thisSwitch["vlanTagSettings"]["vlanTag"]}
              encapsulation vlan
                  client untagged
                  exit
          %               else:
          %                 if thisSwitch["vlanTagSettings"]["innerVlanTag"]:
              encapsulation dot1q vlan ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]}
          %                 else:
              encapsulation dot1q vlan ${thisSwitch["vlanTagSettings"]["vlanTag"]}
          %                 endif
          %               endif
              exit
          </%def>
          ## TE POLICY
          <%def name="tepolicy(vrf, lsp, endpoint)">
          router traffic-engineering
          <% color = ""%>
          <%path = thisSwitch["settings"]["pathselected"]%>
          %if thisSwitch["settings"]["autoPath"]:
              <%color = re.sub('\D', '', vrf)%>
          %else:
          %    for item in lsp:
          %        if item["lspName"] == thisSwitch["settings"]["pathselected"]:
          <%    color = item['color']%>
          %        endif
          %    endfor
          %endif
              segment-routing
                  policy endpoint ${endpoint} color ${color}
                      binding-sid 10${color}
                      name ${thisSwitch["settings"]["pathselected"]}
                      description TE-${color}
                      sbfd remote-discriminator ${endpoint}
                      !
                      path-group preference 1
          %for item in lsp:
          %  if item["lspName"] == thisSwitch["settings"]["pathselected"]:
          <% lspn = item["lspName"]%>
          <% devices = item["devices"].resolveAllWithContext(strict=True)%>
          <%segment_list = []%>
          %    for end_points_dev, end_points_detail, end_points_context in devices:
          %        if not get_node_segment_index(end_points_dev):
                      <%raise Exception("Device [%s] does not have a Node Segment Index tag" %end_points_dev)%>
          %        endif
          <%node_segment_index = int(get_node_segment_index(end_points_dev))%>
          <%node_segment_index = node_segment_index  + 900000%>
          <%segment_list.append(str(node_segment_index))%>
          %    endfor
          <%joined_segment_list = " ".join(segment_list)%>
                          segment-list label-stack ${joined_segment_list}
          %  endif
          %endfor
          !
          </%def>

      input_schema:
        fields:
          values:
            customerName:
              id: customerName
              name: name
              label: Customer Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsName:
              id: vpwsName
              name: vpwsName
              label: Circuit ID
              description: Integer - max value 65535.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            0ea4823b-e1e8-41c7-86e3-abbe06d1342a:
              id: 0ea4823b-e1e8-41c7-86e3-abbe06d1342a
              name: subInterfaceNumber
              label: Sub Interface Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            18c302b6-4102-4db7-a30e-a96acd24d5c2:
              id: 18c302b6-4102-4db7-a30e-a96acd24d5c2
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            a580c976-a603-40c6-923c-5f808f072c29:
              id: a580c976-a603-40c6-923c-5f808f072c29
              name: interfaceGroup
              label: Interface Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 0ea4823b-e1e8-41c7-86e3-abbe06d1342a
                    - 18c302b6-4102-4db7-a30e-a96acd24d5c2
            7a761d92-101e-4dab-af6b-e92b1bf3c888:
              id: 7a761d92-101e-4dab-af6b-e92b1bf3c888
              name: interfaces
              label: Ethernet
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: a580c976-a603-40c6-923c-5f808f072c29
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG
                input_tag_label: null
                tag_filter_query: NOT Link-Type:*
            1cd4e6ed-848a-42c7-bdf5-f029fe98198e:
              id: 1cd4e6ed-848a-42c7-bdf5-f029fe98198e
              name: portChannelId
              label: EndPoint Port Channel Id
              description: Required for Port Channel
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            d8cdb6b6-384e-4b46-b6cf-610998758af9:
              id: d8cdb6b6-384e-4b46-b6cf-610998758af9
              name: subInterfaceNumber
              label: EndPoint Sub Interface Number
              description: 1-999
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            db9f7b10-0542-40d8-b1ef-53aa75ad65db:
              id: db9f7b10-0542-40d8-b1ef-53aa75ad65db
              name: descripion
              label: Descripion
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            fdc85f87-22ea-43d2-8805-0a553a4343cb:
              id: fdc85f87-22ea-43d2-8805-0a553a4343cb
              name: portChannel
              label: Port Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 1cd4e6ed-848a-42c7-bdf5-f029fe98198e
                    - d8cdb6b6-384e-4b46-b6cf-610998758af9
                    - db9f7b10-0542-40d8-b1ef-53aa75ad65db
            3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e:
              id: 3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e
              name: innerVlanTag
              label: Inner VLAN Tag
              description: Optionally enter inner vlan tag
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            196bf4e8-c63b-4b13-ba8a-83a2d193cfe4:
              id: 196bf4e8-c63b-4b13-ba8a-83a2d193cfe4
              name: encap
              label: VLAN Tag Handling
              description: Applies to sub-interface configurations only
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options:
                  values:
                    - match-1-and-pop
                    - match-1-and-preserve
                    - unmatched
                    - match-2-and-pop-both
                    - match-2-and-preserve
                    - untagged-subinterface
                    - untagged-and-push
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            91926f52-04a2-4303-b9e2-c4117a90a5b9:
              id: 91926f52-04a2-4303-b9e2-c4117a90a5b9
              name: vlanTagNormalization
              label: Flexible Cross Connect Service
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: None
                is_secret: false
                static_options:
                  values:
                    - Double-Tag-Normalization
                    - Single-Tag-Normalization
                    - None
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            78265b9d-8284-4632-bac3-8af5853ee1c1:
              id: 78265b9d-8284-4632-bac3-8af5853ee1c1
              name: vlanTag
              label: VLAN Tag
              description: Required if using Vlan based service
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
                extra_values_allowed: false
            fa87dfe6-e5b2-4460-b453-4402b3bb1567:
              id: fa87dfe6-e5b2-4460-b453-4402b3bb1567
              name: vlanTagSettings
              label: VLAN Tag Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e
                    - 196bf4e8-c63b-4b13-ba8a-83a2d193cfe4
                    - 91926f52-04a2-4303-b9e2-c4117a90a5b9
                    - 78265b9d-8284-4632-bac3-8af5853ee1c1
            e51e8763-2858-4637-8bc2-e4f70043a542:
              id: e51e8763-2858-4637-8bc2-e4f70043a542
              name: circuit
              label: Circuit State
              description: Enabled = Circuit is provisioned and active, Shutdown = Circuit is provision and Admin down, Unprovisioned = Circuit is not configured
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Enabled
                is_secret: false
                static_options:
                  values:
                    - Enabled
                    - Shutdown
                    - Unprovisioned
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            afe44799-f630-4ad3-9b40-f3934b8771d5:
              id: afe44799-f630-4ad3-9b40-f3934b8771d5
              name: description
              label: Circuit Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"fb4a222e-6761-4090-a77f-ecaff03ca935"}'
                extra_values_allowed: false
            vpwsmultihominglacpSysId:
              id: vpwsmultihominglacpSysId
              name: lacpSysId
              label: LACP Sys ID
              description: Format 1234.5678.0123
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: 1234.5678.0123
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            73f11d0d-8d33-460e-a2e8-16a00e5c9d90:
              id: 73f11d0d-8d33-460e-a2e8-16a00e5c9d90
              name: pathselected
              label: Path Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: BEST-EFFORT
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            9e0c95e9-76f8-4e81-a84b-0d2d440e910e:
              id: 9e0c95e9-76f8-4e81-a84b-0d2d440e910e
              name: autoPath
              label: Auto Color
              description: Numeric value in Circuit ID must match an LSP color.
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            425fa256-92e0-4484-afb7-a601ea270aff:
              id: 425fa256-92e0-4484-afb7-a601ea270aff
              name: portBasedOrVlanBased
              label: Port Based or Vlan Based
              description: In Vlan based service the Vlan tag and the sub-interface must be specified.
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: true
            91337ced-8dd4-46dc-808b-3f847f7a215f:
              id: 91337ced-8dd4-46dc-808b-3f847f7a215f
              name: trafficEngineering
              label: Traffic Engineering
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            425fe1ab-e65c-43c4-8c12-7a698503a5b8:
              id: 425fe1ab-e65c-43c4-8c12-7a698503a5b8
              name: ethernetOrPortChannel
              label: Ethernet or Port Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: true
            637d78ba-4fd6-408f-b86e-3dba07b4de94:
              id: 637d78ba-4fd6-408f-b86e-3dba07b4de94
              name: createPortChannel
              label: Create Port Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            3fffa5fe-6ec1-4320-b394-58ef84e82b19:
              id: 3fffa5fe-6ec1-4320-b394-58ef84e82b19
              name: removeRemoteFailureDetectionForThisEndPoint
              label: Disable Remote Failure Detection
              description: Selectively Remove Remote Failure Detection
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a:
              id: a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a
              name: multiHoming
              label: Multi Homing
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            18a54f2e-e830-4824-8c21-bec91c3a4ca5:
              id: 18a54f2e-e830-4824-8c21-bec91c3a4ca5
              name: esi
              label: Ethernet Segment ID
              description: format 0033:3333:3333:3333:3333 or short form 0102:0000:0028
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            8f7fdc4b-0da7-4670-aa9c-58802d384bd7:
              id: 8f7fdc4b-0da7-4670-aa9c-58802d384bd7
              name: esiRt
              label: ESI RT
              description: format 00:03:00:03:00:03
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            0d2b3ba3-ba40-414c-9928-744a4ead851e:
              id: 0d2b3ba3-ba40-414c-9928-744a4ead851e
              name: settings
              label: Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - e51e8763-2858-4637-8bc2-e4f70043a542
                    - afe44799-f630-4ad3-9b40-f3934b8771d5
                    - vpwsmultihominglacpSysId
                    - 73f11d0d-8d33-460e-a2e8-16a00e5c9d90
                    - 9e0c95e9-76f8-4e81-a84b-0d2d440e910e
                    - 425fa256-92e0-4484-afb7-a601ea270aff
                    - 91337ced-8dd4-46dc-808b-3f847f7a215f
                    - 425fe1ab-e65c-43c4-8c12-7a698503a5b8
                    - 637d78ba-4fd6-408f-b86e-3dba07b4de94
                    - 3fffa5fe-6ec1-4320-b394-58ef84e82b19
                    - a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a
                    - 18a54f2e-e830-4824-8c21-bec91c3a4ca5
                    - 8f7fdc4b-0da7-4670-aa9c-58802d384bd7
            4b7bd4fc-4acb-4e07-a44f-a388896f083e:
              id: 4b7bd4fc-4acb-4e07-a44f-a388896f083e
              name: comments
              label: Comments
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsdeviceGroup:
              id: vpwsdeviceGroup
              name: switch
              label: Device Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 7a761d92-101e-4dab-af6b-e92b1bf3c888
                    - fdc85f87-22ea-43d2-8805-0a553a4343cb
                    - fa87dfe6-e5b2-4460-b453-4402b3bb1567
                    - 0d2b3ba3-ba40-414c-9928-744a4ead851e
                    - 4b7bd4fc-4acb-4e07-a44f-a388896f083e
            vpwsswitches:
              id: vpwsswitches
              name: switches
              label: Endpoints
              description: Enter 1 Device per row. Device A on row 1 and Device Z on row 2.
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: vpwsdeviceGroup
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG
                input_tag_label: device
                tag_filter_query: Role:Edge-Router
            f3ad3aea-a327-4348-a6f7-f2339259ac3e:
              id: f3ad3aea-a327-4348-a6f7-f2339259ac3e
              name: serviceType
              label: Service Type
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Ethernet Port-Based
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"63175643-43d4-4422-8996-026201a6262c"}'
                extra_values_allowed: false
            7ca49e27-c3ef-44ac-8261-92e55cb8a0a6:
              id: 7ca49e27-c3ef-44ac-8261-92e55cb8a0a6
              name: enni
              label: ENNI
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: 'No'
                is_secret: false
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            fb4a222e-6761-4090-a77f-ecaff03ca935:
              id: fb4a222e-6761-4090-a77f-ecaff03ca935
              name: description
              label: Circuit Name
              description: Alpha Numeric descriptive name.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            44bc6793-871e-46f8-961d-861ee498df48:
              id: 44bc6793-871e-46f8-961d-861ee498df48
              name: speed
              label: Speed
              description: Sets the Ingress Policing Rate. Leave blank no policing.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Port Speed
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"f35052b3-c65c-4eb5-9171-4ecdbc7de99c"}'
                extra_values_allowed: false
            vpwsDefinition:
              id: vpwsDefinition
              name: vpwsDefinition
              label: VPWS Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsName
                    - vpwsswitches
                    - f3ad3aea-a327-4348-a6f7-f2339259ac3e
                    - 7ca49e27-c3ef-44ac-8261-92e55cb8a0a6
                    - fb4a222e-6761-4090-a77f-ecaff03ca935
                    - 44bc6793-871e-46f8-961d-861ee498df48
            vpws:
              id: vpws
              name: vpws
              label: Circuits
              description: Enter a Circuit ID and Circuit Name. Click Endpoints to configure Devices.
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vpwsDefinition
                key: vpwsName
            3299f2a4-db1e-4d1d-8ea6-1f08c7b15446:
              id: 3299f2a4-db1e-4d1d-8ea6-1f08c7b15446
              name: customerId
              label: Customer ID
              description: Integer - max value 65535.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            tenantDefinition:
              id: tenantDefinition
              name: tenantDefinition
              label: Customer Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customerName
                    - vpws
                    - 3299f2a4-db1e-4d1d-8ea6-1f08c7b15446
            customers:
              id: customers
              name: customers
              label: Customers
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: tenantDefinition
                key: customerName
            vpwsvrfRouteTargetFormat:
              id: vpwsvrfRouteTargetFormat
              name: vrfRouteTargetFormat
              label: VRF Route Target Format
              description: 'Auto-format RT values.  Max value 65535 : 65535'
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Cust-ID:Circ-ID
                is_secret: false
                static_options:
                  values:
                    - ASN:Circ-ID
                    - Left-Side-4Byte-ASN:Circ-ID
                    - Right-Side-4Byte-ASN:Circ-ID
                    - Cust-ID:Circ-ID
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsvrfRouteDistinguisherFormat:
              id: vpwsvrfRouteDistinguisherFormat
              name: vrfRouteDistinguisherFormat
              label: VRF Route Distinguisher Format
              description: 'Auto-format RD values. Router ID local loopback 0 address : Local-Port-Num = local port + subinterface. Max value 65535'
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:Circ-ID
                is_secret: false
                static_options:
                  values:
                    - Router-ID:Circ-ID
                    - Router-ID:Local-Port-Num
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            58ab0fac-657f-4f8c-971d-835fd4affd0c:
              id: 58ab0fac-657f-4f8c-971d-835fd4affd0c
              name: remoteFailureErrdisable
              label: Remote Failure Detection
              description: 'This is a Global setting and can be selectively disabled per circuit per End Point. This feature will disable the local interface when the remote interface is down. '
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Enabled
                is_secret: false
                static_options:
                  values:
                    - Enabled
                    - Disabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            vpwsVrfAttributeFormats:
              id: vpwsVrfAttributeFormats
              name: vpwsVrfAttributeFormats
              label: VRF Formats
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsvrfRouteTargetFormat
                    - vpwsvrfRouteDistinguisherFormat
                    - 58ab0fac-657f-4f8c-971d-835fd4affd0c
            63175643-43d4-4422-8996-026201a6262c:
              id: 63175643-43d4-4422-8996-026201a6262c
              name: serviceTypeName
              label: Service Type Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            643c5f0d-dc0c-49b3-aead-d427145b460d:
              id: 643c5f0d-dc0c-49b3-aead-d427145b460d
              name: serviceTypeGroup
              label: Service Type Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 63175643-43d4-4422-8996-026201a6262c
            10cdd3e5-e4f8-4f1f-bc6f-ccd9f00c4226:
              id: 10cdd3e5-e4f8-4f1f-bc6f-ccd9f00c4226
              name: serviceType
              label: Service Type
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: 643c5f0d-dc0c-49b3-aead-d427145b460d
                key: ''
            b434ccc9-6b0f-40b7-a779-5484e6e870ba:
              id: b434ccc9-6b0f-40b7-a779-5484e6e870ba
              name: rate
              label: Speed
              description: mbps
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            6ee4ee27-281c-4446-be00-ecc85b6dac5e:
              id: 6ee4ee27-281c-4446-be00-ecc85b6dac5e
              name: burstSize
              label: Burst-Size
              description: kbps
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            f35052b3-c65c-4eb5-9171-4ecdbc7de99c:
              id: f35052b3-c65c-4eb5-9171-4ecdbc7de99c
              name: policerName
              label: Policer Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                is_secret: false
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            15c6fc3a-df6a-4311-86da-66a2449f199f:
              id: 15c6fc3a-df6a-4311-86da-66a2449f199f
              name: speedGroup
              label: Speed Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - b434ccc9-6b0f-40b7-a779-5484e6e870ba
                    - 6ee4ee27-281c-4446-be00-ecc85b6dac5e
                    - f35052b3-c65c-4eb5-9171-4ecdbc7de99c
            ad29ff36-bbe8-457c-b6a7-67cebc87110e:
              id: ad29ff36-bbe8-457c-b6a7-67cebc87110e
              name: policers
              label: Speed
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: 15c6fc3a-df6a-4311-86da-66a2449f199f
                key: f35052b3-c65c-4eb5-9171-4ecdbc7de99c
            dbdb350a-ea43-43c8-bfe0-8138bf2f3e20:
              id: dbdb350a-ea43-43c8-bfe0-8138bf2f3e20
              name: speed
              label: '-Speed'
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Hide
                is_secret: false
                static_options:
                  values:
                    - Hide
                    - Show
                    - Hide Input Panel Only
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            db53dd1b-6753-4e3d-afb1-210560dbe684:
              id: db53dd1b-6753-4e3d-afb1-210560dbe684
              name: serviceType
              label: '-Service Type'
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Hide
                is_secret: false
                static_options:
                  values:
                    - Hide
                    - Show
                    - Hide Input Panel Only
                format: null
                length: null
                pattern: null
                dynamic_options: null
                extra_values_allowed: false
            183480d7-9650-4b13-83f3-5a6afa836b4a:
              id: 183480d7-9650-4b13-83f3-5a6afa836b4a
              name: hideShowOptionsGroup
              label: Hide Show Options Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - dbdb350a-ea43-43c8-bfe0-8138bf2f3e20
                    - db53dd1b-6753-4e3d-afb1-210560dbe684
            cf80a707-5451-4f5d-b53d-a0ed00e46cfe:
              id: cf80a707-5451-4f5d-b53d-a0ed00e46cfe
              name: hideAndShowOptions
              label: Hide and Show Options
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 183480d7-9650-4b13-83f3-5a6afa836b4a
            root:
              id: root
              name: ''
              label: ''
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customers
                    - vpwsVrfAttributeFormats
                    - 10cdd3e5-e4f8-4f1f-bc6f-ccd9f00c4226
                    - ad29ff36-bbe8-457c-b6a7-67cebc87110e
                    - cf80a707-5451-4f5d-b53d-a0ed00e46cfe
        layout:
          value: '{"7ca49e27-c3ef-44ac-8261-92e55cb8a0a6":{"key":"7ca49e27-c3ef-44ac-8261-92e55cb8a0a6","type":"INPUT","dependency":{"vpwsvrfRouteDistinguisherFormat":{"value":["__ANY__"],"mode":"HIDE"}}},"f3ad3aea-a327-4348-a6f7-f2339259ac3e":{"key":"f3ad3aea-a327-4348-a6f7-f2339259ac3e","dependency":{"db53dd1b-6753-4e3d-afb1-210560dbe684":{"value":["Show","Hide Input Panel Only"],"mode":"SHOW"}},"type":"INPUT"},"vpwsdeviceGroup":{"key":"vpwsdeviceGroup","type":"INPUT","order":["0d2b3ba3-ba40-414c-9928-744a4ead851e","fdc85f87-22ea-43d2-8805-0a553a4343cb","7a761d92-101e-4dab-af6b-e92b1bf3c888","fa87dfe6-e5b2-4460-b453-4402b3bb1567","4b7bd4fc-4acb-4e07-a44f-a388896f083e"]},"3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e":{"key":"3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e","type":"INPUT","dependency":{"425fa256-92e0-4484-afb7-a601ea270aff":{"value":[false],"mode":"SHOW"}}},"78265b9d-8284-4632-bac3-8af5853ee1c1":{"key":"78265b9d-8284-4632-bac3-8af5853ee1c1","type":"INPUT","dependency":{"425fa256-92e0-4484-afb7-a601ea270aff":{"value":[false],"mode":"SHOW"}}},"196bf4e8-c63b-4b13-ba8a-83a2d193cfe4":{"key":"196bf4e8-c63b-4b13-ba8a-83a2d193cfe4","type":"INPUT","dependency":{"425fa256-92e0-4484-afb7-a601ea270aff":{"value":[false],"mode":"SHOW"}}},"91926f52-04a2-4303-b9e2-c4117a90a5b9":{"key":"91926f52-04a2-4303-b9e2-c4117a90a5b9","type":"INPUT","dependency":{"425fa256-92e0-4484-afb7-a601ea270aff":{"value":[false],"mode":"SHOW"}}},"425fa256-92e0-4484-afb7-a601ea270aff":{"key":"425fa256-92e0-4484-afb7-a601ea270aff","valueToLabelMap":{"True":"Port","False":"VLAN"},"type":"INPUT","dependency":{"f3ad3aea-a327-4348-a6f7-f2339259ac3e":{"value":["Ethernet Port-Based"],"mode":"HIDE"}}},"9e0c95e9-76f8-4e81-a84b-0d2d440e910e":{"key":"9e0c95e9-76f8-4e81-a84b-0d2d440e910e","type":"INPUT","dependency":{"91337ced-8dd4-46dc-808b-3f847f7a215f":{"value":[true],"mode":"SHOW"}}},"73f11d0d-8d33-460e-a2e8-16a00e5c9d90":{"key":"73f11d0d-8d33-460e-a2e8-16a00e5c9d90","type":"INPUT","dependency":{"91337ced-8dd4-46dc-808b-3f847f7a215f":{"value":[true],"mode":"SHOW"}}},"vpwsmultihominglacpSysId":{"key":"vpwsmultihominglacpSysId","dependency":{"a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"1cd4e6ed-848a-42c7-bdf5-f029fe98198e":{"key":"1cd4e6ed-848a-42c7-bdf5-f029fe98198e","dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":[false],"mode":"SHOW"}},"dependencyType":"AND","type":"INPUT"},"d8cdb6b6-384e-4b46-b6cf-610998758af9":{"key":"d8cdb6b6-384e-4b46-b6cf-610998758af9","dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":[false],"mode":"SHOW"},"425fa256-92e0-4484-afb7-a601ea270aff":{"value":[false],"mode":"SHOW"}},"dependencyType":"AND","type":"INPUT"},"b93b51e2-b6d4-4394-b2d4-db89b28a0763":{"key":"b93b51e2-b6d4-4394-b2d4-db89b28a0763","type":"INPUT","dependency":{"customerName":{"value":["__ANY__"],"mode":"HIDE"}}},"117d0fde-a9ab-4551-8980-1abd041c3e8b":{"key":"117d0fde-a9ab-4551-8980-1abd041c3e8b","type":"INPUT","dependency":{"customerName":{"value":["__ANY__"],"mode":"HIDE"}}},"a6f637d7-09b3-4498-8207-169a167e4c87":{"key":"a6f637d7-09b3-4498-8207-169a167e4c87","type":"INPUT","dependency":{"customerName":{"value":["__ANY__"],"mode":"HIDE"}}},"63175643-43d4-4422-8996-026201a6262c":{"key":"63175643-43d4-4422-8996-026201a6262c","dependency":{},"type":"INPUT"},"0ea4823b-e1e8-41c7-86e3-abbe06d1342a":{"key":"0ea4823b-e1e8-41c7-86e3-abbe06d1342a","dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":[true],"mode":"SHOW"},"425fa256-92e0-4484-afb7-a601ea270aff":{"value":[false],"mode":"SHOW"},"637d78ba-4fd6-408f-b86e-3dba07b4de94":{"value":[true,false],"mode":"SHOW"}},"dependencyType":"AND","type":"INPUT"},"afe44799-f630-4ad3-9b40-f3934b8771d5":{"key":"afe44799-f630-4ad3-9b40-f3934b8771d5","isMultiLine":false,"type":"INPUT"},"4b7bd4fc-4acb-4e07-a44f-a388896f083e":{"key":"4b7bd4fc-4acb-4e07-a44f-a388896f083e","type":"INPUT","isMultiLine":true,"syntax":"text"},"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"key":"425fe1ab-e65c-43c4-8c12-7a698503a5b8","valueToLabelMap":{"True":"Ethernet","False":"Port Channel"},"dependency":{"f3ad3aea-a327-4348-a6f7-f2339259ac3e":{"value":["Ethernet Port-Based"],"mode":"HIDE"}},"type":"INPUT"},"db9f7b10-0542-40d8-b1ef-53aa75ad65db":{"key":"db9f7b10-0542-40d8-b1ef-53aa75ad65db","type":"INPUT","dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":[false],"mode":"SHOW"}}},"18c302b6-4102-4db7-a30e-a96acd24d5c2":{"key":"18c302b6-4102-4db7-a30e-a96acd24d5c2","dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":[true],"mode":"SHOW"},"637d78ba-4fd6-408f-b86e-3dba07b4de94":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"91337ced-8dd4-46dc-808b-3f847f7a215f":{"key":"91337ced-8dd4-46dc-808b-3f847f7a215f","type":"INPUT","dependency":{"fb4a222e-6761-4090-a77f-ecaff03ca935":{"value":["__ANY__"],"mode":"HIDE"}}},"637d78ba-4fd6-408f-b86e-3dba07b4de94":{"key":"637d78ba-4fd6-408f-b86e-3dba07b4de94","type":"INPUT","dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":[false],"mode":"SHOW"}}},"7a761d92-101e-4dab-af6b-e92b1bf3c888":{"key":"7a761d92-101e-4dab-af6b-e92b1bf3c888","type":"INPUT","showDefaultRow":false},"vpwsswitches":{"key":"vpwsswitches","type":"INPUT","showDefaultRow":false},"vpwsDefinition":{"key":"vpwsDefinition","type":"INPUT","order":["fb4a222e-6761-4090-a77f-ecaff03ca935","vpwsName","vpwsswitches","f3ad3aea-a327-4348-a6f7-f2339259ac3e","7ca49e27-c3ef-44ac-8261-92e55cb8a0a6","44bc6793-871e-46f8-961d-861ee498df48"]},"3fffa5fe-6ec1-4320-b394-58ef84e82b19":{"key":"3fffa5fe-6ec1-4320-b394-58ef84e82b19","type":"INPUT","dependency":{"58ab0fac-657f-4f8c-971d-835fd4affd0c":{"value":["Enabled"],"mode":"SHOW"}}},"fa87dfe6-e5b2-4460-b453-4402b3bb1567":{"key":"fa87dfe6-e5b2-4460-b453-4402b3bb1567","type":"INPUT","order":["3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e","78265b9d-8284-4632-bac3-8af5853ee1c1","196bf4e8-c63b-4b13-ba8a-83a2d193cfe4","91926f52-04a2-4303-b9e2-c4117a90a5b9"]},"0d2b3ba3-ba40-414c-9928-744a4ead851e":{"key":"0d2b3ba3-ba40-414c-9928-744a4ead851e","type":"INPUT","order":["e51e8763-2858-4637-8bc2-e4f70043a542","afe44799-f630-4ad3-9b40-f3934b8771d5","73f11d0d-8d33-460e-a2e8-16a00e5c9d90","9e0c95e9-76f8-4e81-a84b-0d2d440e910e","425fa256-92e0-4484-afb7-a601ea270aff","91337ced-8dd4-46dc-808b-3f847f7a215f","425fe1ab-e65c-43c4-8c12-7a698503a5b8","637d78ba-4fd6-408f-b86e-3dba07b4de94","3fffa5fe-6ec1-4320-b394-58ef84e82b19","a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a","vpwsmultihominglacpSysId","18a54f2e-e830-4824-8c21-bec91c3a4ca5","8f7fdc4b-0da7-4670-aa9c-58802d384bd7"]},"18a54f2e-e830-4824-8c21-bec91c3a4ca5":{"key":"18a54f2e-e830-4824-8c21-bec91c3a4ca5","type":"INPUT","dependency":{"a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a":{"value":[true],"mode":"SHOW"}}},"8f7fdc4b-0da7-4670-aa9c-58802d384bd7":{"key":"8f7fdc4b-0da7-4670-aa9c-58802d384bd7","type":"INPUT","dependency":{"a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a":{"value":[true],"mode":"SHOW"}}},"a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a":{"key":"a76d3152-212c-4f6d-b2a8-9c5bdb84bb3a","type":"INPUT","dependency":{"425fe1ab-e65c-43c4-8c12-7a698503a5b8":{"value":[false],"mode":"SHOW"}}},"10cdd3e5-e4f8-4f1f-bc6f-ccd9f00c4226":{"key":"10cdd3e5-e4f8-4f1f-bc6f-ccd9f00c4226","isPageLayout":false,"dependency":{},"type":"INPUT"},"ad29ff36-bbe8-457c-b6a7-67cebc87110e":{"key":"ad29ff36-bbe8-457c-b6a7-67cebc87110e","isPageLayout":false,"type":"INPUT"},"15c6fc3a-df6a-4311-86da-66a2449f199f":{"key":"15c6fc3a-df6a-4311-86da-66a2449f199f","order":["f35052b3-c65c-4eb5-9171-4ecdbc7de99c","b434ccc9-6b0f-40b7-a779-5484e6e870ba","6ee4ee27-281c-4446-be00-ecc85b6dac5e"],"dependency":{"dbdb350a-ea43-43c8-bfe0-8138bf2f3e20":{"value":["Hide","Hide Input Panel Only"],"mode":"HIDE"}},"type":"INPUT"},"643c5f0d-dc0c-49b3-aead-d427145b460d":{"key":"643c5f0d-dc0c-49b3-aead-d427145b460d","dependency":{"db53dd1b-6753-4e3d-afb1-210560dbe684":{"value":["Hide","Hide Input Panel Only"],"mode":"HIDE"}},"type":"INPUT"},"44bc6793-871e-46f8-961d-861ee498df48":{"key":"44bc6793-871e-46f8-961d-861ee498df48","dependency":{"dbdb350a-ea43-43c8-bfe0-8138bf2f3e20":{"value":["Show","Hide Input Panel Only"],"mode":"SHOW"}},"type":"INPUT"},"tenantDefinition":{"key":"tenantDefinition","type":"INPUT","order":["customerName","3299f2a4-db1e-4d1d-8ea6-1f08c7b15446","vpws"]}}'
