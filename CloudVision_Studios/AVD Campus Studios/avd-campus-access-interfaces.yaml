- service: arista.studio.v1.StudioConfigService
  method: Set
  body:
    value:
      key:
        studio_id: studio-campus-access-interfaces
        workspace_id: ''
      display_name: AVD Access Interface Configuration
      description: Configure access interfaces for campus switches
      template:
        type: TEMPLATE_TYPE_MAKO
        body: |
          <%
          import json
          import os
          import re
          import tagsearch_python.tagsearch_pb2_grpc as tsgr
          import tagsearch_python.tagsearch_pb2 as tspb
          from arista.tag.v2.tag_pb2 import Tag, \
              TagKey, \
              TagAssignment, \
              TagAssignmentKey, \
              TagAssignmentConfig
          from collections import ChainMap
          from copy import deepcopy
          from typing import Union
          try:
              from deepmerge import Merger
          except ImportError as imp_exc:
              DEEPMERGE_IMPORT_ERROR = imp_exc
          else:
              DEEPMERGE_IMPORT_ERROR = None

          default_platform_settings = [
              {
                  "platforms": ['default'],
                  "reload_delay": {
                      "mlag": 300,
                      "non_mlag": 330
                  },
                  "feature_support": {
                      # "queue-monitor length notify" is only valid for R-Series so should be disabled on default platform.
                      "queue_monitor_length_notify": False
                  }
              },
              {
                  "platforms": ['7050X3'],
                  # Only applied when enabling EVPN multicast
                  "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072",
                  "reload_delay": {
                      "mlag": 300,
                      "non_mlag": 330
                  },
                  "feature_support": {
                      # "queue-monitor length notify" is only valid for R-Series so should be disabled on default platform.
                      "queue_monitor_length_notify": False
                  }
              },
              {
                  "platforms": ['720XP', '722XP'],
                  # Only applied when enabling EVPN multicast
                  "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072",
                  "reload_delay": {
                      "mlag": 300,
                      "non_mlag": 330
                  },
                  "feature_support": {
                      # "queue-monitor length notify" is only valid for R-Series so should be disabled on default platform.
                      "queue_monitor_length_notify": False,
                      "phone": True,
                      "poe": True
                  }
              },
              {
                  "platforms": ['755', '758'],
                  # Only applied when enabling EVPN multicast
                  "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072",
                  "reload_delay": {
                      "mlag": 300,
                      "non_mlag": 330
                  },
                  "feature_support": {
                      # "queue-monitor length notify" is only valid for R-Series so should be disabled on default platform.
                      "queue_monitor_length_notify": False,
                      "poe": True
                  }
              },
              {
                  "platforms": ['7280R', '7280R2', '7020R'],
                  "tcam_profile": "vxlan-routing",
                  "lag_hardware_only": True,
                  "reload_delay": {
                      "mlag": 900,
                      "non_mlag": 1020
                  }
              },
              {
                  "platforms": ['7280R3'],
                  "reload_delay": {
                      "mlag": 900,
                      "non_mlag": 1020
                  }
              },
              {
                  "platforms": ['7500R', '7500R2'],
                  "tcam_profile": "vxlan-routing",
                  "lag_hardware_only": True,
                  "management_interface": "Management0",
                  "reload_delay": {
                      "mlag": 900,
                      "non_mlag": 1020
                  }
              },
              {
                  "platforms": ['7500R3', '7800R3'],
                  "management_interface": "Management0",
                  "reload_delay": {
                      "mlag": 900,
                      "non_mlag": 1020
                  }
              },
              {
                  "platforms": ['7368X4'],
                  "management_interface": "Management0",
                  "reload_delay": {
                      "mlag": 300,
                      "non_mlag": 330
                  }
              },
              {
                  "platforms": ['7300X3'],
                  "management_interface": "Management0",
                  # Only applied when enabling EVPN multicast
                  "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072",
                  "reload_delay": {
                      "mlag": 1200,
                      "non_mlag": 1320
                  }
              },
              {
                  "platforms": ['VEOS', 'VEOS-LAB', 'vEOS', 'vEOS-lab'],
                  "reload_delay": {
                      "mlag": 300,
                      "non_mlag": 330
                  },
                  "feature_support": {
                      # "queue-monitor length notify" is only valid for R-Series so should be disabled on default platform.
                      "queue_monitor_length_notify": False,
                      "interface_storm_control": False
                  }
              },
              {
                  "platforms": ['CEOS', 'cEOS', 'ceos', 'cEOSLab'],
                  "management_interface": "Management0",
                  "reload_delay": {
                      "mlag": 300,
                      "non_mlag": 330
                  },
                  "feature_support": {
                      # "queue-monitor length notify" is only valid for R-Series so should be disabled on default platform.
                      "queue_monitor_length_notify": False,
                      "interface_storm_control": False
                  }
              }
          ]


          ptp_profiles = [
              {
                  "profile": "aes67-r16-2016",
                  "announce": {
                      "interval": 0,
                      "timeout": 3,
                  },
                  "delay_req": -3,
                  "sync_message": {
                      "interval": -3
                  },
                  "transport": "ipv4"
              },
              {
                  "profile": "smpte2059-2",
                  "announce": {
                      "interval": -2,
                      "timeout": 3,
                  },
                  "delay_req": -4,
                  "sync_message": {
                      "interval": -4
                  },
                  "transport": "ipv4"
              },
              {
                  "profile": "aes67",
                  "announce": {
                      "interval": 2,
                      "timeout": 3,
                  },
                  "delay_req": 0,
                  "sync_message": {
                      "interval": 0
                  },
                  "transport": "ipv4"
              }
          ]


          def defined(value, test_value=None, var_type=None, fail_action=None, var_name=None, run_tests=False):
              if value in [None, "", {}, []]:
                  return False
              else:
                  # Valid value and is matching optional argument if provided - return true
                  return True


          def convert_dicts(dictionary, primary_key="name", secondary_key=None):
              """
              The `arista.avd.convert_dicts` filter will convert a dictionary containing nested dictionaries to a list of
              dictionaries. It inserts the outer dictionary keys into each list item using the primary_key `name` (key name is
              configurable) and if there is a non-dictionary value,it inserts this value to
              secondary key (key name is configurable), if secondary key is provided.
              This filter is intended for:
              - Seemless data model migration from dictionaries to lists.
              - Improve Ansible's processing performance when dealing with large dictionaries by converting them to lists of dictionaries.
              Note: If there is a non-dictionary value with no secondary key provided, it will pass through untouched
              To use this filter:
              ```jinja
              {# convert list of dictionary with default `name:` as the primary key and None secondary key #}
              {% set example_list = example_dictionary | arista.avd.convert_dicts %}
              {% for example_item in example_list %}
              item primary key is {{ example_item.name }}
              {% endfor %}
              {# convert list of dictionary with `id:` set as the primary key and `types:` set as the secondary key #}
              {% set example_list = example_dictionary | arista.avd.convert_dicts('id','types') %}
              {% for example_item in example_list %}
              item primary key is {{ example_item.id }}
              item secondary key is {{ example_item.types }}
              {% endfor %}
              ```
              Parameters
              ----------
              dictionary : any
                  Nested Dictionary to convert - returned untouched if not a nested dictionary and list
              primary_key : str, optional
                  Name of primary key used when inserting outer dictionary keys into items.
              secondary_key : str, optional
                  Name of secondary key used when inserting dictionary values which are list into items.
              Returns
              -------
              any
                  Returns list of dictionaries or input variable untouched if not a nested dictionary/list.
              """
              if not isinstance(dictionary, (dict, list)) or os.environ.get("AVD_DISABLE_CONVERT_DICTS"):
                  # Not a dictionary/list, return the original
                  return dictionary
              elif isinstance(dictionary, list):
                  output = []
                  for element in dictionary:
                      if not isinstance(element, dict):
                          item = {}
                          item.update({primary_key: element})
                          output.append(item)
                      elif primary_key not in element and secondary_key is not None:
                          # if element of nested dictionary is a dictionary but primary key is missing, insert primary and secondary keys.
                          for key in element:
                              output.append(
                                  {
                                      primary_key: key,
                                      secondary_key: element[key],
                                  }
                              )
                      else:
                          output.append(element)
                  return output
              else:
                  output = []
                  for key in dictionary:
                      if secondary_key is not None:
                          # Add secondary key for the values if secondary key is provided
                          item = {}
                          item.update({primary_key: key})
                          item.update({secondary_key: dictionary[key]})
                          output.append(item)
                      else:
                          if not isinstance(dictionary[key], dict):
                              # Not a nested dictionary
                              output.append({primary_key: key})
                          else:
                              # Nested dictionary
                              item = dictionary[key].copy()
                              item.update({primary_key: key})
                              output.append(item)
                  return output


          def get(dictionary, key, default=None, required=False, org_key=None, separator="."):
              """
              Get a value from a dictionary or nested dictionaries.
              Key supports dot-notation like "foo.bar" to do deeper lookups.
              Returns the supplied default value or None if the key is not found and required is False.
              Parameters
              ----------
              dictionary : dict
                  Dictionary to get key from
              key : str
                  Dictionary Key - supporting dot-notation for nested dictionaries
              default : any
                  Default value returned if the key is not found
              required : bool
                  Fail if the key is not found
              org_key : str
                  Internal variable used for raising exception with the full key name even when called recursively
              separator: str
                  String to use as the separator parameter in the split function. Useful in cases when the key
                  can contain variables with "." inside (e.g. hostnames)
              Returns
              -------
              any
                  Value or default value
              Raises
              ------
              AristaAvdMissingVariableError
                  If the key is not found and required == True
              """

              if org_key is None:
                  org_key = key
              keys = str(key).split(separator)
              value = dictionary.get(keys[0])
              if value is None:
                  if required is True:
                      raise TypeError(org_key)
                  return default
              else:
                  if len(keys) > 1:
                      return get(value, separator.join(keys[1:]), default=default, required=required, org_key=org_key, separator=separator)
                  else:
                      return value


          def get_all(data, path: str, required: bool = False, org_path=None):
              """
              Get all values from data matching a data path.
              Path supports dot-notation like "foo.bar" to do deeper lookups. Lists will be unpacked recursively.
              Returns an empty list if the path is not found and required is False.
              Parameters
              ----------
              data : any
                  Data to walk through
              path : str
                  Data Path - supporting dot-notation for nested dictionaries/lists
              required : bool
                  Fail if the path is not found
              org_path : str
                  Internal variable used for raising exception with the full path even when called recursively
              Returns
              -------
              list [ any ]
                  List of values matching data path or empty list if no matches are found.
              Raises
              ------
              AristaAvdMissingVariableError
                  If the path is not found and required == True
              """

              if org_path is None:
                  org_path = path

              path_elements = str(path).split(".")
              if isinstance(data, list):
                  output = []
                  for data_item in data:
                      output.extend(get_all(data_item, path, required=required, org_path=org_path))

                  return output

              elif isinstance(data, dict):
                  value = data.get(path_elements[0])

                  if value is None:
                      if required:
                          raise TypeError(org_path)

                      return []

                  if len(path_elements) > 1:
                      return get_all(value, ".".join(path_elements[1:]), required=required, org_path=org_path)

                  else:
                      return [value]

              return []


          def get_item(list_of_dicts: list, key, value, default=None, required=False, case_sensitive=False, var_name=None):
              """
              Get one dictionary from a list of dictionaries by matching the given key and value
              Returns the supplied default value or None if there is no match and "required" is False.
              Will return the first matching item if there are multiple matching items.
              Parameters
              ----------
              list_of_dicts : list(dict)
                  List of Dictionaries to get list item from
              key : any
                  Dictionary Key to match on
              value : any
                  Value that must match
              default : any
                  Default value returned if the key and value is not found
              required : bool
                  Fail if there is no match
              case_sensitive : bool
                  If the search value is a string, the comparison will ignore case by default
              var_name : str
                  String used for raising exception with the full variable name
              Returns
              -------
              any
                  Dict or default value
              Raises
              ------
              AristaAvdMissingVariableError
                  If the key and value is not found and "required" == True
              """

              if var_name is None:
                  var_name = key

              if (not isinstance(list_of_dicts, list)) or list_of_dicts == [] or value is None or key is None:
                  if required is True:
                      raise KeyError(var_name)
                  return default

              for list_item in list_of_dicts:
                  if not isinstance(list_item, dict):
                      # List item is not a dict as required. Skip this item
                      continue
                  if list_item.get(key) == value:
                      # Match. Return this item
                      return list_item

              # No Match
              if required is True:
                  raise KeyError(var_name)
              return default


          from functools import reduce

          def merge(a, b, path=None):
              "merges b into a"
              if path is None: path = []
              for key in a:
                  if key in ["parent_profile"]:
                      continue

                  if key in b and b[key] not in [None, "", [], {}]:
                      if isinstance(a[key], dict) and isinstance(b[key], dict):
                          merge(a[key], b[key], path + [str(key)])
                      # elif a[key] == b[key]:
                      #     pass # same leaf value
                      # else:
                      #     a[key] = b[key]
                          # raise Exception(f'Conflict at {path + [str(key)]}.')
                  else:
                      b[key] = a[key]
              return b


          # def _strategy_keep(config, path, base, nxt):
          #     """prefer base, otherwise nxt"""
          #     if base is not None:
          #         return base
          #     return nxt


          # def _strategy_prepend_unique(config, path, base, nxt):
          #     """prepend nxt items without duplicates in base to base."""
          #     nxt_as_set = set(nxt)
          #     return nxt + [n for n in base if n not in nxt_as_set]


          # MAP_ANSIBLE_LIST_MERGE_TO_DEEPMERGE_LIST_STRATEGY = {
          #     "replace": "override",
          #     "keep": _strategy_keep,
          #     "append": "append",
          #     "prepend": "prepend",
          #     "append_rp": "append_unique",
          #     "prepend_rp": _strategy_prepend_unique,
          # }


          # def merge(base, *nxt_list, recursive=True, list_merge="append", destructive_merge=True):  #, schema: AvdSchema = None):
          #     if DEEPMERGE_IMPORT_ERROR:
          #         raise Exception("This studio requires python deepmerge to be installed") from DEEPMERGE_IMPORT_ERROR

          #     if not destructive_merge:
          #         base = deepcopy(base)

          #     if list_merge not in MAP_ANSIBLE_LIST_MERGE_TO_DEEPMERGE_LIST_STRATEGY:
          #         raise Exception(f"merge: 'list_merge' argument can only be equal to one of {list(MAP_ANSIBLE_LIST_MERGE_TO_DEEPMERGE_LIST_STRATEGY.keys())}")

          #     list_strategies = [MAP_ANSIBLE_LIST_MERGE_TO_DEEPMERGE_LIST_STRATEGY.get(list_merge, "append")]

          #     if list_merge != "replace":  # and isinstance(schema, AvdSchema):
          #         # If list_merge is not "replace" and we have a valid schema, we prepend the list_strategies
          #         # with our schema based list merger "MergeOnSchema"
          #         # If "primary_key" is not set and equal, we will fallback to the supplied "list_merge" strategy
          #         merge_on_schema = MergeOnSchema(schema)
          #         list_strategies.insert(0, merge_on_schema.strategy)

          #     dict_strategies = ["merge" if recursive else "override"]

          #     merger = Merger(
          #         # List of tuples with strategies for each type
          #         [(list, list_strategies), (dict, dict_strategies), (set, ["union"])],
          #         # Fallback strategy applied to all other types
          #         ["override"],
          #         # Strategy for type conflict
          #         ["override"],
          #     )
          #     for nxt in nxt_list:
          #         if isinstance(nxt, list):
          #             for nxt_item in nxt:
          #                 if not destructive_merge:
          #                     nxt_item = deepcopy(nxt_item)
          #                 merger.merge(base, nxt_item)
          #         else:
          #             if not destructive_merge:
          #                 nxt = deepcopy(nxt)
          #             merger.merge(base, nxt)

          #     return base


          def strip_null_from_data(data, strip_values_tuple=(None,)):
              """
              strip_null_from_data Generic function to strip null entries regardless type of variable.
              Parameters
              ----------
              data : Any
                  Data to look for null content to strip out
              Returns
              -------
              Any
                  Cleaned data with no null.
              """
              if isinstance(data, dict):
                  return strip_empties_from_dict(data, strip_values_tuple)
              elif isinstance(data, list):
                  return strip_empties_from_list(data, strip_values_tuple)
              return data


          def strip_empties_from_list(
              data,
              strip_values_tuple=(
                  None,
                  "",
                  [],
                  {},
              ),
          ):
              """
              strip_empties_from_list Remove entries with null value from a list
              Parameters
              ----------
              data : Any
                  data to filter
              strip_values_tuple : tuple, optional
                  Value to remove from data, by default (None, "", [], {},)
              Returns
              -------
              Any
                  Cleaned list with no strip_values_tuple
              """
              new_data = []
              for v in data:
                  if isinstance(v, dict):
                      v = strip_empties_from_dict(v, strip_values_tuple)
                  elif isinstance(v, list):
                      v = strip_empties_from_list(v, strip_values_tuple)
                  if v not in strip_values_tuple:
                      new_data.append(v)
              return new_data


          def strip_empties_from_dict(
              data,
              strip_values_tuple=(
                  None,
                  "",
                  [],
                  {},
              ),
          ):
              """
              strip_empties_from_dict Remove entries with null value from a dict
              Parameters
              ----------
              data : Any
                  data to filter
              strip_values_tuple : tuple, optional
                  Value to remove from data, by default (None, "", [], {},)
              Returns
              -------
              Any
                  Cleaned dict with no strip_values_tuple
              """
              new_data = {}
              for k, v in data.items():
                  if isinstance(v, dict):
                      v = strip_empties_from_dict(v, strip_values_tuple)
                  elif isinstance(v, list):
                      v = strip_empties_from_list(v, strip_values_tuple)
                  if v not in strip_values_tuple:
                      new_data[k] = v
              return new_data


          def str_to_bool(text):
              if str(text).strip().lower() in ["enable", "enabled", "yes"]:
                  return True
              elif str(text).strip().lower() in ["disable", "disabled", "no"]:
                  return False
              return None


          @ctx.benchmark
          def convert(text):
              return int(text) if text.isdigit() else text.lower()


          @ctx.benchmark
          def natural_sort(iterable, sort_key=None):
              if iterable is None:
                  return []

              @ctx.benchmark
              def alphanum_key(key):
                  if sort_key is not None and isinstance(key, dict):
                      return [convert(c) for c in re.split("([0-9]+)", str(key.get(sort_key, key)))]
                  else:
                      return [convert(c) for c in re.split("([0-9]+)", str(key))]

              return sorted(iterable, key=alphanum_key)

          # ESI generators
          def generate_esi(esi_short, esi_prefix='0000:0000:'):
              return esi_prefix + esi_short


          def generate_lacp_id(esi_short):
              return esi_short.replace(':', '.')


          def generate_route_target(esi_short):
              """
              generate_route_target Transform 3 octets ESI like 0303:0202:0101 to route-target
              Parameters
              ----------
              esi : str
                  Short ESI value as per AVD definition in eos_designs
              Returns
              -------
              str
                  String based on route-target format like 03:03:02:02:01:01
              """
              delimiter = ':'
              esi = esi_short.replace(delimiter, "")
              esi_split = re.findall('..', esi)
              rt = ""
              loop_cpt = 0
              for esi_section in esi_split:
                  loop_cpt += 1
                  rt = rt + str(esi_section)
                  if loop_cpt < len(esi_split):
                      rt = rt + str(delimiter)
              return rt


          def range_expand(range_to_expand):
              if not (isinstance(range_to_expand, list) or isinstance(range_to_expand, str)):
                  raise AnsibleFilterError(
                      f"value must be of type list or str, got {type(range_to_expand)}")

              result = []

              # If we got a list, unpack it and run this function recursively
              if isinstance(range_to_expand, list):
                  for r in range_to_expand:
                      result.extend(range_expand(r))

              # Must be a str now
              else:
                  prefix = ""

                  # Unpack list in string
                  for one_range in range_to_expand.split(','):
                      if one_range is None:
                          continue

                      # Find prefix (if any)
                      regex = r"^(.*?)(((\d+)-)?(\d+)\/)?(((\d+)-)?(\d+)\/)?(((\d+)-)?(\d+))(\.((\d+)-)?(\d+))?"
                      # Number of groups in this regex.
                      regex_groups = 17
                      # Groups one-by-one:
                      # Group 1  (.*?)                                                                           matches prefix ex. Ethernet, Eth, Po, Port-Channel
                      # Group 2       (((\d+)-)?(\d+)\/)?                                                        matches module(s) and slash ex. 12/, 1-3/
                      # Group 3        ((\d+)-)?                                                                 matches first module and dash ex. 1-
                      # Group 4         (\d+)                                                                    matches first module ex. 1
                      # Group 5                 (\d+)                                                            matches last module ex. 12, 3
                      # Group 6                          (((\d+)-)?(\d+)\/)?                                     matches parent interface(s) and slash ex. 47/, 1-48/
                      # Group 7                           ((\d+)-)?                                              matches parent interface(s) and dash ex. 47-
                      # Group 8                            (\d+)                                                 matches first parent interface ex. 1
                      # Group 9                                    (\d+)                                         matches last parent interface ex. 47, 48
                      # Group 10                                            (((\d+)-)?(\d+))                     matches (breakout) interface(s) ex. 1, 1-4, 1-48
                      # Group 11                                             ((\d+)-)?                           matches first interfaces and dash ex. 1-, 1-
                      # Group 12                                              (\d+)                              matches first interface
                      # Group 13                                                      (\d+)                      matches last interface ex. 1, 4, 48
                      # Group 14                                                            (\.((\d+)-)?(\d+))?  matches dot and sub-interface(s) ex. .141, .12-15
                      # Group 15                                                               ((\d+)-)?         matches first sub-interface and dash ex. 12-
                      # Group 16                                                                (\d+)            matches first sub-interface ex. 12
                      # Group 17                                                                        (\d+)    matches last sub-interface ex. 141, 15
                      # Remember that the groups() object is 0-based and the group numbers above are 1-based
                      search_result = re.search(regex, one_range)
                      if search_result:
                          if len(search_result.groups()) == regex_groups:
                              groups = search_result.groups()
                              first_module = last_module = None
                              first_parent_interface = last_parent_interface = None
                              first_interface = last_interface = None
                              first_subinterface = last_subinterface = None
                              # Set prefix if found (otherwise use last set prefix)
                              if groups[0]:
                                  prefix = groups[0]
                              if groups[4]:
                                  last_module = int(groups[4])
                              if groups[3]:
                                  first_module = int(groups[3])
                              else:
                                  first_module = last_module
                              if groups[8]:
                                  last_parent_interface = int(groups[8])
                              if groups[7]:
                                  first_parent_interface = int(groups[7])
                              else:
                                  first_parent_interface = last_parent_interface
                              if groups[12]:
                                  last_interface = int(groups[12])
                              if groups[11]:
                                  first_interface = int(groups[11])
                              else:
                                  first_interface = last_interface
                              if groups[16]:
                                  last_subinterface = int(groups[16])
                              if groups[15]:
                                  first_subinterface = int(groups[15])
                              else:
                                  first_subinterface = last_subinterface

                              def expand_subinterfaces(interface_string):
                                  result = []
                                  if last_subinterface:
                                      for subinterface in range(first_subinterface, last_subinterface + 1):
                                          result.append(
                                              f"{interface_string}.{subinterface}")
                                  else:
                                      result.append(interface_string)
                                  return result

                              def expand_interfaces(interface_string):
                                  result = []
                                  for interface in range(first_interface, last_interface + 1):
                                      for res in expand_subinterfaces(f"{interface_string}{interface}"):
                                          result.append(res)
                                  return result

                              def expand_parent_interfaces(interface_string):
                                  result = []
                                  if last_parent_interface:
                                      for parent_interface in range(first_parent_interface, last_parent_interface + 1):
                                          for res in expand_interfaces(f"{interface_string}{parent_interface}/"):
                                              result.append(res)
                                  else:
                                      for res in expand_interfaces(f"{interface_string}"):
                                          result.append(res)
                                  return result

                              def expand_module(interface_string):
                                  result = []
                                  if last_module:
                                      for module in range(first_module, last_module + 1):
                                          for res in expand_parent_interfaces(f"{interface_string}{module}/"):
                                              result.append(res)
                                  else:
                                      for res in expand_parent_interfaces(f"{interface_string}"):
                                          result.append(res)
                                  return result

                              result.extend(expand_module(prefix))

                          else:
                              raise AnsibleFilterError(
                                  f"Invalid range, got {one_range} and found {search_result.groups()}")

              return result


          # returns dictionary of device to label value based on workspace tag assignments
          def populate_single_value_dict(workspace_id, label):
              sv_dict = {}
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              tvsr = tspb.TagValueSearchRequest(
                  label=label,
                  workspace_id=workspace_id,
                  topology_studio_request=True
              )
              for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                  query = f"{tag.label}:\"{tag.value}\""
                  tagmr = tspb.TagMatchRequestV2(
                      query=query,
                      workspace_id=workspace_id,
                      topology_studio_request=True
                  )
                  tagmresp = tsclient.GetTagMatchesV2(tagmr)
                  for match in tagmresp.matches:
                      sv_dict[match.device.device_id] = tag.value
              return sv_dict

          # returns dictionary of device to label values based on workspace tag assignments
          def populate_multi_value_dict(workspace_id, label):
              mv_dict = {}
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              tvsr = tspb.TagValueSearchRequest(
                  label=label,
                  workspace_id=workspace_id,
                  topology_studio_request=True
              )
              for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                  query = f"{tag.label}:\"{tag.value}\""
                  tagmr = tspb.TagMatchRequestV2(
                      query=query,
                      workspace_id=workspace_id,
                      topology_studio_request=True
                  )
                  tagmresp = tsclient.GetTagMatchesV2(tagmr)
                  for match in tagmresp.matches:
                      mv_dict.setdefault(match.device.device_id, []).append(tag.value)
              return mv_dict


          def get_switch_basics_from_tags(device_id):
              switch_facts = {"serial_number": device_id}
              switch_facts['network_services'] = {}
              tags_to_facts = {
                  "hostname": "hostname",
                  "model": "platform"
              }

              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              for label in tags_to_facts.keys():
                  if label == "hostname":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.hostName:
                              switch_facts[tags_to_facts[label]] = dev.hostName
                      continue
                  elif label == "model":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.modelName:
                              switch_facts[tags_to_facts[label]] = dev.modelName
                      continue


              # Set platform settings
              if not switch_facts.get('platform_settings'):
                  # Set platform setting to the default platform_setting (the first platform setting in the list of default_platform_settings)
                  switch_facts['platform_settings'] = default_platform_settings[0]
                  # Attempt to match more specific platform_setting
                  for platform_setting in default_platform_settings:
                      # check to see if any default platform regex is matched
                      for platform_regex in platform_setting['platforms']:
                          if re.search(platform_regex, switch_facts['platform'], re.IGNORECASE):
                              switch_facts['platform_settings'] = platform_setting

              return switch_facts


          def get_port_profiles(port_profiles):
              '''
              Returns list of port profiles in AVD connected endpoints data model format
              '''
              if not port_profiles:
                  return []

              avd_port_profiles = []
              for port_profile in port_profiles:
                  # ctx.info(f"Getting info for {port_profile['name']}")
                  tmp_port_profile = {"profile": port_profile["name"]}
                  # Parent profile
                  if port_profile.get("parentProfile", "").strip():
                      tmp_port_profile["parent_profile"] = port_profile["parentProfile"]
                  # Description
                  if port_profile.get("description", "").strip():
                      tmp_port_profile["description"] = port_profile["description"]
                  # Enable/Disable
                  if port_profile.get("enabled", "").strip():
                      tmp_port_profile["enabled"] = str_to_bool(port_profile["enabled"])
                  # Speed
                  if port_profile.get("speed", "").strip():
                      tmp_port_profile["speed"] = port_profile["speed"]
                  # Mode
                  if port_profile.get("mode", "").strip():
                      tmp_port_profile["mode"] = port_profile["mode"]
                  # MTU
                  if port_profile.get("mtu", ""):
                      tmp_port_profile["mtu"] = port_profile["mtu"]
                  # phone trunk
                  if port_profile.get("phone"):
                      if port_profile["mode"] in ["trunk phone"] and port_profile["phone"].get("trunk"):
                          tmp_port_profile["phone_trunk"] = port_profile["phone"]["trunk"]
                  # vlans
                  if port_profile.get("vlans"):
                      # Native VLAN
                      if port_profile["mode"] in ["trunk", "trunk phone"] and port_profile["vlans"].get("nativeVlan"):
                          tmp_port_profile["native_vlan"] = port_profile["vlans"]["nativeVlan"]
                      # Phone VLAN
                      if port_profile["mode"] in ["trunk phone"] and port_profile["vlans"].get("phoneVlan"):
                          tmp_port_profile["phone_vlan"] = port_profile["vlans"]["phoneVlan"]
                      # VLANs
                      if port_profile["vlans"].get("vlans", "").strip():
                          tmp_port_profile["vlans"] = port_profile["vlans"]["vlans"]
                  # spanning tree
                  if port_profile.get("spanningTree"):
                      # Spanning-Tree portfast
                      if port_profile["spanningTree"].get("portfast", "").strip():
                          tmp_port_profile["spanning_tree_portfast"] = port_profile["spanningTree"]["portfast"]
                      # Spanning-Tree Bpdu Filter
                      if port_profile["spanningTree"].get("bpduFilter", "").strip():
                          tmp_port_profile["spanning_tree_bpdufilter"] = port_profile["spanningTree"]["bpduFilter"]
                      # Spanning-Tree Bpdu Guard
                      if port_profile["spanningTree"].get("bpduGuard", "").strip():
                          tmp_port_profile["spanning_tree_bpduguard"] = port_profile["spanningTree"]["bpduGuard"]
                  # flow control
                  if port_profile.get("flowControl"):
                      # Flow control received
                      if port_profile["flowControl"].get("received", "").strip():
                          tmp_port_profile["flow_control"] = {
                              "received": port_profile["flowControl"]["received"]
                          }
                  # QOS profile
                  if port_profile.get("qosProfile", "").strip():
                      tmp_port_profile["qos_profile"] = port_profile["qosProfile"]
                  # PTP
                  if port_profile.get("ptp"):
                      tmp_port_profile["ptp"] = {
                          "enabled": str_to_bool(port_profile["ptp"]["enabled"].strip()),
                          "profile": port_profile["ptp"]["profile"],
                          "endpoint_role": port_profile["ptp"]["endpointRole"]
                      }
                  # Dot1x
                  if port_profile.get("dot1x"):
                      tmp_port_profile["dot1x"] = {
                          "enabled": str_to_bool(port_profile["dot1x"]["enabled"].strip())
                      }
                      # Port control
                      if port_profile["dot1x"].get("portControl", "").strip():
                          tmp_port_profile["dot1x"]["port_control"] = port_profile["dot1x"]["portControl"]
                      # Port Control Force Authorized Phone
                      if str_to_bool(port_profile["dot1x"].get("portControlForceAuthorizedPhone", "").strip()) \
                              and tmp_port_profile["dot1x"].get("port_control"):
                          tmp_port_profile["dot1x"]["port_control_force_authorized_phone"] = str_to_bool(port_profile["dot1x"]["portControlForceAuthorizedPhone"])
                      # Reauthentication
                      if str_to_bool(port_profile["dot1x"].get("reauthentication", "").strip()):
                          tmp_port_profile["dot1x"]["reauthentication"] = str_to_bool(port_profile["dot1x"]["reauthentication"])
                      # PAE
                      if port_profile["dot1x"]["pae"].get("mode", "").strip():
                          tmp_port_profile["dot1x"]["pae"] = {
                              "mode": port_profile["dot1x"]["pae"]["mode"]
                          }
                      # authentication failure
                      if port_profile["dot1x"].get("authenticationFailure"):
                          # Authentication Failure action
                          if port_profile["dot1x"]["authenticationFailure"].get("action", "").strip():
                              tmp_port_profile["dot1x"]["authentication_failure"] = {
                                  "action": port_profile["dot1x"]["authenticationFailure"]["action"].lower()
                              }
                          # Authentication Failure vlan
                          if port_profile["dot1x"]["authenticationFailure"].get("allowVlan") \
                                  and tmp_port_profile["dot1x"].get("authentication_failure"):
                              tmp_port_profile["dot1x"]["authentication_failure"]["allow_vlan"] = port_profile["dot1x"]["authenticationFailure"]["allowVlan"]
                      # Host Mode
                      if port_profile["dot1x"].get("hostMode"):
                          if port_profile["dot1x"]["hostMode"].get("mode", "").strip():
                              tmp_port_profile["dot1x"]["host_mode"] = {
                                  "mode": port_profile["dot1x"]["hostMode"]["mode"]
                              }
                          # multiHostAuthenticated
                          if str_to_bool(port_profile["dot1x"]["hostMode"].get("multiHostAuthenticated", "").strip()) \
                                  and port_profile["dot1x"]["hostMode"].get("mode", "") in ["multi-host"]:
                              tmp_port_profile["dot1x"]["host_mode"]["multi_host_authenticated"] = str_to_bool(port_profile["dot1x"]["hostMode"]["multiHostAuthenticated"])
                      # MBA
                      if port_profile["dot1x"].get("macBasedAuthentication"):
                          if str_to_bool(port_profile["dot1x"]["macBasedAuthentication"].get("enable", "").strip()):
                              tmp_port_profile["dot1x"]["mac_based_authentication"] = {
                                  "enabled": str_to_bool(port_profile["dot1x"]["macBasedAuthentication"]["enable"].strip()),
                                  "always": str_to_bool(port_profile["dot1x"]["macBasedAuthentication"].get("always", "").strip()),
                                  "host_mode_common": str_to_bool(port_profile["dot1x"]["macBasedAuthentication"].get("hostModeCommon", "").strip())
                              }
                      # Timeout
                      if port_profile["dot1x"].get("timeouts"):
                          tmp_port_profile["dot1x"]["timeout"] = {}
                          # Idle timeout
                          if port_profile["dot1x"]["timeouts"].get("idleHost"):
                              tmp_port_profile["dot1x"]["timeout"]["idle_host"] = port_profile["dot1x"]["timeouts"]["idleHost"]
                          # Quiet period
                          if port_profile["dot1x"]["timeouts"].get("quietPeriod"):
                              tmp_port_profile["dot1x"]["timeout"]["quiet_period"] = port_profile["dot1x"]["timeouts"]["quietPeriod"]
                          # Reauth period
                          if port_profile["dot1x"]["timeouts"].get("reauthenticationPeriod", "").strip() and tmp_port_profile["dot1x"].get("reauthentication"):
                              tmp_port_profile["dot1x"]["timeout"]["reauth_period"] = port_profile["dot1x"]["timeouts"]["reauthenticationPeriod"]
                          # Reauth Timeout Ignore
                          if str_to_bool(port_profile["dot1x"]["timeouts"].get("reauthenticationTimeoutIgnore", "").strip()) and tmp_port_profile["dot1x"].get("reauthentication"):
                              tmp_port_profile["dot1x"]["timeout"]["reauth_timeout_ignore"] = str_to_bool(port_profile["dot1x"]["timeouts"]["reauthenticationTimeoutIgnore"])
                          # Tx period
                          if port_profile["dot1x"]["timeouts"].get("txPeriod"):
                              tmp_port_profile["dot1x"]["timeout"]["tx_period"] = port_profile["dot1x"]["timeouts"]["txPeriod"]
                      # Reauthorization Request Limit
                      if port_profile["dot1x"].get("reauthorizationRequestLimit"):
                          tmp_port_profile["dot1x"]["reauthorization_request_limit"] = port_profile["dot1x"]["reauthorizationRequestLimit"]

                  # POE
                  if port_profile.get("poe"):
                      tmp_port_profile["poe"] = {}
                      if port_profile["poe"].get("priority"):
                          tmp_port_profile["poe"]["priority"] = port_profile["poe"]["priority"]
                      if port_profile["poe"].get("rebootAction"):
                          tmp_port_profile["poe"]["reboot"] = {
                            "action": port_profile["poe"]["rebootAction"]
                          }
                      if port_profile["poe"].get("linkDownAction"):
                          tmp_port_profile["poe"]["link_down"] = {
                            "action": port_profile["poe"]["linkDownAction"]
                          }
                      if port_profile["poe"].get("shutdownAction"):
                          tmp_port_profile["poe"]["shutdown"] = {
                            "action": port_profile["poe"]["shutdownAction"]
                          }
                  # Storm Control
                  if port_profile.get("stormControl"):
                      tmp_port_profile["storm_control"] = {}
                      # all
                      if port_profile["stormControl"]["all"].get("level", "").strip():
                          tmp_port_profile["storm_control"]["all"] = {
                              "level": port_profile["stormControl"]["all"]["level"],
                              "unit":  port_profile["stormControl"]["all"].get("unit", "percent")
                          }
                      # broadcast
                      if port_profile["stormControl"]["broadcast"].get("level", "").strip():
                          tmp_port_profile["storm_control"]["broadcast"] = {
                              "level": port_profile["stormControl"]["broadcast"]["level"],
                              "unit":  port_profile["stormControl"]["broadcast"].get("unit", "percent")
                          }
                      # multicast
                      if port_profile["stormControl"]["multicast"].get("level", "").strip():
                          tmp_port_profile["storm_control"]["multicast"] = {
                              "level": port_profile["stormControl"]["multicast"]["level"],
                              "unit":  port_profile["stormControl"]["multicast"].get("unit", "percent")
                          }
                      # unknown_unicast
                      if port_profile["stormControl"]["unknownUnicast"].get("level", "").strip():
                          tmp_port_profile["storm_control"]["unknown_unicast"] = {
                              "level": port_profile["stormControl"]["unknownUnicast"]["level"],
                              "unit":  port_profile["stormControl"]["unknownUnicast"].get("unit", "percent")
                          }
                  # EOS CLI
                  if port_profile.get("eosCli"):
                      tmp_port_profile["raw_eos_cli"] = port_profile["eosCli"]
                  # port-channel
                  if port_profile.get("portChannel"):
                      port_channel = {}
                      # membership
                      port_channel["member"] = port_profile["portChannel"].get("portChannel")
                      if port_channel["member"]:
                          # mode
                          port_channel["mode"] = port_profile["portChannel"].get("portChannelMode")
                          # channel id
                          # port_channel["channel_id"] = port_profile["portChannel"]["portChannelId"]
                          # enabled
                          port_channel["enabled"] = port_profile["portChannel"]["portChannelEnabled"]
                          # lacp fallback
                          if port_profile["portChannel"].get("lacpFallback"):
                              if port_profile["portChannel"]["lacpFallback"].get("lacpFallbackMode", ""):
                                  port_channel["lacp_fallback"] = {
                                      "mode": port_profile["portChannel"]["lacpFallback"]["lacpFallbackMode"],
                                      "timeout": port_profile["portChannel"]["lacpFallback"].get("timeout")
                                  }
                          # mlag
                          port_channel["mlag"] = port_profile["portChannel"].get("mlag")
                          # EOS CLI
                          if port_profile["portChannel"].get("eosCli"):
                              port_channel["raw_eos_cli"] = port_profile["portChannel"]["eosCli"]

                      tmp_port_profile["port_channel"] = port_channel

                  avd_port_profiles.append(tmp_port_profile)

              return avd_port_profiles


          def merge_port_profiles(port_profiles):
              """
              Return list of merged "port_profiles" where "parent_profile" has been applied.
              """
              merged_port_profiles = []

              for port_profile in port_profiles:
                  if "parent_profile" in port_profile:
                      parent_profile = get_item(port_profiles, "profile", port_profile["parent_profile"], default={})
                      # Notice reusing the same variable, but assigning a new instance with the merged port_profile
                      # port_profile = merge(parent_profile, port_profile, list_merge="replace", destructive_merge=False)
                      port_profile = merge(parent_profile, port_profile)
                      if "parent_profile" in port_profile:
                          port_profile.pop("parent_profile")
                  merged_port_profiles.append(port_profile)

              return merged_port_profiles


          def get_network_ports(network_ports):
              '''
              Returns list of network_ports in AVD connected endpoints data model format
              '''
              if not network_ports:
                  return []
              avd_network_ports = []
              for network_port in network_ports:
                  # ctx.info(f"Getting info for {network_port['name']}")
                  tmp_network_port = {"name": network_port["name"]}
                  tmp_network_port["switch_ports"] = [network_port["name"]]
                  # port profile
                  if network_port.get("portProfile", "").strip():
                      tmp_network_port["profile"] = network_port["portProfile"]
                  # Description
                  if network_port.get("description", "").strip():
                      tmp_network_port["description"] = network_port["description"]
                  # Enable/Disable
                  if network_port.get("enabled", "").strip():
                      tmp_network_port["enabled"] = str_to_bool(network_port["enabled"])
                  # Speed
                  if network_port.get("speed", "").strip():
                      tmp_network_port["speed"] = network_port["speed"]
                  # Mode
                  if network_port.get("mode", "").strip():
                      tmp_network_port["mode"] = network_port["mode"]
                  # MTU
                  if network_port.get("mtu", ""):
                      tmp_network_port["mtu"] = network_port["mtu"]
                  # Phone trunk
                  if network_port.get("phone"):
                      if network_port["mode"] in ["trunk phone"] and network_port["phone"].get("trunk"):
                          tmp_network_port["phone_trunk"] = network_port["phone"]["trunk"]
                  # vlans
                  if network_port.get("vlans"):
                      # Native VLAN
                      if network_port["mode"] in ["trunk", "trunk phone"] and network_port["vlans"].get("nativeVlan"):
                          tmp_network_port["native_vlan"] = network_port["vlans"]["nativeVlan"]
                      # Phone VLAN
                      if network_port["mode"] in ["trunk phone"] and network_port["vlans"].get("phoneVlan"):
                          tmp_network_port["phone_vlan"] = network_port["vlans"]["phoneVlan"]
                      # VLANs
                      if network_port["vlans"].get("vlans", "").strip():
                          tmp_network_port["vlans"] = network_port["vlans"]["vlans"]
                  # spanning tree
                  if network_port.get("spanningTree"):
                      # Spanning-Tree portfast
                      if network_port["spanningTree"].get("portfast", "").strip():
                          tmp_network_port["spanning_tree_portfast"] = network_port["spanningTree"]["portfast"]
                      # Spanning-Tree Bpdu Filter
                      if network_port["spanningTree"].get("bpduFilter", "").strip():
                          tmp_network_port["spanning_tree_bpdufilter"] = network_port["spanningTree"]["bpduFilter"]
                      # Spanning-Tree Bpdu Guard
                      if network_port["spanningTree"].get("bpduGuard", "").strip():
                          tmp_network_port["spanning_tree_bpduguard"] = network_port["spanningTree"]["bpduGuard"]
                  # flow control
                  if network_port.get("flowControl"):
                  # Flow control received
                      if network_port["flowControl"].get("received", "").strip():
                          tmp_network_port["flow_control"] = {
                              "received": network_port["flowControl"]["received"]
                          }
                  # QOS profile
                  if network_port.get("qosProfile", "").strip():
                      tmp_network_port["qos_profile"] = network_port["qosProfile"]
                  # PTP
                  if network_port.get("ptp"):
                      tmp_network_port["ptp"] = {
                          "enabled": str_to_bool(network_port["ptp"]["enabled"].strip()),
                          "profile": network_port["ptp"]["profile"],
                          "endpoint_role": network_port["ptp"]["endpointRole"]
                      }
                      # Need to set the below to null so we remove unconfigured interfaces from output
                      if not tmp_network_port["ptp"]["enabled"]:
                          tmp_network_port["ptp"]["profile"] = None
                          tmp_network_port["ptp"]["endpoint_role"] = None
                  # Dot1x
                  if network_port.get("dot1x"):
                      tmp_network_port["dot1x"] = {
                          "enabled": str_to_bool(network_port["dot1x"]["enabled"].strip())
                      }
                      # Port control
                      if network_port["dot1x"].get("portControl", "").strip():
                          tmp_network_port["dot1x"]["port_control"] = network_port["dot1x"]["portControl"]
                      # Port Control Force Authorized Phone
                      if str_to_bool(network_port["dot1x"].get("portControlForceAuthorizedPhone", "").strip()) \
                              and tmp_network_port["dot1x"].get("port_control"):
                          tmp_network_port["dot1x"]["port_control_force_authorized_phone"] = str_to_bool(network_port["dot1x"]["portControlForceAuthorizedPhone"])
                      # Reauthentication
                      if str_to_bool(network_port["dot1x"].get("reauthentication", "").strip()):
                          tmp_network_port["dot1x"]["reauthentication"] = str_to_bool(network_port["dot1x"]["reauthentication"])
                      # PAE
                      if network_port["dot1x"]["pae"].get("mode", "").strip():
                          tmp_network_port["dot1x"]["pae"] = {
                              "mode": network_port["dot1x"]["pae"]["mode"]
                          }
                      # authentication failure
                      if network_port["dot1x"].get("authenticationFailure"):
                          # Authentication Failure action
                          if network_port["dot1x"]["authenticationFailure"].get("action", "").strip():
                              tmp_network_port["dot1x"]["authentication_failure"] = {
                                  "action": network_port["dot1x"]["authenticationFailure"]["action"].lower()
                              }
                          # Authentication Failure vlan
                          if network_port["dot1x"]["authenticationFailure"].get("allowVlan") \
                                  and tmp_network_port["dot1x"].get("authentication_failure"):
                              tmp_network_port["dot1x"]["authentication_failure"]["allow_vlan"] = network_port["dot1x"]["authenticationFailure"]["allowVlan"]
                      # Host Mode
                      if network_port["dot1x"].get("hostMode"):
                          if network_port["dot1x"]["hostMode"].get("mode", "").strip():
                              tmp_network_port["dot1x"]["host_mode"] = {
                                  "mode": network_port["dot1x"]["hostMode"]["mode"]
                              }
                          # multiHostAuthenticated
                          if str_to_bool(network_port["dot1x"]["hostMode"].get("multiHostAuthenticated", "").strip()) \
                                  and network_port["dot1x"]["hostMode"].get("mode", "") in ["multi-host"]:
                              tmp_network_port["dot1x"]["host_mode"]["multi_host_authenticated"] = str_to_bool(network_port["dot1x"]["hostMode"]["multiHostAuthenticated"])
                      # MBA
                      if network_port["dot1x"].get("macBasedAuthentication"):
                          if str_to_bool(network_port["dot1x"]["macBasedAuthentication"].get("enable", "").strip()):
                              tmp_network_port["dot1x"]["mac_based_authentication"] = {
                                  "enabled": str_to_bool(network_port["dot1x"]["macBasedAuthentication"]["enable"].strip()),
                                  "always": str_to_bool(network_port["dot1x"]["macBasedAuthentication"].get("always", "").strip()),
                                  "host_mode_common": str_to_bool(network_port["dot1x"]["macBasedAuthentication"].get("hostModeCommon", "").strip())
                              }
                      # Timeout
                      if network_port["dot1x"].get("timeouts"):
                          tmp_network_port["dot1x"]["timeout"] = {}
                          # Idle timeout
                          if network_port["dot1x"]["timeouts"].get("idleHost"):
                              tmp_network_port["dot1x"]["timeout"]["idle_host"] = network_port["dot1x"]["timeouts"]["idleHost"]
                          # Quiet period
                          if network_port["dot1x"]["timeouts"].get("quietPeriod"):
                              tmp_network_port["dot1x"]["timeout"]["quiet_period"] = network_port["dot1x"]["timeouts"]["quietPeriod"]
                          # Reauth period
                          if network_port["dot1x"]["timeouts"].get("reauthenticationPeriod", "").strip() and tmp_network_port["dot1x"].get("reauthentication"):
                              tmp_network_port["dot1x"]["timeout"]["reauth_period"] = network_port["dot1x"]["timeouts"]["reauthenticationPeriod"]
                          # Reauth Timeout Ignore
                          if str_to_bool(network_port["dot1x"]["timeouts"].get("reauthenticationTimeoutIgnore", "").strip()) and tmp_network_port["dot1x"].get("reauthentication"):
                              tmp_network_port["dot1x"]["timeout"]["reauth_timeout_ignore"] = str_to_bool(network_port["dot1x"]["timeouts"]["reauthenticationTimeoutIgnore"])
                          # Tx period
                          if network_port["dot1x"]["timeouts"].get("txPeriod"):
                              tmp_network_port["dot1x"]["timeout"]["tx_period"] = network_port["dot1x"]["timeouts"]["txPeriod"]
                      # Reauthorization Request Limit
                      if network_port["dot1x"].get("reauthorizationRequestLimit"):
                          tmp_network_port["dot1x"]["reauthorization_request_limit"] = network_port["dot1x"]["reauthorizationRequestLimit"]
                  # POE
                  if network_port.get("poe"):
                      tmp_network_port["poe"] = {}
                      if network_port["poe"].get("priority"):
                          tmp_network_port["poe"]["priority"] = network_port["poe"]["priority"]
                      if network_port["poe"].get("rebootAction"):
                          tmp_network_port["poe"]["reboot"] = {
                            "action": network_port["poe"]["rebootAction"]
                          }
                      if network_port["poe"].get("linkDownAction"):
                          tmp_network_port["poe"]["link_down"] = {
                            "action": network_port["poe"]["linkDownAction"]
                          }
                      if network_port["poe"].get("shutdownAction"):
                          tmp_network_port["poe"]["shutdown"] = {
                            "action": network_port["poe"]["shutdownAction"]
                          }
                  # Storm Control
                  if network_port.get("stormControl"):
                      tmp_network_port["storm_control"] = {}
                      # all
                      if network_port["stormControl"]["all"].get("level", "").strip():
                          tmp_network_port["storm_control"]["all"] = {
                              "level": network_port["stormControl"]["all"]["level"],
                              "unit":  network_port["stormControl"]["all"].get("unit", "percent")
                          }
                      # broadcast
                      if network_port["stormControl"]["broadcast"].get("level", "").strip():
                          tmp_network_port["storm_control"]["broadcast"] = {
                              "level": network_port["stormControl"]["broadcast"]["level"],
                              "unit":  network_port["stormControl"]["broadcast"].get("unit", "percent")
                          }
                      # multicast
                      if network_port["stormControl"]["multicast"].get("level", "").strip():
                          tmp_network_port["storm_control"]["multicast"] = {
                              "level": network_port["stormControl"]["multicast"]["level"],
                              "unit":  network_port["stormControl"]["multicast"].get("unit", "percent")
                          }
                      # unknown_unicast
                      if network_port["stormControl"]["unknownUnicast"].get("level", "").strip():
                          tmp_network_port["storm_control"]["unknown_unicast"] = {
                              "level": network_port["stormControl"]["unknownUnicast"]["level"],
                              "unit":  network_port["stormControl"]["unknownUnicast"].get("unit", "percent")
                          }
                  # EOS CLI
                  if network_port.get("eosCli"):
                      tmp_network_port["raw_eos_cli"] = network_port["eosCli"]
                  # port-channel
                  if network_port.get("portChannel"):
                      port_channel = {}
                      # membership
                      port_channel["member"] = network_port["portChannel"].get("portChannel")
                      if port_channel["member"]:
                          # mode
                          port_channel["mode"] = network_port["portChannel"].get("portChannelMode")
                          # channel id
                          port_channel["channel_id"] = network_port["portChannel"].get("portChannelId")
                          # enabled
                          port_channel["enabled"] = network_port["portChannel"].get("portChannelEnabled")
                          # lacp fallback
                          if network_port["portChannel"].get("lacpFallback"):
                              if network_port["portChannel"]["lacpFallback"].get("lacpFallbackMode", ""):
                                  port_channel["lacp_fallback"] = {
                                      "mode": network_port["portChannel"]["lacpFallback"]["lacpFallbackMode"],
                                      "timeout": network_port["portChannel"]["lacpFallback"].get("timeout")
                                  }
                          # mlag
                          port_channel["mlag"] = network_port["portChannel"].get("mlag")
                          # EOS CLI
                          if network_port["portChannel"].get("eosCli"):
                              port_channel["raw_eos_cli"] = network_port["portChannel"]["eosCli"]

                      tmp_network_port["port_channel"] = port_channel

                  avd_network_ports.append(tmp_network_port)

              return avd_network_ports


          def merge_network_ports(network_ports, port_profiles):
              """
              Return list of merged "network_ports" where "port_profile" has been applied.
              """
              merged_network_ports = []

              for network_port in network_ports:
                  if "profile" in network_port:
                      port_profile = get_item(port_profiles, "profile", network_port["profile"], default={})
                      # Notice reusing the same variable, but assigning a new instance with the merged port_profile
                      # port_profile = merge(parent_profile, port_profile, list_merge="replace", destructive_merge=False)
                      network_port = merge(port_profile, network_port)
                      if "port_profile" in network_port:
                          network_port.pop("port_profile")
                  merged_network_ports.append(network_port)

              return merged_network_ports


          def get_adapter_dot1x(adapter: dict) -> Union[dict, None]:
              """
              Return dot1x for one adapter
              """
              if not get(adapter, "dot1x.enabled"):
                  return None
              adapter.get("dot1x").pop("enabled")

              return adapter.get("dot1x")

          def get_adapter_ptp(adapter: dict) -> Union[dict, None]:
              """
              Return ptp for one adapter
              """
              if get(adapter, "ptp.enabled") is not True:
                  return None

              ptp_config = {}

              # Apply PTP profile config
              ptp_profile_name = get(adapter, "ptp.profile", default=ptp_profile)
              if ptp_profile_name:
                  ptp_config.update(get_item(ptp_profiles, "profile", ptp_profile_name, default={}))

              ptp_config["enable"] = True

              if get(adapter, "ptp.endpoint_role") != "bmca":
                  ptp_config["role"] = "master"

              ptp_config.pop("profile", None)

              return ptp_config


          def platform_settings_feature_support_interface_storm_control() -> bool:
              return get(my_switch_facts, "platform_settings.feature_support.interface_storm_control", default=True) is True


          def get_adapter_storm_control(adapter: dict) -> Union[dict, None]:
              """
              Return storm_control for one adapter
              """
              if platform_settings_feature_support_interface_storm_control():
                  return get(adapter, "storm_control")

              return None


          def platform_settings_feature_support_poe() -> bool:
              return get(my_switch_facts, "platform_settings.feature_support.poe", default=False) is True


          def get_adapter_poe(adapter: dict) -> Union[dict, None]:
              """
              Return storm_control for one adapter
              """
              adapter_poe = get(adapter, "poe")
              if platform_settings_feature_support_poe() and adapter_poe != {}:
                  return adapter_poe

              return None


          def platform_settings_feature_support_phone() -> bool:
              return get(my_switch_facts, "platform_settings.feature_support.phone", default=False) is True


          def get_adapter_phone(adapter: dict) -> Union[dict, None]:
              """
              Return phone for one adapter
              """
              # Check to see if feature is supported
              if platform_settings_feature_support_phone() is False:
                  if adapter.get("phone_vlan"):
                      ctx.warning(f"{adapter['switch_ports'][0]} is configured with `phone vlan {adapter['phone_vlan']}` but this device model does not support this feature.")
                  if adapter.get("phone_trunk"):
                      ctx.warning(f"{adapter['switch_ports'][0]} is configured with `phone trunk {adapter['phone_trunk']}` but this device model does not support this feature.")
                  return

              phone_config = {}
              if adapter.get("phone_vlan"):
                  phone_config["vlan"] = adapter["phone_vlan"]

              if adapter.get("phone_trunk"):
                  phone_config["trunk"] = adapter["phone_trunk"]

              if phone_config != {}:
                  return phone_config

              return None


          def get_adapter_mode(adapter: dict) -> Union[dict, None]:
              """
              Return interface mode for one adapter
              """
              if adapter.get("mode") == "trunk phone" and platform_settings_feature_support_phone() is False:
                  ctx.warning(f"{adapter['switch_ports'][0]} is configured with mode {adapter['mode']} but this device model does not support this feature.")
                  return None

              return adapter.get("mode")


          def get_ethernet_interface_cfg(adapter, node_index=None, connected_endpoint=None):
              """
              Return structured_config for one ethernet_interface
              """
              # peer = connected_endpoint["name"]
              # endpoint_ports: list = default(
              #     adapter.get("endpoint_ports"),
              #     adapter.get("server_ports"),
              #     [],
              # )
              # peer_interface = endpoint_ports[node_index] if node_index < len(endpoint_ports) else None
              default_channel_group_id = int("".join(re.findall(r"\d", adapter["switch_ports"][0])))
              channel_group_id = get(adapter, "port_channel.channel_id", default=default_channel_group_id)
              # short_esi = self._get_short_esi(adapter, channel_group_id)

              # Common ethernet_interface settings
              # TODO: avoid generating redundant structured config for port-channel members
              ethernet_interface = {
                  # "peer": peer,
                  # "peer_interface": peer_interface,
                  "peer_type": connected_endpoint["type"],
                  "port_profile": adapter.get("profile"),
                  "description": adapter.get("description"),
                  "speed": adapter.get("speed"),
                  "mtu": adapter.get("mtu"),
                  "l2_mtu": adapter.get("l2_mtu"),
                  "type": "switched",
                  "shutdown": not adapter.get("enabled", True),
                  "mode": get_adapter_mode(adapter),
                  "vlans": adapter.get("vlans"),
                  # "trunk_groups": self._get_adapter_trunk_groups(adapter, connected_endpoint),
                  "native_vlan_tag": adapter.get("native_vlan_tag"),
                  "native_vlan": adapter.get("native_vlan"),
                  "phone": get_adapter_phone(adapter),
                  "spanning_tree_portfast": adapter.get("spanning_tree_portfast"),
                  "spanning_tree_bpdufilter": adapter.get("spanning_tree_bpdufilter"),
                  "spanning_tree_bpduguard": adapter.get("spanning_tree_bpduguard"),
                  "storm_control": get_adapter_storm_control(adapter),
                  "service_profile": adapter.get("qos_profile"),
                  "dot1x": get_adapter_dot1x(adapter),
                  "ptp": get_adapter_ptp(adapter),
                  "poe": get_adapter_poe(adapter),
                  "eos_cli": adapter.get("raw_eos_cli"),
                  "struct_cfg": adapter.get("structured_config"),
              }
              # Port-channel member
              port_channel_mode = get(adapter, "port_channel.mode")
              if port_channel_mode:
                  ethernet_interface["channel_group"] = {
                      "id": channel_group_id,
                      "mode": port_channel_mode,
                  }
                  # if get(adapter, "port_channel.lacp_fallback.mode") == "static":
                  #     ethernet_interface["lacp_port_priority"] = 8192 if node_index == 0 else 32768

              # # NOT a port-channel member
              # else:
              #     ethernet_interface.update(
              #         {
              #             "evpn_ethernet_segment": self._get_adapter_evpn_ethernet_segment_cfg(
              #                 adapter, short_esi, node_index, connected_endpoint, "auto", "single-active"
              #             ),
              #             "link_tracking_groups": self._get_adapter_link_tracking_groups(adapter),
              #         }
              #     )

              # More common ethernet_interface settings
              if (flowcontrol_received := get(adapter, "flowcontrol.received")) is not None:
                  ethernet_interface["flowcontrol"] = {"received": flowcontrol_received}

              return strip_null_from_data(ethernet_interface, strip_values_tuple=(None, "", {}, []))


          def ethernet_interfaces(network_ports) -> Union[dict, None]:
              """
              Return structured config for ethernet_interfaces
              """
              ethernet_interfaces = {}

              for network_port in network_ports:
                  connected_endpoint = {
                      "name": network_port.get("description"),
                      "type": "network_port",
                  }
                  for ethernet_interface_name in range_expand(network_port["switch_ports"]):
                      # make network_port copy
                      network_port_copy = deepcopy(network_port)
                      # Override switches and switch_ports to only render for a single interface
                      tmp_network_port = ChainMap(
                          {
                              "switch_ports": [ethernet_interface_name]
                              # "switches": [my_switch_facts["hostname"]],
                          },
                          network_port_copy,
                      )
                      ethernet_interface = get_ethernet_interface_cfg(tmp_network_port, 0, connected_endpoint)
                      # Only add the interface to the ethernet_interfaces dictionary if it does not contain the default interface config
                      if ethernet_interface != {'peer_type': 'network_port', 'type': 'switched', 'shutdown': False}:
                          ethernet_interfaces[ethernet_interface_name] = ethernet_interface

              if ethernet_interfaces:
                  return ethernet_interfaces

              return []


          def add_if_not_duplicate(candidate_port_channel_config, port_channel_interfaces) -> None:
              """
              This function assumes that port_channel_interfaces list DO NOT contain duplicate port-channel names.
              It CAN modify the input variable port_channel_interfaces by appending candidate_port_channel_config to it.
              This check function does two things:
                  1. Check if the candidate_port_channel_config["name"] is already present in port_channel_interfaces computed so far
                  2. if 1 is True, check if the candidate_port_channel_config object is exactly the same as the existing one in port_channel_interfaces,
              If 1 is True and 2 is False, then the function raise an AristaAvdError because a duplicate port-channel name would be generating two
              different structured configurations and so there is a conflict
              If 1 and 2 are True, it means the candidate_port_channel_config is the same as the existing configuration already generated so no
              action is needed.
              If 1 is False for every port-channel in the port_channel_interfaces, it is a new port-channel and it is appended to the list.
              """
              matching_port_channel_config = get_item(port_channel_interfaces, "name", candidate_port_channel_config["name"])
              if matching_port_channel_config is None:
                  # No port_channel_interface found with the same name in port_channel_interfaces
                  # append to the list and return
                  port_channel_interfaces.append(candidate_port_channel_config)
                  return

              if matching_port_channel_config != candidate_port_channel_config:
                  # Found duplicate name with different generated configs
                  raise Exception(
                      f"Duplicate port-channel name {port_channel_interfaces['name']} with conflicting configurations found while generating port-channels for"
                      " connected-endpoints or network-ports"
                  )

              # Duplicate name with same configuration - nothing to do
              return


          def get_port_channel_interface_cfg(adapter: dict, port_channel_interface_name: str, channel_group_id: int, connected_endpoint: dict) -> dict:
              """
              Return structured_config for one port_channel_interface
              """

              peer = connected_endpoint["name"]
              adapter_port_channel_description = get(adapter, "port_channel.description")
              port_channel_type = "routed" if get(adapter, "port_channel.subinterfaces") else "switched"
              port_channel_mode = get(adapter, "port_channel.mode")
              node_index = my_switch_facts.get("node_id", 0) # adapter["switches"].index(self._hostname)

              # Common port_channel_interface settings
              port_channel_interface = {
                  "name": port_channel_interface_name,
                  "description": adapter.get("description"),  # self.avd_interface_descriptions.connected_endpoints_port_channel_interfaces(peer, adapter_port_channel_description),
                  "type": port_channel_type,
                  "shutdown": not get(adapter, "port_channel.enabled", default=True),
                  "mtu": adapter.get("mtu"),
                  "service_profile": adapter.get("qos_profile"),
                  # "link_tracking_groups": get_adapter_link_tracking_groups(adapter),
                  "eos_cli": get(adapter, "port_channel.raw_eos_cli"),
                  "struct_cfg": get(adapter, "port_channel.structured_config"),
              }

              # Only switches interfaces
              if port_channel_type == "switched":
                  port_channel_interface.update(
                      {
                          "mode": adapter.get("mode"),
                          "l2_mtu": adapter.get("l2_mtu"),
                          "vlans": adapter.get("vlans"),
                          # "trunk_groups": get_adapter_trunk_groups(adapter, connected_endpoint),
                          "native_vlan_tag": adapter.get("native_vlan_tag"),
                          "native_vlan": adapter.get("native_vlan"),
                          "spanning_tree_portfast": adapter.get("spanning_tree_portfast"),
                          "spanning_tree_bpdufilter": adapter.get("spanning_tree_bpdufilter"),
                          "spanning_tree_bpduguard": adapter.get("spanning_tree_bpduguard"),
                          "storm_control": get_adapter_storm_control(adapter),
                          "phone": get_adapter_phone(adapter),
                          # "dot1x": get_adapter_dot1x(adapter),
                          "ptp": get_adapter_ptp(adapter)
                      }
                  )

              # EVPN A/A
              # if (short_esi := self._get_short_esi(adapter, channel_group_id)) is not None:
              #     port_channel_interface["evpn_ethernet_segment"] = get_adapter_evpn_ethernet_segment_cfg(adapter, short_esi, node_index, connected_endpoint)
              #     if port_channel_mode == "active":
              #         port_channel_interface["lacp_id"] = generate_lacp_id(short_esi)

              # Set MLAG ID on port-channel if connection is multi-homed and this switch is running MLAG
              if get(adapter, "port_channel.mlag"):
                  port_channel_interface["mlag"] = channel_group_id

              # LACP Fallback
              lacp_fallback_mode = get(adapter, "port_channel.lacp_fallback.mode")
              if port_channel_mode in ["active", "passive"] and lacp_fallback_mode and lacp_fallback_mode == "static":
                  port_channel_interface.update(
                      {
                          "lacp_fallback_mode": lacp_fallback_mode,
                          "lacp_fallback_timeout": get(adapter, "port_channel.lacp_fallback.timeout", default=90),
                      }
                  )

              return strip_null_from_data(port_channel_interface)


          def port_channel_interfaces(network_ports) -> Union[dict, None]:
              """
              Return structured config for ethernet_interfaces
              """
              port_channel_interfaces = []

              for network_port in network_ports:
                  if not get(network_port, "port_channel.member"):
                      continue
                  connected_endpoint = {
                      "name": network_port.get("description"),
                      "type": "network_port",
                  }
                  for ethernet_interface_name in range_expand(network_port["switch_ports"]):
                      # Override switches and switch_ports to only render for a single interface
                      tmp_network_port = ChainMap(
                          {
                              "switch_ports": [ethernet_interface_name]
                              # "switches": [my_switch_facts["hostname"]],
                          },
                          network_port,
                      )

                      default_channel_group_id = int("".join(re.findall(r"\d", ethernet_interface_name)))
                      channel_group_id = get(tmp_network_port, "port_channel.channel_id", default=default_channel_group_id)
                      port_channel_interface_name = f"Port-Channel{channel_group_id}"
                      port_channel_config = get_port_channel_interface_cfg(tmp_network_port, port_channel_interface_name, channel_group_id, connected_endpoint)
                      # ctx.info(f"{port_channel_interface_name} Config: {port_channel_config}")
                      add_if_not_duplicate(port_channel_config, port_channel_interfaces)

              if port_channel_interfaces:
                  return port_channel_interfaces

              return []

          # Check devices input is not None
          if not campus:
              return

          my_device = ctx.getDevice()
          workspace_id = ctx.studio.workspaceId

          # Attempt to resolve for switch interfaces
          my_campus_resolver = campus.resolve(device=my_device.id)
          # ctx.info(f"{my_campus_resolver}")
          if not my_campus_resolver or not my_campus_resolver.get("campusPod"):
              return
          my_campus_pod_resolver = my_campus_resolver["campusPod"].resolve(device=my_device.id)
          # ctx.info(f"{my_campus_pod_resolver}")
          if not my_campus_pod_resolver or not my_campus_pod_resolver.get("accessPod"):
              return
          my_access_pod_resolver = my_campus_pod_resolver["accessPod"].resolve(device=my_device.id)
          # ctx.info(f"{my_access_pod_resolver}")
          if not my_access_pod_resolver or not my_access_pod_resolver.get("interfaces"):
              return
          studios_interface_inputs = my_access_pod_resolver["interfaces"]
          if not studios_interface_inputs:
              return
          # ctx.info(f"{studios_interface_inputs}")

          # get my_switch_facts from tags
          my_switch_facts = get_switch_basics_from_tags(my_device.id)

          # ctx.info(f"My Switch Facts: {my_switch_facts}")

          # Convert port profiles to eos_designs AVD data model
          port_profiles = get_port_profiles(portProfiles)
          # ctx.info(f"Port Profiles Pre-Parent Profile Applied: {port_profiles}")

          # Merge port profiles
          port_profiles = merge_port_profiles(port_profiles)
          # ctx.info(f"Port Profiles Post-Parent Profile Applied: {port_profiles}")

          # get my_switch_facts network_ports
          network_ports = []

          for interface_name in my_device._interfaces.keys():
              resolved_interface = studios_interface_inputs.resolve(interface_name, device=my_device.id)
              adapter = resolved_interface["adapterDetails"]
              if adapter and "Ethernet" in interface_name:
                  tmp_adapter = adapter
                  tmp_adapter["name"] = interface_name
                  network_ports.append(tmp_adapter)


          # Convert network ports to eos_designs AVD data model
          network_ports = get_network_ports(network_ports)
          # ctx.info(f"Network Ports Pre-Profile Applied: {network_ports}")

          # Apply port profiles to network ports
          network_ports = merge_network_ports(network_ports, port_profiles)
          # ctx.info(f"Network Ports Post-Profile Applied: {network_ports}")

          # Get structured config for ethernet_interfaces
          my_switch_ethernet_interfaces = ethernet_interfaces(network_ports)
          # Get structured config for port_channel_interfaces
          my_switch_port_channel_interfaces = port_channel_interfaces(network_ports)

          config = {
              "ethernet_interfaces": convert_dicts(my_switch_ethernet_interfaces),
              "port_channel_interfaces": convert_dicts(my_switch_port_channel_interfaces)
          }

          # ctx.info(f"Structured Config: {config}")
          %>
          ## port-channel interfaces
          % for port_channel_interface in natural_sort(config.get("port_channel_interfaces"), sort_key="name"):
          interface ${ port_channel_interface["name"] }
          %     if port_channel_interface.get("description"):
             description ${ port_channel_interface["description"] }
          %     endif
          %     if port_channel_interface.get("shutdown", False) is True:
             shutdown
          %     elif port_channel_interface.get("shutdown", True) is False:
             no shutdown
          %     endif
          %     if port_channel_interface.get("mtu"):
             mtu ${ port_channel_interface["mtu"] }
          %     endif
          %     if port_channel_interface.get("mode", "") in ['access', 'dot1q-tunnel']:
          %         if port_channel_interface.get("vlans"):
             switchport access vlan ${ port_channel_interface["vlans"] }
          %         endif
          %     endif
          %     if port_channel_interface.get("mode", "") in ['trunk', 'trunk phone']:
          %         if port_channel_interface.get("native_vlan_tag", False) is True:
             switchport trunk native vlan tag
          %         elif port_channel_interface.get("native_vlan"):
             switchport trunk native vlan ${ port_channel_interface["native_vlan"] }
          %         endif
          %     endif
          %     if port_channel_interface.get("phone", {}).get("vlan"):
             switchport phone vlan ${ port_channel_interface["phone"]["vlan"] }
          %     endif
          %     if port_channel_interface.get("phone", {}).get("trunk"):
             switchport phone trunk ${ port_channel_interface["phone"]["trunk"] }
          %     endif
          %     if port_channel_interface.get("mode") in ['trunk', 'trunk phone']:
          %         if port_channel_interface.get("vlans"):
             switchport trunk allowed vlan ${ port_channel_interface["vlans"] }
          %         endif
          %     endif
          %     if port_channel_interface.get("mode"):
             switchport mode ${ port_channel_interface["mode"] }
          %     endif
          %     if port_channel_interface.get("type") == 'routed':
             no switchport
          %     else:
             switchport
          %     endif
          %     if port_channel_interface.get("lacp_id"):
             lacp system-id ${ port_channel_interface["lacp_id"] }
          %     endif
          %     if port_channel_interface.get("mlag"):
             mlag ${ port_channel_interface["mlag"] }
          %     endif
          %     if port_channel_interface.get("lacp_fallback_timeout"):
             port-channel lacp fallback timeout ${ port_channel_interface["lacp_fallback_timeout"] }
          %     endif
          %     if port_channel_interface.get("lacp_fallback_mode"):
             port-channel lacp fallback ${ port_channel_interface["lacp_fallback_mode"] }
          %     endif
          %     for section in natural_sort(port_channel_interface.get("storm_control")):
          %         if port_channel_interface["storm_control"][section].get("level"):
          %             if port_channel_interface["storm_control"][section].get("unit", "") == 'pps':
             storm-control ${ section.replace("_", "-") } level pps ${ port_channel_interface["storm_control"][section]["level"] }
          %             else:
             storm-control ${ section.replace("_", "-") } level ${ port_channel_interface["storm_control"][section]["level"] }
          %             endif
          %         endif
          %     endfor
          %     if port_channel_interface.get("ptp"):
          %         if port_channel_interface["ptp"].get("enable", False) is True:
             ptp enable
          %         endif
          %         if port_channel_interface["ptp"].get("sync_message", {}).get("interval") is not None:
             ptp sync-message interval ${ port_channel_interface["ptp"]["sync_message"]["interval"] }
          %         endif
          %         if port_channel_interface["ptp"].get("delay_mechanism") is not None:
             ptp delay-mechanism ${ port_channel_interface["ptp"]["delay_mechanism"] }
          %         endif
          %         if port_channel_interface["ptp"].get("announce", {}).get("interval") is not None:
             ptp announce interval ${ port_channel_interface["ptp"]["announce"]["interval"] }
          %         endif
          %         if port_channel_interface["ptp"].get("transport"):
             ptp transport ${ port_channel_interface["ptp"]["transport"] }
          %         endif
          %         if port_channel_interface["ptp"].get("announce", {}).get("timeout") is not None:
             ptp announce timeout ${ port_channel_interface["ptp"]["announce"]["timeout"] }
          %         endif
          %         if port_channel_interface["ptp"].get("delay_req") is not None:
             ptp delay-req interval ${ port_channel_interface["ptp"]["delay_req"] }
          %         endif
          %         if port_channel_interface["ptp"].get("role"):
             ptp role ${ port_channel_interface["ptp"].get("role") }
          %         endif
          %         if port_channel_interface["ptp"].get("vlan"):
             ptp vlan ${ port_channel_interface["ptp"]["vlan"] }
          %         endif
          %     endif
          %     if port_channel_interface.get("service_profile"):
             service-profile ${ port_channel_interface["service_profile"] }
          %     endif
          %     if port_channel_interface.get("spanning_tree_portfast", "") == 'edge':
             spanning-tree portfast
          %     elif port_channel_interface.get("spanning_tree_portfast") == 'network':
             spanning-tree portfast network
          %     endif
          %     if port_channel_interface.get("spanning_tree_bpduguard") in [True, "True", "enabled"]:
             spanning-tree bpduguard enable
          %     elif port_channel_interface.get("spanning_tree_bpduguard", "") == "disabled":
             spanning-tree bpduguard disable
          %     endif
          %     if port_channel_interface.get("spanning_tree_bpdufilter") in [True, "True", "enabled"]:
             spanning-tree bpdufilter enable
          %     elif port_channel_interface.get("spanning_tree_bpdufilter") == "disabled":
             spanning-tree bpdufilter disable
          %     endif
          %     if port_channel_interface.get("spanning_tree_guard"):
          %         if port_channel_interface["spanning_tree_guard"] == 'disabled':
             spanning-tree guard none
          %         else:
             spanning-tree guard ${ port_channel_interface["spanning_tree_guard"] }
          %         endif
          %     endif
          %     for cli_statement in port_channel_interface.get("eos_cli", "").split("\n"):
             ${cli_statement}
          %     endfor
          !
          % endfor
          ## eos - ethernet interfaces ##
          <% print_ethernet = False %>
          % for ethernet_interface in natural_sort(config.get("ethernet_interfaces"), sort_key="name"):
          %     if ethernet_interface.get("channel_group", {}).get("id") and ethernet_interface.get("channel_group", {}).get("mode"):
          <%        port_channel_interface_name = f"Port-Channel{ethernet_interface['channel_group']['id']}" %>
          ##%         if port_channel_interfaces | arista.avd.default([]) |
          ##                                        arista.avd.convert_dicts('name') |
          ##                                        selectattr('name', 'arista.avd.defined', port_channel_interface_name) |
          ##                                        selectattr('lacp_fallback_mode', 'arista.avd.defined', 'individual') |
          ##                                        length > 0 %}
          ##<%            print_ethernet = True %>
          ##%         endif
          %     else:
          <%        print_ethernet = True %>
          %     endif
          interface ${ ethernet_interface["name"] }
          %     if print_ethernet is True:
          %         if ethernet_interface.get("profile"):
             profile ${ ethernet_interface["profile"] }
          %         endif
          %     endif
          %     if ethernet_interface.get("description"):
             description ${ ethernet_interface["description"] }
          %     endif
          %     if ethernet_interface.get("shutdown", False) is True:
             shutdown
          %     elif ethernet_interface.get("shutdown", True) is False:
             no shutdown
          %     endif
          %     if print_ethernet is True:
          %         if ethernet_interface.get("mtu"):
             mtu ${ ethernet_interface["mtu"] }
          %         endif
          %     endif
          %     if print_ethernet:
          %         if ethernet_interface.get("flowcontrol", {}).get("received"):
             flowcontrol receive ${ ethernet_interface["flowcontrol"]["received"] }
          %         endif
          %     endif
          %     if ethernet_interface.get("speed"):
             speed ${ ethernet_interface["speed"] }
          %     endif
          %     if print_ethernet:
          %         if ethernet_interface.get("mode", "") in ['access', 'dot1q-tunnel']:
          %             if ethernet_interface.get("vlans"):
             switchport access vlan ${ ethernet_interface["vlans"] }
          %             endif
          %         endif
          %         if ethernet_interface.get("mode", "") in ['trunk', 'trunk phone']:
          %             if ethernet_interface.get("native_vlan_tag", False) is True:
             switchport trunk native vlan tag
          %             elif ethernet_interface.get("native_vlan"):
             switchport trunk native vlan ${ ethernet_interface["native_vlan"] }
          %             endif
          %         endif
          %         if ethernet_interface.get("phone", {}).get("vlan"):
             switchport phone vlan ${ ethernet_interface["phone"]["vlan"] }
          %         endif
          %         if ethernet_interface.get("phone", {}).get("trunk"):
             switchport phone trunk ${ ethernet_interface["phone"]["trunk"] }
          %         endif
          %         if ethernet_interface.get("mode") in ['trunk', 'trunk phone']:
          %             if ethernet_interface.get("vlans"):
             switchport trunk allowed vlan ${ ethernet_interface["vlans"] }
          %             endif
          %         endif
          %         if ethernet_interface.get("mode"):
             switchport mode ${ ethernet_interface["mode"] }
          %         endif
          %         if ethernet_interface.get("type") == 'routed':
             no switchport
          %         else:
             switchport
          %         endif
          %     endif
          %     if ethernet_interface.get("dot1x"):
          %         if ethernet_interface["dot1x"].get("pae", {}).get("mode"):
             dot1x pae ${ ethernet_interface["dot1x"]["pae"]["mode"] }
          %         endif
          %         if ethernet_interface["dot1x"].get("authentication_failure"):
          %             if ethernet_interface["dot1x"]["authentication_failure"].get("action") == 'allow' and ethernet_interface["dot1x"]["authentication_failure"].get("allow_vlan"):
             dot1x authentication failure action traffic allow vlan ${ ethernet_interface["dot1x"]["authentication_failure"]["allow_vlan"] }
          %             elif ethernet_interface["dot1x"]["authentication_failure"]["action"] == 'drop':
             dot1x authentication failure action traffic drop
          %             endif
          %         endif
          %         if ethernet_interface["dot1x"].get("reauthentication", False) is True:
             dot1x reauthentication
          %         endif
          %         if ethernet_interface["dot1x"].get("port_control"):
             dot1x port-control ${ ethernet_interface["dot1x"]["port_control"] }
          %         endif
          %         if ethernet_interface["dot1x"].get("port_control_force_authorized_phone", False) is True:
             dot1x port-control force-authorized phone
          %         elif ethernet_interface["dot1x"].get("port_control_force_authorized_phone", True) is False:
             no dot1x port-control force-authorized phone
          %         endif
          %         if ethernet_interface["dot1x"].get("host_mode"):
          %             if ethernet_interface["dot1x"]["host_mode"].get("mode", "") == 'single-host':
             dot1x host-mode single-host
          %             elif ethernet_interface["dot1x"]["host_mode"].get("mode", "") == 'multi-host':
          <%            host_mode_cli = "dot1x host-mode multi-host" %>
          %             if ethernet_interface["dot1x"]["host_mode"].get("multi_host_authenticated", False) is True:
          <%                host_mode_cli = host_mode_cli + " authenticated" %>
          %             endif
             ${ host_mode_cli }
          %             endif
          %         endif
          %         if ethernet_interface["dot1x"].get("mac_based_authentication", {}).get("enabled", False) is True:
          %             if ethernet_interface["dot1x"]["mac_based_authentication"].get("host_mode_common", False) is True:
             dot1x mac based authentication host-mode common
          %             if ethernet_interface["dot1x"]["mac_based_authentication"].get("always", False) is True:
             dot1x mac based authentication always
          %             endif
          %             else:
          <%            auth_cli = "dot1x mac based authentication" %>
          %             if ethernet_interface["dot1x"]["mac_based_authentication"].get("always", False) is True:
          <%                auth_cli = auth_cli + " always" %>
          %             endif
             ${ auth_cli }
          %             endif
          %         endif
          %         if ethernet_interface["dot1x"].get("timeout"):
          %             if ethernet_interface["dot1x"]["timeout"].get("quiet_period"):
             dot1x timeout quiet-period ${ ethernet_interface["dot1x"]["timeout"]["quiet_period"] }
          %             endif
          %             if ethernet_interface["dot1x"]["timeout"].get("reauth_timeout_ignore", False) is True:
             dot1x timeout reauth-timeout-ignore always
          %             endif
          %             if ethernet_interface["dot1x"]["timeout"].get("tx_period"):
             dot1x timeout tx-period ${ ethernet_interface["dot1x"]["timeout"]["tx_period"] }
          %             endif
          %             if ethernet_interface["dot1x"]["timeout"].get("reauth_period"):
             dot1x timeout reauth-period ${ ethernet_interface["dot1x"]["timeout"]["reauth_period"] }
          %             endif
          %             if ethernet_interface["dot1x"]["timeout"].get("idle_host"):
             dot1x timeout idle-host ${ ethernet_interface["dot1x"]["timeout"]["idle_host"] } seconds
          %             endif
          %         endif
          %         if ethernet_interface["dot1x"].get("reauthorization_request_limit"):
             dot1x reauthorization request limit ${ ethernet_interface["dot1x"]["reauthorization_request_limit"] }
          %         endif
          %         if ethernet_interface["dot1x"].get("eapol"):
          %             if ethernet_interface["dot1x"]["eapol"].get("disabled", False) is True:
             dot1x eapol disabled
          %             elif ethernet_interface["dot1x"]["eapol"].get("authentication_failure_fallback_mba", {}).get("enabled", False) is True:
          <%            auth_failure_fallback_mba = "dot1x eapol authentication failure fallback mba" %>
          %             if ethernet_interface["dot1x"]["eapol"]["authentication_failure_fallback_mba"].get("timeout"):
          <%                auth_failure_fallback_mba = auth_failure_fallback_mba + " timeout " + ethernet_interface["dot1x"]["eapol"]["authentication_failure_fallback_mba"]["timeout"] %>
          %             endif
             ${ auth_failure_fallback_mba }
          %             endif
          %         endif
          %     endif
          %     if ethernet_interface.get("channel_group", {}).get("id") and ethernet_interface.get("channel_group", {}).get("mode"):
             channel-group ${ ethernet_interface["channel_group"]["id"] } mode ${ ethernet_interface["channel_group"]["mode"] }
          %         if ethernet_interface.get("lacp_timer", {}).get("mode"):
             lacp timer ${ ethernet_interface["lacp_timer"]["mode"] }
          %         endif
          %         if ethernet_interface.get("lacp_timer", {}).get("multiplier"):
             lacp timer multiplier ${ ethernet_interface["lacp_timer"]["multiplier"] }
          %         endif
          %         if ethernet_interface.get("lacp_port_priority"):
             lacp port-priority ${ ethernet_interface["lacp_port_priority"] }
          %         endif
          %     endif
          %     if ethernet_interface.get("poe"):
          %         if ethernet_interface["poe"].get("priority"):
             poe priority ${ ethernet_interface["poe"]["priority"] }
          %         endif
          %         if ethernet_interface["poe"].get("reboot", {}).get("action"):
             poe reboot action ${ ethernet_interface["poe"]["reboot"]["action"] }
          %         endif
          %         if ethernet_interface["poe"].get("link_down", {}).get("action"):
             poe link down action ${ ethernet_interface["poe"]["link_down"]["action"] }
          %         endif
          %         if ethernet_interface["poe"].get("shutdown", {}).get("action"):
             poe shutdown action ${ ethernet_interface["poe"]["shutdown"]["action"] }
          %         endif
          %     endif
          %     if print_ethernet:
          %         for section in natural_sort(ethernet_interface.get("storm_control")):
          %             if ethernet_interface["storm_control"][section].get("level"):
          %                 if ethernet_interface["storm_control"][section].get("unit", "") == 'pps':
             storm-control ${ section.replace("_", "-") } level pps ${ ethernet_interface["storm_control"][section]["level"] }
          %                 else:
             storm-control ${ section.replace("_", "-") } level ${ ethernet_interface["storm_control"][section]["level"] }
          %                 endif
          %             endif
          %         endfor
          %         if ethernet_interface.get("ptp"):
          %             if ethernet_interface["ptp"].get("enable", False) is True:
             ptp enable
          %             endif
          %             if ethernet_interface["ptp"].get("sync_message", {}).get("interval") is not None:
             ptp sync-message interval ${ ethernet_interface["ptp"]["sync_message"]["interval"] }
          %             endif
          %             if ethernet_interface["ptp"].get("delay_mechanism") is not None:
             ptp delay-mechanism ${ ethernet_interface["ptp"]["delay_mechanism"] }
          %             endif
          %             if ethernet_interface["ptp"].get("announce", {}).get("interval") is not None:
             ptp announce interval ${ ethernet_interface["ptp"]["announce"]["interval"] }
          %             endif
          %             if ethernet_interface["ptp"].get("transport"):
             ptp transport ${ ethernet_interface["ptp"]["transport"] }
          %             endif
          %             if ethernet_interface["ptp"].get("announce", {}).get("timeout") is not None:
             ptp announce timeout ${ ethernet_interface["ptp"]["announce"]["timeout"] }
          %             endif
          %             if ethernet_interface["ptp"].get("delay_req") is not None:
             ptp delay-req interval ${ ethernet_interface["ptp"]["delay_req"] }
          %             endif
          %             if ethernet_interface["ptp"].get("role"):
             ptp role ${ ethernet_interface["ptp"].get("role") }
          %             endif
          %             if ethernet_interface["ptp"].get("vlan"):
             ptp vlan ${ ethernet_interface["ptp"]["vlan"] }
          %             endif
          %         endif
          %         if ethernet_interface.get("service_profile"):
             service-profile ${ ethernet_interface["service_profile"] }
          %         endif
          %         if ethernet_interface.get("spanning_tree_portfast", "") == 'edge':
             spanning-tree portfast
          %         elif ethernet_interface.get("spanning_tree_portfast") == 'network':
             spanning-tree portfast network
          %         endif
          %         if ethernet_interface.get("spanning_tree_bpduguard") in [True, "True", "enabled"]:
             spanning-tree bpduguard enable
          %         elif ethernet_interface.get("spanning_tree_bpduguard", "") == "disabled":
             spanning-tree bpduguard disable
          %         endif
          %         if ethernet_interface.get("spanning_tree_bpdufilter") in [True, "True", "enabled"]:
             spanning-tree bpdufilter enable
          %         elif ethernet_interface.get("spanning_tree_bpdufilter") == "disabled":
             spanning-tree bpdufilter disable
          %         endif
          %         if ethernet_interface.get("spanning_tree_guard"):
          %             if ethernet_interface["spanning_tree_guard"] == 'disabled':
             spanning-tree guard none
          %             else:
             spanning-tree guard ${ ethernet_interface["spanning_tree_guard"] }
          %             endif
          %         endif
          %     endif
          %     for cli_statement in ethernet_interface.get("eos_cli", "").split("\n"):
             ${cli_statement}
          %     endfor
          !
          % endfor
      input_schema:
        fields:
          values:
            portProfileName:
              id: portProfileName
              name: name
              label: Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePortfast:
              id: portProfilePortfast
              name: portfast
              label: Portfast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - edge
                    - network
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileBpduFilter:
              id: portProfileBpduFilter
              name: bpduFilter
              label: BPDU Filter
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - enabled
                    - disabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileBpduGuard:
              id: portProfileBpduGuard
              name: bpduGuard
              label: BPDU Guard
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - enabled
                    - disabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileSpanningTreeDetails:
              id: portProfileSpanningTreeDetails
              name: spanningTree
              label: Spanning Tree
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfilePortfast
                    - portProfileBpduFilter
                    - portProfileBpduGuard
            portProfileFlowControlReceived:
              id: portProfileFlowControlReceived
              name: received
              label: Received
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - received
                    - send
                    - 'on'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileFlowControl:
              id: portProfileFlowControl
              name: flowControl
              label: Flow Control
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileFlowControlReceived
            portProfileQosProfile:
              id: portProfileQosProfile
              name: qosProfile
              label: QOS Profile
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlAllLevel:
              id: portProfileStormControlAllLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlAllUnit:
              id: portProfileStormControlAllUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlAll:
              id: portProfileStormControlAll
              name: all
              label: All
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileStormControlAllLevel
                    - portProfileStormControlAllUnit
            portProfileStormControlBroadcastLevel:
              id: portProfileStormControlBroadcastLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlBroadcastUnit:
              id: portProfileStormControlBroadcastUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlBroadcast:
              id: portProfileStormControlBroadcast
              name: broadcast
              label: Broadcast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileStormControlBroadcastLevel
                    - portProfileStormControlBroadcastUnit
            portProfileStormControlMulticastLevel:
              id: portProfileStormControlMulticastLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlMulticastUnit:
              id: portProfileStormControlMulticastUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlMulticast:
              id: portProfileStormControlMulticast
              name: multicast
              label: Multicast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileStormControlMulticastLevel
                    - portProfileStormControlMulticastUnit
            portProfileStormControlUnknownUnicastLevel:
              id: portProfileStormControlUnknownUnicastLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlUnknownUnicastUnit:
              id: portProfileStormControlUnknownUnicastUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileStormControlUnknownUnicast:
              id: portProfileStormControlUnknownUnicast
              name: unknownUnicast
              label: Unknown Unicast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileStormControlUnknownUnicastLevel
                    - portProfileStormControlUnknownUnicastUnit
            portProfileStormControlDetails:
              id: portProfileStormControlDetails
              name: stormControl
              label: Storm Control
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileStormControlAll
                    - portProfileStormControlBroadcast
                    - portProfileStormControlMulticast
                    - portProfileStormControlUnknownUnicast
            portProfileMtu:
              id: portProfileMtu
              name: mtu
              label: MTU
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileSpeed:
              id: portProfileSpeed
              name: speed
              label: Speed
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePhoneVlan:
              id: portProfilePhoneVlan
              name: phoneVlan
              label: Phone VLAN
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileNativeVlan:
              id: portProfileNativeVlan
              name: nativeVlan
              label: Native VLAN
              description: Native VLAN for a trunk port
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileVlans:
              id: portProfileVlans
              name: vlans
              label: VLANs
              description: Interface VLANs
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileVlansGroup:
              id: portProfileVlansGroup
              name: vlans
              label: VLANs
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfilePhoneVlan
                    - portProfileNativeVlan
                    - portProfileVlans
            portProfileEosCli:
              id: portProfileEosCli
              name: eosCli
              label: EOS CLI
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePtpEnable:
              id: portProfilePtpEnable
              name: enabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePtpEndpointRole:
              id: portProfilePtpEndpointRole
              name: endpointRole
              label: Endpoint Role
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: follower
                static_options:
                  values:
                    - follower
                    - bmca
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePtpProfile:
              id: portProfilePtpProfile
              name: profile
              label: PTP Profile
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: aes67-r16-2016
                static_options:
                  values:
                    - aes67
                    - smpte2059-2
                    - aes67-r16-2016
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePtp:
              id: portProfilePtp
              name: ptp
              label: PTP
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfilePtpEnable
                    - portProfilePtpEndpointRole
                    - portProfilePtpProfile
            portProfileParentProfile:
              id: portProfileParentProfile
              name: parentProfile
              label: Parent Profile
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileEnabled:
              id: portProfileEnabled
              name: enabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileMode:
              id: portProfileMode
              name: mode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - access
                    - dot1q-tunnel
                    - trunk
                    - trunk phone
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XEnabled:
              id: portProfileDot1XEnabled
              name: enabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XReauthentication:
              id: portProfileDot1XReauthentication
              name: reauthentication
              label: Reauthentication
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XPaeMode:
              id: portProfileDot1XPaeMode
              name: mode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: authenticator
                static_options:
                  values:
                    - authenticator
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XPae:
              id: portProfileDot1XPae
              name: pae
              label: PAE
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileDot1XPaeMode
            portProfileDot1XAuthFailureAction:
              id: portProfileDot1XAuthFailureAction
              name: action
              label: Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - Allow
                    - Drop
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XAuthFailureAllowVlan:
              id: portProfileDot1XAuthFailureAllowVlan
              name: allowVlan
              label: Allow VLAN
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileDot1XAuthFailure:
              id: portProfileDot1XAuthFailure
              name: authenticationFailure
              label: Authentication Failure
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileDot1XAuthFailureAction
                    - portProfileDot1XAuthFailureAllowVlan
            portProfileDot1XHostModeMode:
              id: portProfileDot1XHostModeMode
              name: mode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - multi-host
                    - single-host
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XHostModeMultiHostAuth:
              id: portProfileDot1XHostModeMultiHostAuth
              name: multiHostAuthenticated
              label: Multi-Host Authenticated
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XHostMode:
              id: portProfileDot1XHostMode
              name: hostMode
              label: Host Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileDot1XHostModeMode
                    - portProfileDot1XHostModeMultiHostAuth
            portProfileDot1XMbaEnabled:
              id: portProfileDot1XMbaEnabled
              name: enable
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XMbaAlways:
              id: portProfileDot1XMbaAlways
              name: always
              label: Always
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XMbaHostModeCommon:
              id: portProfileDot1XMbaHostModeCommon
              name: hostModeCommon
              label: Host Mode Common
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XMba:
              id: portProfileDot1XMba
              name: macBasedAuthentication
              label: MAC Based Authentication
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileDot1XMbaEnabled
                    - portProfileDot1XMbaAlways
                    - portProfileDot1XMbaHostModeCommon
            portProfileDot1XIdleHostTimeout:
              id: portProfileDot1XIdleHostTimeout
              name: idleHost
              label: Idle Host Timeout
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileDot1XQuietPeriod:
              id: portProfileDot1XQuietPeriod
              name: quietPeriod
              label: Quiet Period
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileDot1XReauthenticationPeriod:
              id: portProfileDot1XReauthenticationPeriod
              name: reauthenticationPeriod
              label: Reauthentication Period
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XReauthenticationTimeoutIgnore:
              id: portProfileDot1XReauthenticationTimeoutIgnore
              name: reauthenticationTimeoutIgnore
              label: Reauthentication Timeout Ignore
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XTxPeriod:
              id: portProfileDot1XTxPeriod
              name: txPeriod
              label: Tx Period
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileDot1XTimeouts:
              id: portProfileDot1XTimeouts
              name: timeouts
              label: Timeouts
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileDot1XIdleHostTimeout
                    - portProfileDot1XQuietPeriod
                    - portProfileDot1XReauthenticationPeriod
                    - portProfileDot1XReauthenticationTimeoutIgnore
                    - portProfileDot1XTxPeriod
            portProfileDot1XReauthRequestLimit:
              id: portProfileDot1XReauthRequestLimit
              name: reauthorizationRequestLimit
              label: Reauthorization Request Limit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfileDot1XPortControl:
              id: portProfileDot1XPortControl
              name: portControl
              label: Port Control
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: auto
                static_options:
                  values:
                    - auto
                    - force-authorized
                    - force-unauthorized
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1XPortControlForceAuthPhone:
              id: portProfileDot1XPortControlForceAuthPhone
              name: portControlForceAuthorizedPhone
              label: Port Control Force Authorized Phone
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileDot1X:
              id: portProfileDot1X
              name: dot1x
              label: 802.1X
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileDot1XEnabled
                    - portProfileDot1XReauthentication
                    - portProfileDot1XPae
                    - portProfileDot1XAuthFailure
                    - portProfileDot1XHostMode
                    - portProfileDot1XMba
                    - portProfileDot1XTimeouts
                    - portProfileDot1XReauthRequestLimit
                    - portProfileDot1XPortControl
                    - portProfileDot1XPortControlForceAuthPhone
            portProfilePhoneTrunk:
              id: portProfilePhoneTrunk
              name: trunk
              label: Trunk
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - tagged
                    - untagged
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePhone:
              id: portProfilePhone
              name: phone
              label: Phone
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfilePhoneTrunk
            portProfilePoePriority:
              id: portProfilePoePriority
              name: priority
              label: Priority
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - critical
                    - high
                    - medium
                    - low
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePoeRebootAction:
              id: portProfilePoeRebootAction
              name: rebootAction
              label: Reboot Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - maintain
                    - power-off
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePoeLinkDownAction:
              id: portProfilePoeLinkDownAction
              name: linkDownAction
              label: Link Down Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - maintain
                    - power-off
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePoeShutdownAction:
              id: portProfilePoeShutdownAction
              name: shutdownAction
              label: Shutdown Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - maintain
                    - power-off
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePoe:
              id: portProfilePoe
              name: poe
              label: POE
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfilePoePriority
                    - portProfilePoeRebootAction
                    - portProfilePoeLinkDownAction
                    - portProfilePoeShutdownAction
            portProfilePortChannelMembership:
              id: portProfilePortChannelMembership
              name: portChannel
              label: Port-Channel
              description: Make this ethernet interface a member of a Port-Channel interface
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePortChannelEnabled:
              id: portProfilePortChannelEnabled
              name: portChannelEnabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePortChannelMode:
              id: portProfilePortChannelMode
              name: portChannelMode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - active
                    - passive
                    - 'on'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePortChannelLacpFallbackMode:
              id: portProfilePortChannelLacpFallbackMode
              name: lacpFallbackMode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - static
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePortChannelLacpFallbackTimeout:
              id: portProfilePortChannelLacpFallbackTimeout
              name: timeout
              label: Timeout
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            portProfilePortChannelLacpFallback:
              id: portProfilePortChannelLacpFallback
              name: lacpFallback
              label: LACP Fallback
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfilePortChannelLacpFallbackMode
                    - portProfilePortChannelLacpFallbackTimeout
            portProfilePortChannelMlag:
              id: portProfilePortChannelMlag
              name: mlag
              label: MLAG
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePortChannelEosCli:
              id: portProfilePortChannelEosCli
              name: eosCli
              label: EOS CLI
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfilePortChannel:
              id: portProfilePortChannel
              name: portChannel
              label: Port-Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfilePortChannelMembership
                    - portProfilePortChannelEnabled
                    - portProfilePortChannelMode
                    - portProfilePortChannelLacpFallback
                    - portProfilePortChannelMlag
                    - portProfilePortChannelEosCli
            portProfileDescription:
              id: portProfileDescription
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            portProfileGroups:
              id: portProfileGroups
              name: portProfileGroups
              label: Port Profile Groups
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfileName
                    - portProfileSpanningTreeDetails
                    - portProfileFlowControl
                    - portProfileQosProfile
                    - portProfileStormControlDetails
                    - portProfileMtu
                    - portProfileSpeed
                    - portProfileVlansGroup
                    - portProfileEosCli
                    - portProfilePtp
                    - portProfileParentProfile
                    - portProfileEnabled
                    - portProfileMode
                    - portProfileDot1X
                    - portProfilePhone
                    - portProfilePoe
                    - portProfilePortChannel
                    - portProfileDescription
            portProfiles:
              id: portProfiles
              name: portProfiles
              label: Port Profiles
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: portProfileGroups
                key: portProfileName
            adapterPortProfile:
              id: adapterPortProfile
              name: portProfile
              label: Port Profile
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"portProfileName"}'
            adapterPortfast:
              id: adapterPortfast
              name: portfast
              label: Portfast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - edge
                    - network
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterBpduFilter:
              id: adapterBpduFilter
              name: bpduFilter
              label: BPDU Filter
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - enabled
                    - disabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterBpduGuard:
              id: adapterBpduGuard
              name: bpduGuard
              label: BPDU Guard
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - enabled
                    - disabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterSpanningTreeDetails:
              id: adapterSpanningTreeDetails
              name: spanningTree
              label: Spanning Tree
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPortfast
                    - adapterBpduFilter
                    - adapterBpduGuard
            adapterFlowControlReceived:
              id: adapterFlowControlReceived
              name: received
              label: Received
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - received
                    - send
                    - 'on'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterFlowControl:
              id: adapterFlowControl
              name: flowControl
              label: Flow Control
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterFlowControlReceived
            adapterQosProfile:
              id: adapterQosProfile
              name: qosProfile
              label: QOS Profile
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlAllLevel:
              id: adapterStormControlAllLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlAllUnit:
              id: adapterStormControlAllUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlAll:
              id: adapterStormControlAll
              name: all
              label: All
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterStormControlAllLevel
                    - adapterStormControlAllUnit
            adapterStormControlBroadcastLevel:
              id: adapterStormControlBroadcastLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlBroadcastUnit:
              id: adapterStormControlBroadcastUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlBroadcast:
              id: adapterStormControlBroadcast
              name: broadcast
              label: Broadcast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterStormControlBroadcastLevel
                    - adapterStormControlBroadcastUnit
            adapterStormControlMulticastLevel:
              id: adapterStormControlMulticastLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlMulticastUnit:
              id: adapterStormControlMulticastUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlMulticast:
              id: adapterStormControlMulticast
              name: multicast
              label: Multicast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterStormControlMulticastLevel
                    - adapterStormControlMulticastUnit
            adapterStormControlUnknownUnicastLevel:
              id: adapterStormControlUnknownUnicastLevel
              name: level
              label: Level
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlUnknownUnicastUnit:
              id: adapterStormControlUnknownUnicastUnit
              name: unit
              label: Unit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - percent
                    - pps
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterStormControlUnknownUnicast:
              id: adapterStormControlUnknownUnicast
              name: unknownUnicast
              label: Unknown Unicast
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterStormControlUnknownUnicastLevel
                    - adapterStormControlUnknownUnicastUnit
            adapterStormControlDetails:
              id: adapterStormControlDetails
              name: stormControl
              label: Storm Control
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterStormControlAll
                    - adapterStormControlBroadcast
                    - adapterStormControlMulticast
                    - adapterStormControlUnknownUnicast
            adapterMtu:
              id: adapterMtu
              name: mtu
              label: MTU
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterSpeed:
              id: adapterSpeed
              name: speed
              label: Speed
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPhoneVlan:
              id: adapterPhoneVlan
              name: phoneVlan
              label: Phone VLAN
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterNativeVlan:
              id: adapterNativeVlan
              name: nativeVlan
              label: Native VLAN
              description: Native VLAN for a trunk port
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterVlans:
              id: adapterVlans
              name: vlans
              label: VLANs
              description: Interface VLANs
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterVlansGroup:
              id: adapterVlansGroup
              name: vlans
              label: VLANs
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPhoneVlan
                    - adapterNativeVlan
                    - adapterVlans
            adapterEosCli:
              id: adapterEosCli
              name: eosCli
              label: EOS CLI
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPtpEnable:
              id: adapterPtpEnable
              name: enabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPtpEndpointRole:
              id: adapterPtpEndpointRole
              name: endpointRole
              label: Endpoint Role
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: follower
                static_options:
                  values:
                    - follower
                    - bmca
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPtpProfile:
              id: adapterPtpProfile
              name: profile
              label: PTP Profile
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: aes67-r16-2016
                static_options:
                  values:
                    - aes67
                    - smpte2059-2
                    - aes67-r16-2016
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPtp:
              id: adapterPtp
              name: ptp
              label: PTP
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPtpEnable
                    - adapterPtpEndpointRole
                    - adapterPtpProfile
            adapterEnabled:
              id: adapterEnabled
              name: enabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterMode:
              id: adapterMode
              name: mode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - access
                    - dot1q-tunnel
                    - trunk
                    - trunk phone
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XEnabled:
              id: adapterDot1XEnabled
              name: enabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XReauthentication:
              id: adapterDot1XReauthentication
              name: reauthentication
              label: Reauthentication
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XPaeMode:
              id: adapterDot1XPaeMode
              name: mode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: authenticator
                static_options:
                  values:
                    - authenticator
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XPae:
              id: adapterDot1XPae
              name: pae
              label: PAE
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterDot1XPaeMode
            adapterDot1XAuthFailureAction:
              id: adapterDot1XAuthFailureAction
              name: action
              label: Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - Allow
                    - Drop
                    - Disable
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XAuthFailureAllowVlan:
              id: adapterDot1XAuthFailureAllowVlan
              name: allowVlan
              label: Allow VLAN
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterDot1XAuthFailure:
              id: adapterDot1XAuthFailure
              name: authenticationFailure
              label: Authentication Failure
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterDot1XAuthFailureAction
                    - adapterDot1XAuthFailureAllowVlan
            adapterDot1XHostModeMode:
              id: adapterDot1XHostModeMode
              name: mode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - multi-host
                    - single-host
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XHostModeMultiHostAuth:
              id: adapterDot1XHostModeMultiHostAuth
              name: multiHostAuthenticated
              label: Multi-Host Authenticated
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XHostMode:
              id: adapterDot1XHostMode
              name: hostMode
              label: Host Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterDot1XHostModeMode
                    - adapterDot1XHostModeMultiHostAuth
            adapterDot1XMbaEnabled:
              id: adapterDot1XMbaEnabled
              name: enable
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XMbaAlways:
              id: adapterDot1XMbaAlways
              name: always
              label: Always
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XMbaHostModeCommon:
              id: adapterDot1XMbaHostModeCommon
              name: hostModeCommon
              label: Host Mode Common
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XMba:
              id: adapterDot1XMba
              name: macBasedAuthentication
              label: MAC Based Authentication
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterDot1XMbaEnabled
                    - adapterDot1XMbaAlways
                    - adapterDot1XMbaHostModeCommon
            adapterDot1XIdleHostTimeout:
              id: adapterDot1XIdleHostTimeout
              name: idleHost
              label: Idle Host Timeout
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterDot1XQuietPeriod:
              id: adapterDot1XQuietPeriod
              name: quietPeriod
              label: Quiet Period
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterDot1XReauthenticationPeriod:
              id: adapterDot1XReauthenticationPeriod
              name: reauthenticationPeriod
              label: Reauthentication Period
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XReauthenticationTimeoutIgnore:
              id: adapterDot1XReauthenticationTimeoutIgnore
              name: reauthenticationTimeoutIgnore
              label: Reauthentication Timeout Ignore
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XTxPeriod:
              id: adapterDot1XTxPeriod
              name: txPeriod
              label: Tx Period
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterDot1XTimeouts:
              id: adapterDot1XTimeouts
              name: timeouts
              label: Timeouts
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterDot1XIdleHostTimeout
                    - adapterDot1XQuietPeriod
                    - adapterDot1XReauthenticationPeriod
                    - adapterDot1XReauthenticationTimeoutIgnore
                    - adapterDot1XTxPeriod
            adapterDot1XReauthRequestLimit:
              id: adapterDot1XReauthRequestLimit
              name: reauthorizationRequestLimit
              label: Reauthorization Request Limit
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterDot1XPortControl:
              id: adapterDot1XPortControl
              name: portControl
              label: Port Control
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: auto
                static_options:
                  values:
                    - auto
                    - force-authorized
                    - force-unauthorized
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1XPortControlForceAuthPhone:
              id: adapterDot1XPortControlForceAuthPhone
              name: portControlForceAuthorizedPhone
              label: Port Control Force Authorized Phone
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDot1X:
              id: adapterDot1X
              name: dot1x
              label: 802.1X
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterDot1XEnabled
                    - adapterDot1XReauthentication
                    - adapterDot1XPae
                    - adapterDot1XAuthFailure
                    - adapterDot1XHostMode
                    - adapterDot1XMba
                    - adapterDot1XTimeouts
                    - adapterDot1XReauthRequestLimit
                    - adapterDot1XPortControl
                    - adapterDot1XPortControlForceAuthPhone
            adapterPhoneTrunk:
              id: adapterPhoneTrunk
              name: trunk
              label: Trunk
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - tagged
                    - untagged
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPhone:
              id: adapterPhone
              name: phone
              label: Phone
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPhoneTrunk
            adapterPoePriority:
              id: adapterPoePriority
              name: priority
              label: Priority
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - critical
                    - high
                    - medium
                    - low
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPoeRebootAction:
              id: adapterPoeRebootAction
              name: rebootAction
              label: Reboot Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - maintain
                    - power-off
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPoeLinkDownAction:
              id: adapterPoeLinkDownAction
              name: linkDownAction
              label: Link Down Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - maintain
                    - power-off
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPoeShutdownAction:
              id: adapterPoeShutdownAction
              name: shutdownAction
              label: Shutdown Action
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - maintain
                    - power-off
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPoe:
              id: adapterPoe
              name: poe
              label: POE
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPoePriority
                    - adapterPoeRebootAction
                    - adapterPoeLinkDownAction
                    - adapterPoeShutdownAction
            adapterPortChannelMembership:
              id: adapterPortChannelMembership
              name: portChannel
              label: Port-Channel
              description: Make this ethernet interface a member of a Port-Channel interface
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPortChannelEnabled:
              id: adapterPortChannelEnabled
              name: portChannelEnabled
              label: Enabled
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPortChannelId:
              id: adapterPortChannelId
              name: portChannelId
              label: Port-Channel ID
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterPortChannelMode:
              id: adapterPortChannelMode
              name: portChannelMode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - active
                    - passive
                    - 'on'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPortChannelLacpFallbackMode:
              id: adapterPortChannelLacpFallbackMode
              name: lacpFallbackMode
              label: Mode
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - static
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPortChannelLacpFallbackTimeout:
              id: adapterPortChannelLacpFallbackTimeout
              name: timeout
              label: Timeout
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            adapterPortChannelLacpFallback:
              id: adapterPortChannelLacpFallback
              name: lacpFallback
              label: LACP Fallback
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPortChannelLacpFallbackMode
                    - adapterPortChannelLacpFallbackTimeout
            adapterPortChannelMlag:
              id: adapterPortChannelMlag
              name: mlag
              label: MLAG
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                    - 'No'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPortChannelEosCli:
              id: adapterPortChannelEosCli
              name: eosCli
              label: EOS CLI
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterPortChannel:
              id: adapterPortChannel
              name: portChannel
              label: Port-Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPortChannelMembership
                    - adapterPortChannelEnabled
                    - adapterPortChannelId
                    - adapterPortChannelMode
                    - adapterPortChannelLacpFallback
                    - adapterPortChannelMlag
                    - adapterPortChannelEosCli
            adapterDescription:
              id: adapterDescription
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            adapterDetails:
              id: adapterDetails
              name: adapterDetails
              label: Configuration Details
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - adapterPortProfile
                    - adapterSpanningTreeDetails
                    - adapterFlowControl
                    - adapterQosProfile
                    - adapterStormControlDetails
                    - adapterMtu
                    - adapterSpeed
                    - adapterVlansGroup
                    - adapterEosCli
                    - adapterPtp
                    - adapterEnabled
                    - adapterMode
                    - adapterDot1X
                    - adapterPhone
                    - adapterPoe
                    - adapterPortChannel
                    - adapterDescription
            interfacesResolver:
              id: interfacesResolver
              name: interfaces
              label: Interfaces
              description: Select an interface to configure
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: adapterDetails
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_ALL
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG
                input_tag_label: interface
                tag_filter_query: null
            accessPodResolver:
              id: accessPodResolver
              name: accessPod
              label: Access Pod
              description: Select the Access Pod of the device to configure
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: interfacesResolver
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_ALL
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG
                input_tag_label: Access-Pod
                tag_filter_query: null
            campusPodResolver:
              id: campusPodResolver
              name: campusPod
              label: Campus-Pod
              description: Select the Campus-Pod of the device to configure
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: accessPodResolver
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_ALL
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG
                input_tag_label: Campus-Pod
                tag_filter_query: null
            campusResolver:
              id: campusResolver
              name: campus
              label: Campus
              description: Select the Campus of the device to configure
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: campusPodResolver
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_ALL
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG
                input_tag_label: Campus
                tag_filter_query: null
            root:
              id: root
              name: ''
              label: ''
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - portProfiles
                    - campusResolver
        layout:
          value: |
            {
              "portProfiles":{
                "key":"portProfiles",
                "isPageLayout":true,
                "type":"INPUT"
              },
              "adapters":{
                "key":"adapters",
                "type":"INPUT",
                "isPageLayout":true
              },
              "portProfileGroups":{
                "key":"portProfileGroups",
                "type":"INPUT",
                "order":[
                  "portProfileName",
                  "portProfileParentProfile",
                  "portProfileDescription",
                  "portProfileEnabled",
                  "portProfileSpeed",
                  "portProfileMtu",
                  "portProfileMode",
                  "portProfileVlansGroup",
                  "portProfileSpanningTreeDetails",
                  "portProfilePhone",
                  "portProfileDot1X",
                  "portProfilePoe",
                  "portProfilePtp",
                  "portProfileQosProfile",
                  "portProfileFlowControl",
                  "portProfileStormControlDetails",
                  "portProfileEosCli",
                  "portProfilePortChannel"
                ]
              },
              "adapterDetails":{
                "key":"adapterDetails",
                "type":"INPUT",
                "order":[
                  "adapterPortProfile",
                  "adapterDescription",
                  "adapterEnabled",
                  "adapterSpeed",
                  "adapterMtu",
                  "adapterMode",
                  "adapterVlansGroup",
                  "adapterSpanningTreeDetails",
                  "adapterPhone",
                  "adapterDot1X",
                  "adapterPoe",
                  "adapterPtp",
                  "adapterQosProfile",
                  "adapterFlowControl",
                  "adapterStormControlDetails",
                  "adapterEosCli",
                  "adapterPortChannel"
                ]
              },
              "portProfilePtp":{
                "key":"portProfilePtp",
                "type":"INPUT",
                "order":[
                  "portProfilePtpEnable",
                  "portProfilePtpProfile",
                  "portProfilePtpEndpointRole"
                ]
              },
              "portProfilePtpProfile":{
                "key":"portProfilePtpProfile",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfilePtpEnable":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfilePtpEndpointRole":{
                "key":"portProfilePtpEndpointRole",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfilePtpEnable":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileVlansGroup":{
                "key":"portProfileVlansGroup",
                "type":"INPUT",
                "order":[
                  "portProfileVlans",
                  "portProfileNativeVlan",
                  "portProfilePhoneVlan"
                ]
              },
              "portProfileNativeVlan":{
                "key":"portProfileNativeVlan",
                "dependency":{
                  "portProfileMode":{
                    "value":[
                      "trunk",
                      "trunk phone"
                    ],
                    "mode":"SHOW"
                  }
                },
                "dependencyType":"AND",
                "type":"INPUT"
              },
              "portProfilePhoneVlan":{
                "key":"portProfilePhoneVlan",
                "dependency":{
                  "portProfileMode":{
                    "value":[
                      "trunk phone"
                    ],
                    "mode":"SHOW"
                  }
                },
                "dependencyType":"AND",
                "type":"INPUT"
              },
              "portProfileDot1XPortControl":{
                "key":"portProfileDot1XPortControl",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XPortControlForceAuthPhone":{
                "key":"portProfileDot1XPortControlForceAuthPhone",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XReauthentication":{
                "key":"portProfileDot1XReauthentication",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XPaeMode":{
                "key":"portProfileDot1XPaeMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XAuthFailureAction":{
                "key":"portProfileDot1XAuthFailureAction",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XAuthFailureAllowVlan":{
                "key":"portProfileDot1XAuthFailureAllowVlan",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "portProfileDot1XAuthFailureAction":{
                    "value":[
                      "Allow"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XHostModeMode":{
                "key":"portProfileDot1XHostModeMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XHostModeMultiHostAuth":{
                "key":"portProfileDot1XHostModeMultiHostAuth",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "portProfileDot1XHostModeMode":{
                    "value":[
                      "multi-host"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XMbaEnabled":{
                "key":"portProfileDot1XMbaEnabled",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XMbaAlways":{
                "key":"portProfileDot1XMbaAlways",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "portProfileDot1XMbaEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                },
                "dependencyType":"AND",
                "type":"INPUT"
              },
              "portProfileDot1XMbaHostModeCommon":{
                "key":"portProfileDot1XMbaHostModeCommon",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "portProfileDot1XMbaEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XTimeouts":{
                "key":"portProfileDot1XTimeouts",
                "type":"INPUT",
                "order":[
                  "portProfileDot1XIdleHostTimeout",
                  "portProfileDot1XQuietPeriod",
                  "portProfileDot1XReauthenticationPeriod",
                  "portProfileDot1XReauthenticationTimeoutIgnore",
                  "portProfileDot1XTxPeriod"
                ]
              },
              "portProfileDot1XReauthenticationTimeoutIgnore":{
                "key":"portProfileDot1XReauthenticationTimeoutIgnore",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "portProfileDot1XReauthentication":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                },
                "dependencyType":"AND",
                "type":"INPUT"
              },
              "portProfileDot1XIdleHostTimeout":{
                "key":"portProfileDot1XIdleHostTimeout",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XQuietPeriod":{
                "key":"portProfileDot1XQuietPeriod",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XReauthenticationPeriod":{
                "key":"portProfileDot1XReauthenticationPeriod",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "portProfileDot1XReauthentication":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                },
                "dependencyType":"AND",
                "type":"INPUT"
              },
              "portProfileDot1XReauthRequestLimit":{
                "key":"portProfileDot1XReauthRequestLimit",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "portProfileDot1XReauthentication":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                },
                "dependencyType":"AND",
                "type":"INPUT"
              },
              "portProfileDot1XTxPeriod":{
                "key":"portProfileDot1XTxPeriod",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfileDot1XEnabled":{
                "key":"portProfileDot1XEnabled",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                }
              },
              "portProfileDot1X":{
                "key":"portProfileDot1X",
                "type":"INPUT",
                "order":[
                  "portProfileDot1XEnabled",
                  "portProfileDot1XPortControl",
                  "portProfileDot1XPortControlForceAuthPhone",
                  "portProfileDot1XReauthentication",
                  "portProfileDot1XPae",
                  "portProfileDot1XAuthFailure",
                  "portProfileDot1XHostMode",
                  "portProfileDot1XMba",
                  "portProfileDot1XTimeouts",
                  "portProfileDot1XReauthRequestLimit"
                ]
              },
              "adapterPtpEndpointRole":{
                "key":"adapterPtpEndpointRole",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPtpEnable":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPtpProfile":{
                "key":"adapterPtpProfile",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPtpEnable":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPtp":{
                "key":"adapterPtp",
                "type":"INPUT",
                "order":[
                  "adapterPtpEnable",
                  "adapterPtpProfile",
                  "adapterPtpEndpointRole"
                ]
              },
              "adapterDot1XReauthentication":{
                "key":"adapterDot1XReauthentication",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XPaeMode":{
                "key":"adapterDot1XPaeMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XAuthFailureAction":{
                "key":"adapterDot1XAuthFailureAction",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XAuthFailureAllowVlan":{
                "key":"adapterDot1XAuthFailureAllowVlan",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "adapterDot1XAuthFailureAction":{
                    "value":[
                      "Allow"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XHostModeMode":{
                "key":"adapterDot1XHostModeMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XHostModeMultiHostAuth":{
                "key":"adapterDot1XHostModeMultiHostAuth",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XHostModeMode":{
                    "value":[
                      "multi-host"
                    ],
                    "mode":"SHOW"
                  },
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XMbaEnabled":{
                "key":"adapterDot1XMbaEnabled",
                "type":"INPUT",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XMbaAlways":{
                "key":"adapterDot1XMbaAlways",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "adapterDot1XMbaEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XMbaHostModeCommon":{
                "key":"adapterDot1XMbaHostModeCommon",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "adapterDot1XMbaEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XIdleHostTimeout":{
                "key":"adapterDot1XIdleHostTimeout",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XQuietPeriod":{
                "key":"adapterDot1XQuietPeriod",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XReauthenticationPeriod":{
                "key":"adapterDot1XReauthenticationPeriod",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "adapterDot1XReauthentication":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XReauthenticationTimeoutIgnore":{
                "key":"adapterDot1XReauthenticationTimeoutIgnore",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "adapterDot1XReauthentication":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XTxPeriod":{
                "key":"adapterDot1XTxPeriod",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XReauthRequestLimit":{
                "key":"adapterDot1XReauthRequestLimit",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  },
                  "adapterDot1XReauthentication":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XPortControl":{
                "key":"adapterDot1XPortControl",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1XPortControlForceAuthPhone":{
                "key":"adapterDot1XPortControlForceAuthPhone",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterDot1XEnabled":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterDot1X":{
                "key":"adapterDot1X",
                "type":"INPUT",
                "order":[
                  "adapterDot1XEnabled",
                  "adapterDot1XPortControl",
                  "adapterDot1XPortControlForceAuthPhone",
                  "adapterDot1XReauthentication",
                  "adapterDot1XPae",
                  "adapterDot1XAuthFailure",
                  "adapterDot1XHostMode",
                  "adapterDot1XMba",
                  "adapterDot1XTimeouts",
                  "adapterDot1XReauthRequestLimit"
                ]
              },
              "adapterVlansGroup":{
                "key":"adapterVlansGroup",
                "type":"INPUT",
                "order":[
                  "adapterVlans",
                  "adapterNativeVlan",
                  "adapterPhoneVlan"
                ]
              },
              "adapterPhoneTrunk":{
                "key":"adapterPhoneTrunk",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterMode":{
                    "value":[
                      "trunk phone"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfilePhoneTrunk":{
                "key":"portProfilePhoneTrunk",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfileMode":{
                    "value":[
                      "trunk phone"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPhoneVlan":{
                "key":"adapterPhoneVlan",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterMode":{
                    "value":[
                      "trunk phone"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterNativeVlan":{
                "key":"adapterNativeVlan",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterMode":{
                    "value":[
                      "trunk phone",
                      "trunk"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterEosCli":{
                "key":"adapterEosCli",
                "type":"INPUT",
                "isMultiLine":true,
                "syntax":"aristaConfig"
              },
              "adapterPortChannel":{
                "key":"adapterPortChannel",
                "type":"INPUT",
                "order":[
                  "adapterPortChannelMembership",
                  "adapterPortChannelId",
                  "adapterPortChannelMode",
                  "adapterPortChannelEnabled",
                  "adapterPortChannelMlag",
                  "adapterPortChannelLacpFallback",
                  "adapterPortChannelEosCli"
                ]
              },
              "adapterPortChannelId":{
                "key":"adapterPortChannelId",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPortChannelMode":{
                "key":"adapterPortChannelMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPortChannelEnabled":{
                "key":"adapterPortChannelEnabled",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPortChannelMlag":{
                "key":"adapterPortChannelMlag",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPortChannelLacpFallbackMode":{
                "key":"adapterPortChannelLacpFallbackMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPortChannelLacpFallbackTimeout":{
                "key":"adapterPortChannelLacpFallbackTimeout",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "adapterPortChannelEosCli":{
                "key":"adapterPortChannelEosCli",
                "dependencyType":"AND",
                "dependency":{
                  "adapterPortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                },
                "type":"INPUT",
                "isMultiLine":true,
                "syntax":"aristaConfig"
              },
              "portProfilePortChannelEnabled":{
                "key":"portProfilePortChannelEnabled",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfilePortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfilePortChannelMode":{
                "key":"portProfilePortChannelMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfilePortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfilePortChannelLacpFallbackMode":{
                "key":"portProfilePortChannelLacpFallbackMode",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfilePortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfilePortChannelLacpFallbackTimeout":{
                "key":"portProfilePortChannelLacpFallbackTimeout",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfilePortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfilePortChannelMlag":{
                "key":"portProfilePortChannelMlag",
                "type":"INPUT",
                "dependencyType":"AND",
                "dependency":{
                  "portProfilePortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                }
              },
              "portProfilePortChannelEosCli":{
                "key":"portProfilePortChannelEosCli",
                "dependency":{
                  "portProfilePortChannelMembership":{
                    "value":[
                      "Yes"
                    ],
                    "mode":"SHOW"
                  }
                },
                "type":"INPUT",
                "dependencyType":"AND",
                "isMultiLine":true,
                "syntax":"aristaConfig"
              },
              "portProfileEosCli":{
                "key":"portProfileEosCli",
                "type":"INPUT",
                "isMultiLine":true,
                "syntax":"aristaConfig"
              },
              "portProfilePortChannel":{
                "key":"portProfilePortChannel",
                "type":"INPUT",
                "order":[
                  "portProfilePortChannelMembership",
                  "portProfilePortChannelMode",
                  "portProfilePortChannelEnabled",
                  "portProfilePortChannelMlag",
                  "portProfilePortChannelLacpFallback",
                  "portProfilePortChannelEosCli"
                ]
              }
            }
